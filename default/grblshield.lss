
grblshield.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000043ec  00004480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ef  00800112  00800112  00004492  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  00004492  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000568  00000000  00000000  00004632  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ddc  00000000  00000000  00004b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ac  00000000  00000000  00007976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021d8  00000000  00000000  00008a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000abfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e44  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b6a  00000000  00000000  0000bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000da5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__vector_11>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_18>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 57       	subi	r19, 0x7F	; 127

000000b3 <__c.1735>:
      b3:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
      c3:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
      d3:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
      e3:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

000000ee <__c.1733>:
      ee:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
      fe:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

0000010d <__c.1723>:
     10d:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     11d:	6e 67 0d 0a 00                                      ng...

00000122 <__c.1721>:
     122:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     132:	72 0d 0a 00                                         r...

00000136 <__c.1710>:
     136:	53 74 65 70 73 2f 6d 6d 20 6d 75 73 74 20 62 65     Steps/mm must be
     146:	20 3e 20 30 2e 30 0d 0a 00                           > 0.0...

0000014f <__c.1658>:
     14f:	0d 0a 27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20     ..'$x=value' to 
     15f:	73 65 74 20 70 61 72 61 6d 65 74 65 72 20 6f 72     set parameter or
     16f:	20 6a 75 73 74 20 27 24 27 20 74 6f 20 64 75 6d      just '$' to dum
     17f:	70 20 63 75 72 72 65 6e 74 20 73 65 74 74 69 6e     p current settin
     18f:	67 73 0d 0a 00                                      gs...

00000194 <__c.1656>:
     194:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     1a4:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     1b4:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     1c4:	2f 6d 69 6e 29 00                                   /min).

000001ca <__c.1654>:
     1ca:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     1da:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 24 39 20     n mm/sec^2)..$9 
     1ea:	3d 20 00                                            = .

000001ed <__c.1652>:
     1ed:	29 0d 0a 24 38 20 3d 20 00                          )..$8 = .

000001f6 <__c.1650>:
     1f6:	20 28 73 74 65 70 20 70 6f 72 74 20 69 6e 76 65      (step port inve
     206:	72 74 20 6d 61 73 6b 2e 20 62 69 6e 61 72 79 20     rt mask. binary 
     216:	3d 20 00                                            = .

00000219 <__c.1648>:
     219:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     229:	29 0d 0a 24 37 20 3d 20 00                          )..$7 = .

00000232 <__c.1646>:
     232:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     242:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 24 36 20      seek rate)..$6 
     252:	3d 20 00                                            = .

00000255 <__c.1644>:
     255:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     265:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 24 35 20      feed rate)..$5 
     275:	3d 20 00                                            = .

00000278 <__c.1642>:
     278:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     288:	74 65 70 20 70 75 6c 73 65 29 0d 0a 24 34 20 3d     tep pulse)..$4 =
     298:	20 00                                                .

0000029a <__c.1640>:
     29a:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 24      (steps/mm z)..$
     2aa:	33 20 3d 20 00                                      3 = .

000002af <__c.1638>:
     2af:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 24      (steps/mm y)..$
     2bf:	32 20 3d 20 00                                      2 = .

000002c4 <__c.1636>:
     2c4:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 24      (steps/mm x)..$
     2d4:	31 20 3d 20 00                                      1 = .

000002d9 <__c.1634>:
     2d9:	24 30 20 3d 20 00                                   $0 = .

000002df <__c.1633>:
     2df:	0d 0a 00                                            ...

000002e2 <__c.1630>:
     2e2:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
     2f2:	72 72 6f 72 0d 0a 00                                rror...

000002f9 <__c.1627>:
     2f9:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
     309:	65 6d 65 6e 74 0d 0a 00                             ement...

00000311 <__c.1624>:
     311:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
     321:	20 6c 65 74 74 65 72 0d 0a 00                        letter...

0000032b <__c.1620>:
     32b:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
     33b:	74 0d 0a 00                                         t...

0000033f <__c.1617>:
     33f:	65 72 72 6f 72 3a 20 00                             error: .

00000347 <__c.1615>:
     347:	6f 6b 0d 0a 00                                      ok...

0000034c <__c.1640>:
     34c:	0d 0a 00                                            ...

0000034f <__c.1638>:
     34f:	0d 0a 47 72 62 6c 20 30 2e 36 62 00                 ..Grbl 0.6b.

0000035b <pstr_inf>:
     35b:	49 4e 46                                            INF

0000035e <pstr_inity>:
     35e:	49 4e 49 54 59                                      INITY

00000363 <pstr_nan>:
     363:	4e 41 4e                                            NAN

00000366 <pwr_m10>:
     366:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     376:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000037e <pwr_p10>:
     37e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     38e:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d8 e0       	ldi	r29, 0x08	; 8
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	ec ee       	ldi	r30, 0xEC	; 236
     3aa:	f3 e4       	ldi	r31, 0x43	; 67
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <.do_copy_data_start>

000003ae <.do_copy_data_loop>:
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0

000003b2 <.do_copy_data_start>:
     3b2:	a2 31       	cpi	r26, 0x12	; 18
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <.do_copy_data_loop>

000003b8 <__do_clear_bss>:
     3b8:	17 e0       	ldi	r17, 0x07	; 7
     3ba:	a2 e1       	ldi	r26, 0x12	; 18
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a1 30       	cpi	r26, 0x01	; 1
     3c4:	b1 07       	cpc	r27, r17
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 de 09 	call	0x13bc	; 0x13bc <main>
     3cc:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <beginSerial>:

uint8_t rx_buffer_head = 0;
uint8_t rx_buffer_tail = 0;

void beginSerial(long baud)
{
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	7b 01       	movw	r14, r22
     3de:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
     3e0:	22 e0       	ldi	r18, 0x02	; 2
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	0e 94 8e 21 	call	0x431c	; 0x431c <__divmodsi4>
     3ec:	20 5c       	subi	r18, 0xC0	; 192
     3ee:	3d 4b       	sbci	r19, 0xBD	; 189
     3f0:	40 4f       	sbci	r20, 0xF0	; 240
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	ca 01       	movw	r24, r20
     3f6:	b9 01       	movw	r22, r18
     3f8:	a8 01       	movw	r20, r16
     3fa:	97 01       	movw	r18, r14
     3fc:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__udivmodsi4>
     400:	c9 01       	movw	r24, r18
     402:	da 01       	movw	r26, r20
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	a1 09       	sbc	r26, r1
     408:	b1 09       	sbc	r27, r1
     40a:	29 2f       	mov	r18, r25
     40c:	3a 2f       	mov	r19, r26
     40e:	4b 2f       	mov	r20, r27
     410:	55 27       	eor	r21, r21
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
     422:	e0 ec       	ldi	r30, 0xC0	; 192
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
     42c:	e1 ec       	ldi	r30, 0xC1	; 193
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	80 61       	ori	r24, 0x10	; 16
     434:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
     436:	80 81       	ld	r24, Z
     438:	88 60       	ori	r24, 0x08	; 8
     43a:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
     43c:	80 81       	ld	r24, Z
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	08 95       	ret

0000044c <serialWrite>:
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     44c:	80 93 c6 00 	sts	0x00C6, r24
}
     450:	08 95       	ret

00000452 <serialAvailable>:

int serialAvailable()
{
     452:	20 91 12 01 	lds	r18, 0x0112
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	20 50       	subi	r18, 0x00	; 0
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	80 91 13 01 	lds	r24, 0x0113
     460:	28 1b       	sub	r18, r24
     462:	31 09       	sbc	r19, r1
     464:	30 70       	andi	r19, 0x00	; 0
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
     466:	c9 01       	movw	r24, r18
     468:	08 95       	ret

0000046a <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
     46a:	90 91 13 01 	lds	r25, 0x0113
     46e:	80 91 12 01 	lds	r24, 0x0112
     472:	89 17       	cp	r24, r25
     474:	19 f4       	brne	.+6      	; 0x47c <serialRead+0x12>
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	3f ef       	ldi	r19, 0xFF	; 255
     47a:	0a c0       	rjmp	.+20     	; 0x490 <serialRead+0x26>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
     47c:	89 2f       	mov	r24, r25
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	fc 01       	movw	r30, r24
     482:	e4 52       	subi	r30, 0x24	; 36
     484:	fa 4f       	sbci	r31, 0xFA	; 250
     486:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	80 93 13 01 	sts	0x0113, r24
		return c;
     48e:	30 e0       	ldi	r19, 0x00	; 0
	}
}
     490:	c9 01       	movw	r24, r18
     492:	08 95       	ret

00000494 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
     494:	80 91 13 01 	lds	r24, 0x0113
     498:	80 93 12 01 	sts	0x0112, r24
}
     49c:	08 95       	ret

0000049e <__vector_18>:

SIGNAL(USART_RX_vect)
{
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
	unsigned char c = UDR0;
     4b6:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
     4ba:	80 91 12 01 	lds	r24, 0x0112
     4be:	e8 2f       	mov	r30, r24
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	31 96       	adiw	r30, 0x01	; 1
     4c4:	9f 01       	movw	r18, r30
     4c6:	30 70       	andi	r19, 0x00	; 0
     4c8:	31 97       	sbiw	r30, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
     4ca:	80 91 13 01 	lds	r24, 0x0113
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	28 17       	cp	r18, r24
     4d2:	39 07       	cpc	r19, r25
     4d4:	29 f0       	breq	.+10     	; 0x4e0 <__vector_18+0x42>
		rx_buffer[rx_buffer_head] = c;
     4d6:	e4 52       	subi	r30, 0x24	; 36
     4d8:	fa 4f       	sbci	r31, 0xFA	; 250
     4da:	40 83       	st	Z, r20
		rx_buffer_head = i;
     4dc:	20 93 12 01 	sts	0x0112, r18
	}
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <printByte>:
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     4f8:	80 93 c6 00 	sts	0x00C6, r24
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
     4fc:	08 95       	ret

000004fe <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
     4fe:	fc 01       	movw	r30, r24
     500:	03 c0       	rjmp	.+6      	; 0x508 <printString+0xa>
	while (*s)
		printByte(*s++);
     502:	31 96       	adiw	r30, 0x01	; 1
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     504:	80 93 c6 00 	sts	0x00C6, r24
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
     508:	80 81       	ld	r24, Z
     50a:	88 23       	and	r24, r24
     50c:	d1 f7       	brne	.-12     	; 0x502 <printString+0x4>
		printByte(*s++);
}
     50e:	08 95       	ret

00000510 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
     510:	02 c0       	rjmp	.+4      	; 0x516 <printPgmString+0x6>
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     512:	20 93 c6 00 	sts	0x00C6, r18
     516:	fc 01       	movw	r30, r24

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	24 91       	lpm	r18, Z+
     51c:	22 23       	and	r18, r18
     51e:	c9 f7       	brne	.-14     	; 0x512 <printPgmString+0x2>
		printByte(c);
}
     520:	08 95       	ret

00000522 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
     522:	2f 92       	push	r2
     524:	3f 92       	push	r3
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	a0 97       	sbiw	r28, 0x20	; 32
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24
     55a:	29 01       	movw	r4, r18
     55c:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
     55e:	61 15       	cp	r22, r1
     560:	71 05       	cpc	r23, r1
     562:	81 05       	cpc	r24, r1
     564:	91 05       	cpc	r25, r1
     566:	21 f4       	brne	.+8      	; 0x570 <printIntegerInBase+0x4e>
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	80 93 c6 00 	sts	0x00C6, r24
     56e:	44 c0       	rjmp	.+136    	; 0x5f8 <printIntegerInBase+0xd6>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
     570:	88 24       	eor	r8, r8
     572:	99 24       	eor	r9, r9
     574:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
     576:	1e 01       	movw	r2, r28
     578:	08 94       	sec
     57a:	21 1c       	adc	r2, r1
     57c:	31 1c       	adc	r3, r1
     57e:	81 01       	movw	r16, r2
     580:	08 0d       	add	r16, r8
     582:	19 1d       	adc	r17, r9
     584:	c7 01       	movw	r24, r14
     586:	b6 01       	movw	r22, r12
     588:	a3 01       	movw	r20, r6
     58a:	92 01       	movw	r18, r4
     58c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__udivmodsi4>
     590:	f8 01       	movw	r30, r16
     592:	60 83       	st	Z, r22
     594:	08 94       	sec
     596:	81 1c       	adc	r8, r1
     598:	91 1c       	adc	r9, r1
     59a:	a1 1c       	adc	r10, r1
     59c:	b1 1c       	adc	r11, r1
		n /= base;
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	a3 01       	movw	r20, r6
     5a4:	92 01       	movw	r18, r4
     5a6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__udivmodsi4>
     5aa:	c9 01       	movw	r24, r18
     5ac:	da 01       	movw	r26, r20
     5ae:	6c 01       	movw	r12, r24
     5b0:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
     5b2:	c1 14       	cp	r12, r1
     5b4:	d1 04       	cpc	r13, r1
     5b6:	e1 04       	cpc	r14, r1
     5b8:	f1 04       	cpc	r15, r1
     5ba:	09 f7       	brne	.-62     	; 0x57e <printIntegerInBase+0x5c>
     5bc:	91 01       	movw	r18, r2
     5be:	28 0d       	add	r18, r8
     5c0:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
     5c2:	ae 01       	movw	r20, r28
     5c4:	4f 5f       	subi	r20, 0xFF	; 255
     5c6:	5f 4f       	sbci	r21, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
     5c8:	d5 01       	movw	r26, r10
     5ca:	c4 01       	movw	r24, r8
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	a1 09       	sbc	r26, r1
     5d0:	b1 09       	sbc	r27, r1
     5d2:	88 19       	sub	r24, r8
     5d4:	99 09       	sbc	r25, r9
     5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <printIntegerInBase+0xd0>
     5d8:	fc 01       	movw	r30, r24
     5da:	e2 0f       	add	r30, r18
     5dc:	f3 1f       	adc	r31, r19
     5de:	e0 81       	ld	r30, Z
     5e0:	ea 30       	cpi	r30, 0x0A	; 10
     5e2:	10 f4       	brcc	.+4      	; 0x5e8 <printIntegerInBase+0xc6>
     5e4:	e0 5d       	subi	r30, 0xD0	; 208
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <printIntegerInBase+0xc8>
     5e8:	e9 5c       	subi	r30, 0xC9	; 201
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     5ea:	e0 93 c6 00 	sts	0x00C6, r30
     5ee:	21 50       	subi	r18, 0x01	; 1
     5f0:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
     5f2:	42 17       	cp	r20, r18
     5f4:	53 07       	cpc	r21, r19
     5f6:	81 f7       	brne	.-32     	; 0x5d8 <printIntegerInBase+0xb6>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
     5f8:	a0 96       	adiw	r28, 0x20	; 32
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	3f 90       	pop	r3
     626:	2f 90       	pop	r2
     628:	08 95       	ret

0000062a <printInteger>:

void printInteger(long n)
{
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
	if (n < 0) {
     62e:	97 ff       	sbrs	r25, 7
     630:	0a c0       	rjmp	.+20     	; 0x646 <printInteger+0x1c>
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     632:	8d e2       	ldi	r24, 0x2D	; 45
     634:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
     638:	50 95       	com	r21
     63a:	40 95       	com	r20
     63c:	30 95       	com	r19
     63e:	21 95       	neg	r18
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	4f 4f       	sbci	r20, 0xFF	; 255
     644:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	0e 94 91 02 	call	0x522	; 0x522 <printIntegerInBase>
}
     656:	08 95       	ret

00000658 <printFloat>:

void printFloat(double n)
{
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	00 d0       	rcall	.+0      	; 0x666 <printFloat+0xe>
     666:	00 d0       	rcall	.+0      	; 0x668 <printFloat+0x10>
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
     66c:	ae 01       	movw	r20, r28
     66e:	4f 5f       	subi	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	0e 94 13 20 	call	0x4026	; 0x4026 <modf>
     676:	7b 01       	movw	r14, r22
     678:	8c 01       	movw	r16, r24
  printInteger(integer_part);
     67a:	69 81       	ldd	r22, Y+1	; 0x01
     67c:	7a 81       	ldd	r23, Y+2	; 0x02
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
     686:	0e 94 15 03 	call	0x62a	; 0x62a <printInteger>
{
// ++++ COMMENTED OUT FOR SIMULATION ONLY
//	while (!(UCSR0A & (1 << UDRE0)))
//		;

	UDR0 = c;
     68a:	8e e2       	ldi	r24, 0x2E	; 46
     68c:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(round(fractional_part*1000));
     690:	c8 01       	movw	r24, r16
     692:	b7 01       	movw	r22, r14
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	4a e7       	ldi	r20, 0x7A	; 122
     69a:	54 e4       	ldi	r21, 0x44	; 68
     69c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     6a0:	0e 94 a9 20 	call	0x4152	; 0x4152 <round>
     6a4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
     6a8:	0e 94 15 03 	call	0x62a	; 0x62a <printInteger>
}
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	cf 91       	pop	r28
     6b6:	df 91       	pop	r29
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	08 95       	ret

000006c2 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6c2:	f9 99       	sbic	0x1f, 1	; 31
     6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     6c6:	92 bd       	out	0x22, r25	; 34
     6c8:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6ce:	80 b5       	in	r24, 0x20	; 32
}
     6d0:	08 95       	ret

000006d2 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     6d2:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6d4:	f9 99       	sbic	0x1f, 1	; 31
     6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6d8:	92 bd       	out	0x22, r25	; 34
     6da:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6e0:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6e2:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6e4:	89 2f       	mov	r24, r25
     6e6:	86 23       	and	r24, r22
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6ea:	6f 3f       	cpi	r22, 0xFF	; 255
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6ee:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6f4:	84 e1       	ldi	r24, 0x14	; 20
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6f8:	99 23       	and	r25, r25
     6fa:	21 f0       	breq	.+8      	; 0x704 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6fc:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6fe:	84 e2       	ldi	r24, 0x24	; 36
     700:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     702:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     704:	78 94       	sei
}
     706:	08 95       	ret

00000708 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	00 d0       	rcall	.+0      	; 0x720 <memcpy_to_eeprom_with_checksum+0x18>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	5c 01       	movw	r10, r24
     726:	6b 01       	movw	r12, r22
     728:	7a 01       	movw	r14, r20
     72a:	4a 01       	movw	r8, r20
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	1e c0       	rjmp	.+60     	; 0x76c <memcpy_to_eeprom_with_checksum+0x64>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     730:	00 23       	and	r16, r16
     732:	19 f0       	breq	.+6      	; 0x73a <memcpy_to_eeprom_with_checksum+0x32>
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	08 c0       	rjmp	.+16     	; 0x74a <memcpy_to_eeprom_with_checksum+0x42>
     73a:	20 2f       	mov	r18, r16
     73c:	33 27       	eor	r19, r19
     73e:	27 fd       	sbrc	r18, 7
     740:	30 95       	com	r19
     742:	22 27       	eor	r18, r18
     744:	33 0f       	add	r19, r19
     746:	22 1f       	adc	r18, r18
     748:	33 27       	eor	r19, r19
    checksum += *source;
     74a:	f6 01       	movw	r30, r12
     74c:	61 91       	ld	r22, Z+
     74e:	6f 01       	movw	r12, r30
     750:	06 2f       	mov	r16, r22
     752:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     754:	9c 01       	movw	r18, r24
     756:	2f 5f       	subi	r18, 0xFF	; 255
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	3a 83       	std	Y+2, r19	; 0x02
     75c:	29 83       	std	Y+1, r18	; 0x01
     75e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     762:	08 94       	sec
     764:	81 08       	sbc	r8, r1
     766:	91 08       	sbc	r9, r1
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	81 14       	cp	r8, r1
     76e:	91 04       	cpc	r9, r1
     770:	f9 f6       	brne	.-66     	; 0x730 <memcpy_to_eeprom_with_checksum+0x28>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     772:	c7 01       	movw	r24, r14
     774:	8a 0d       	add	r24, r10
     776:	9b 1d       	adc	r25, r11
     778:	60 2f       	mov	r22, r16
     77a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <eeprom_put_char>
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	8f 90       	pop	r8
     798:	08 95       	ret

0000079a <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
     7a0:	fb 01       	movw	r30, r22
     7a2:	9a 01       	movw	r18, r20
     7a4:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	19 c0       	rjmp	.+50     	; 0x7dc <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7aa:	f9 99       	sbic	0x1f, 1	; 31
     7ac:	fe cf       	rjmp	.-4      	; 0x7aa <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     7ae:	f2 bd       	out	0x22, r31	; 34
     7b0:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7b2:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     7b4:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     7b6:	99 23       	and	r25, r25
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <memcpy_from_eeprom_with_checksum+0x26>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <memcpy_from_eeprom_with_checksum+0x36>
     7c0:	89 2f       	mov	r24, r25
     7c2:	99 27       	eor	r25, r25
     7c4:	87 fd       	sbrc	r24, 7
     7c6:	90 95       	com	r25
     7c8:	88 27       	eor	r24, r24
     7ca:	99 0f       	add	r25, r25
     7cc:	88 1f       	adc	r24, r24
     7ce:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     7d0:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     7d2:	9a 2f       	mov	r25, r26
     7d4:	98 0f       	add	r25, r24
    *(destination++) = data; 
     7d6:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	30 40       	sbci	r19, 0x00	; 0
     7dc:	21 15       	cp	r18, r1
     7de:	31 05       	cpc	r19, r1
     7e0:	21 f7       	brne	.-56     	; 0x7aa <memcpy_from_eeprom_with_checksum+0x10>
     7e2:	46 0f       	add	r20, r22
     7e4:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7e6:	f9 99       	sbic	0x1f, 1	; 31
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     7ea:	52 bd       	out	0x22, r21	; 34
     7ec:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7f2:	80 b5       	in	r24, 0x20	; 32
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	98 17       	cp	r25, r24
     7fa:	11 f4       	brne	.+4      	; 0x800 <memcpy_from_eeprom_with_checksum+0x66>
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     800:	c9 01       	movw	r24, r18
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     808:	81 e2       	ldi	r24, 0x21	; 33
     80a:	e4 e1       	ldi	r30, 0x14	; 20
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	df 01       	movw	r26, r30
     810:	1d 92       	st	X+, r1
     812:	8a 95       	dec	r24
     814:	e9 f7       	brne	.-6      	; 0x810 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     816:	60 91 ea 06 	lds	r22, 0x06EA
     81a:	70 91 eb 06 	lds	r23, 0x06EB
     81e:	80 91 ec 06 	lds	r24, 0x06EC
     822:	90 91 ed 06 	lds	r25, 0x06ED
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e7       	ldi	r20, 0x70	; 112
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     832:	60 93 1b 01 	sts	0x011B, r22
     836:	70 93 1c 01 	sts	0x011C, r23
     83a:	80 93 1d 01 	sts	0x011D, r24
     83e:	90 93 1e 01 	sts	0x011E, r25
  gc.seek_rate = settings.default_seek_rate/60;
     842:	60 91 ee 06 	lds	r22, 0x06EE
     846:	70 91 ef 06 	lds	r23, 0x06EF
     84a:	80 91 f0 06 	lds	r24, 0x06F0
     84e:	90 91 f1 06 	lds	r25, 0x06F1
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e7       	ldi	r20, 0x70	; 112
     858:	52 e4       	ldi	r21, 0x42	; 66
     85a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     85e:	60 93 1f 01 	sts	0x011F, r22
     862:	70 93 20 01 	sts	0x0120, r23
     866:	80 93 21 01 	sts	0x0121, r24
     86a:	90 93 22 01 	sts	0x0122, r25

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     86e:	10 92 32 01 	sts	0x0132, r1
  gc.plane_axis_1 = axis_1;
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	90 93 33 01 	sts	0x0133, r25
  gc.plane_axis_2 = axis_2;
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	80 93 34 01 	sts	0x0134, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = true;
     87e:	90 93 18 01 	sts	0x0118, r25
}
     882:	08 95       	ret

00000884 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter) {
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
     88e:	8b 01       	movw	r16, r22
     890:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     892:	8c 91       	ld	r24, X
     894:	fa 01       	movw	r30, r20
     896:	e8 0f       	add	r30, r24
     898:	f1 1d       	adc	r31, r1
     89a:	e0 81       	ld	r30, Z
     89c:	ee 23       	and	r30, r30
     89e:	b1 f0       	breq	.+44     	; 0x8cc <next_statement+0x48>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     8a0:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     8a2:	e1 54       	subi	r30, 0x41	; 65
     8a4:	ea 31       	cpi	r30, 0x1A	; 26
     8a6:	10 f0       	brcs	.+4      	; 0x8ac <next_statement+0x28>
    FAIL(STATUS_EXPECTED_COMMAND_LETTER);
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <next_statement+0x44>
    return(0);
  }
  (*char_counter)++;
     8ac:	8c 91       	ld	r24, X
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	8c 93       	st	X, r24
  if (!read_double(line, char_counter, double_ptr)) {
     8b2:	ca 01       	movw	r24, r20
     8b4:	b9 01       	movw	r22, r18
     8b6:	a8 01       	movw	r20, r16
     8b8:	0e 94 40 19 	call	0x3280	; 0x3280 <read_double>
     8bc:	89 2b       	or	r24, r25
     8be:	19 f0       	breq	.+6      	; 0x8c6 <next_statement+0x42>
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <next_statement+0x4c>
    FAIL(STATUS_BAD_NUMBER_FORMAT); 
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 14 01 	sts	0x0114, r24
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
    return(0);
  };
  return(1);
}
     8d0:	c9 01       	movw	r24, r18
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <theta>:

#ifdef __AVR_ATmega328P__        
// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
static double theta(double x, double y)
{
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	79 01       	movw	r14, r18
     8ee:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
     8f0:	5f 77       	andi	r21, 0x7F	; 127
     8f2:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     8f6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <atan>
     8fa:	5b 01       	movw	r10, r22
     8fc:	6c 01       	movw	r12, r24
  if (y>0) {
     8fe:	c8 01       	movw	r24, r16
     900:	b7 01       	movw	r22, r14
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
     90e:	18 16       	cp	r1, r24
     910:	cc f0       	brlt	.+50     	; 0x944 <__stack+0x45>
    return(theta);
  } else {
    if (theta>0) 
     912:	c6 01       	movw	r24, r12
     914:	b5 01       	movw	r22, r10
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	2c f4       	brge	.+10     	; 0x930 <__stack+0x31>
    {
      return(M_PI-theta);
     926:	6b ed       	ldi	r22, 0xDB	; 219
     928:	7f e0       	ldi	r23, 0x0F	; 15
     92a:	89 e4       	ldi	r24, 0x49	; 73
     92c:	90 e4       	ldi	r25, 0x40	; 64
     92e:	04 c0       	rjmp	.+8      	; 0x938 <__stack+0x39>
    } else {
      return(-M_PI-theta);
     930:	6b ed       	ldi	r22, 0xDB	; 219
     932:	7f e0       	ldi	r23, 0x0F	; 15
     934:	89 e4       	ldi	r24, 0x49	; 73
     936:	90 ec       	ldi	r25, 0xC0	; 192
     938:	a6 01       	movw	r20, r12
     93a:	95 01       	movw	r18, r10
     93c:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
     940:	5b 01       	movw	r10, r22
     942:	6c 01       	movw	r12, r24
    }
  }
}
     944:	b5 01       	movw	r22, r10
     946:	c6 01       	movw	r24, r12
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	bf 90       	pop	r11
     956:	af 90       	pop	r10
     958:	08 95       	ret

0000095a <gc_execute_line>:
#endif

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     95a:	2f 92       	push	r2
     95c:	3f 92       	push	r3
     95e:	4f 92       	push	r4
     960:	5f 92       	push	r5
     962:	6f 92       	push	r6
     964:	7f 92       	push	r7
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	ea 97       	sbiw	r28, 0x3a	; 58
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	2c 01       	movw	r4, r24
  uint8_t char_counter = 0;  
     990:	19 82       	std	Y+1, r1	; 0x01
  double target[3], offset[3];  
  
  double p = 0, r = 0;
  int int_value;
  
  clear_vector(target);
     992:	8c e0       	ldi	r24, 0x0C	; 12
     994:	fe 01       	movw	r30, r28
     996:	37 96       	adiw	r30, 0x07	; 7
     998:	df 01       	movw	r26, r30
     99a:	28 2f       	mov	r18, r24
     99c:	1d 92       	st	X+, r1
     99e:	2a 95       	dec	r18
     9a0:	e9 f7       	brne	.-6      	; 0x99c <gc_execute_line+0x42>
  clear_vector(offset);
     9a2:	fe 01       	movw	r30, r28
     9a4:	73 96       	adiw	r30, 0x13	; 19
     9a6:	df 01       	movw	r26, r30
     9a8:	1d 92       	st	X+, r1
     9aa:	8a 95       	dec	r24
     9ac:	e9 f7       	brne	.-6      	; 0x9a8 <gc_execute_line+0x4e>

  gc.status_code = STATUS_OK;
     9ae:	10 92 14 01 	sts	0x0114, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     9b2:	f2 01       	movw	r30, r4
     9b4:	80 81       	ld	r24, Z
     9b6:	88 32       	cpi	r24, 0x28	; 40
     9b8:	11 f4       	brne	.+4      	; 0x9be <gc_execute_line+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	e6 c4       	rjmp	.+2508   	; 0x138a <gc_execute_line+0xa30>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     9be:	8f 32       	cpi	r24, 0x2F	; 47
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <gc_execute_line+0x6a>
     9c2:	f5 c0       	rjmp	.+490    	; 0xbae <gc_execute_line+0x254>
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	f1 c0       	rjmp	.+482    	; 0xbae <gc_execute_line+0x254>
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     9cc:	6b 81       	ldd	r22, Y+3	; 0x03
     9ce:	7c 81       	ldd	r23, Y+4	; 0x04
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	0e 94 14 21 	call	0x4228	; 0x4228 <trunc>
     9d8:	7b 01       	movw	r14, r22
     9da:	8c 01       	movw	r16, r24
     9dc:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    switch(letter) {
     9e0:	4a 81       	ldd	r20, Y+2	; 0x02
     9e2:	4d 34       	cpi	r20, 0x4D	; 77
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <gc_execute_line+0x8e>
     9e6:	ac c0       	rjmp	.+344    	; 0xb40 <gc_execute_line+0x1e6>
     9e8:	44 35       	cpi	r20, 0x54	; 84
     9ea:	09 f4       	brne	.+2      	; 0x9ee <gc_execute_line+0x94>
     9ec:	d5 c0       	rjmp	.+426    	; 0xb98 <gc_execute_line+0x23e>
     9ee:	47 34       	cpi	r20, 0x47	; 71
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <gc_execute_line+0x9a>
     9f2:	d8 c0       	rjmp	.+432    	; 0xba4 <gc_execute_line+0x24a>
      case 'G':
      switch(int_value) {
     9f4:	65 31       	cpi	r22, 0x15	; 21
     9f6:	71 05       	cpc	r23, r1
     9f8:	09 f4       	brne	.+2      	; 0x9fc <gc_execute_line+0xa2>
     9fa:	8a c0       	rjmp	.+276    	; 0xb10 <gc_execute_line+0x1b6>
     9fc:	66 31       	cpi	r22, 0x16	; 22
     9fe:	71 05       	cpc	r23, r1
     a00:	8c f5       	brge	.+98     	; 0xa64 <gc_execute_line+0x10a>
     a02:	64 30       	cpi	r22, 0x04	; 4
     a04:	71 05       	cpc	r23, r1
     a06:	09 f4       	brne	.+2      	; 0xa0a <gc_execute_line+0xb0>
     a08:	5c c0       	rjmp	.+184    	; 0xac2 <gc_execute_line+0x168>
     a0a:	65 30       	cpi	r22, 0x05	; 5
     a0c:	71 05       	cpc	r23, r1
     a0e:	ac f4       	brge	.+42     	; 0xa3a <gc_execute_line+0xe0>
     a10:	61 30       	cpi	r22, 0x01	; 1
     a12:	71 05       	cpc	r23, r1
     a14:	09 f4       	brne	.+2      	; 0xa18 <gc_execute_line+0xbe>
     a16:	5b c0       	rjmp	.+182    	; 0xace <gc_execute_line+0x174>
     a18:	62 30       	cpi	r22, 0x02	; 2
     a1a:	71 05       	cpc	r23, r1
     a1c:	2c f4       	brge	.+10     	; 0xa28 <gc_execute_line+0xce>
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	09 f4       	brne	.+2      	; 0xa26 <gc_execute_line+0xcc>
     a24:	51 c0       	rjmp	.+162    	; 0xac8 <gc_execute_line+0x16e>
     a26:	b5 c0       	rjmp	.+362    	; 0xb92 <gc_execute_line+0x238>
     a28:	62 30       	cpi	r22, 0x02	; 2
     a2a:	71 05       	cpc	r23, r1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <gc_execute_line+0xd6>
     a2e:	52 c0       	rjmp	.+164    	; 0xad4 <gc_execute_line+0x17a>
     a30:	63 30       	cpi	r22, 0x03	; 3
     a32:	71 05       	cpc	r23, r1
     a34:	09 f0       	breq	.+2      	; 0xa38 <gc_execute_line+0xde>
     a36:	ad c0       	rjmp	.+346    	; 0xb92 <gc_execute_line+0x238>
     a38:	50 c0       	rjmp	.+160    	; 0xada <gc_execute_line+0x180>
     a3a:	62 31       	cpi	r22, 0x12	; 18
     a3c:	71 05       	cpc	r23, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <gc_execute_line+0xe8>
     a40:	56 c0       	rjmp	.+172    	; 0xaee <gc_execute_line+0x194>
     a42:	63 31       	cpi	r22, 0x13	; 19
     a44:	71 05       	cpc	r23, r1
     a46:	2c f4       	brge	.+10     	; 0xa52 <gc_execute_line+0xf8>
     a48:	61 31       	cpi	r22, 0x11	; 17
     a4a:	71 05       	cpc	r23, r1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <gc_execute_line+0xf6>
     a4e:	a1 c0       	rjmp	.+322    	; 0xb92 <gc_execute_line+0x238>
     a50:	47 c0       	rjmp	.+142    	; 0xae0 <gc_execute_line+0x186>
     a52:	63 31       	cpi	r22, 0x13	; 19
     a54:	71 05       	cpc	r23, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <gc_execute_line+0x100>
     a58:	51 c0       	rjmp	.+162    	; 0xafc <gc_execute_line+0x1a2>
     a5a:	64 31       	cpi	r22, 0x14	; 20
     a5c:	71 05       	cpc	r23, r1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <gc_execute_line+0x108>
     a60:	98 c0       	rjmp	.+304    	; 0xb92 <gc_execute_line+0x238>
     a62:	53 c0       	rjmp	.+166    	; 0xb0a <gc_execute_line+0x1b0>
     a64:	6a 35       	cpi	r22, 0x5A	; 90
     a66:	71 05       	cpc	r23, r1
     a68:	09 f4       	brne	.+2      	; 0xa6c <gc_execute_line+0x112>
     a6a:	5b c0       	rjmp	.+182    	; 0xb22 <gc_execute_line+0x1c8>
     a6c:	6b 35       	cpi	r22, 0x5B	; 91
     a6e:	71 05       	cpc	r23, r1
     a70:	a4 f4       	brge	.+40     	; 0xa9a <gc_execute_line+0x140>
     a72:	6e 31       	cpi	r22, 0x1E	; 30
     a74:	71 05       	cpc	r23, r1
     a76:	11 f1       	breq	.+68     	; 0xabc <gc_execute_line+0x162>
     a78:	6f 31       	cpi	r22, 0x1F	; 31
     a7a:	71 05       	cpc	r23, r1
     a7c:	2c f4       	brge	.+10     	; 0xa88 <gc_execute_line+0x12e>
     a7e:	6c 31       	cpi	r22, 0x1C	; 28
     a80:	71 05       	cpc	r23, r1
     a82:	09 f0       	breq	.+2      	; 0xa86 <gc_execute_line+0x12c>
     a84:	86 c0       	rjmp	.+268    	; 0xb92 <gc_execute_line+0x238>
     a86:	1a c0       	rjmp	.+52     	; 0xabc <gc_execute_line+0x162>
     a88:	65 33       	cpi	r22, 0x35	; 53
     a8a:	71 05       	cpc	r23, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <gc_execute_line+0x136>
     a8e:	43 c0       	rjmp	.+134    	; 0xb16 <gc_execute_line+0x1bc>
     a90:	60 35       	cpi	r22, 0x50	; 80
     a92:	71 05       	cpc	r23, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <gc_execute_line+0x13e>
     a96:	7d c0       	rjmp	.+250    	; 0xb92 <gc_execute_line+0x238>
     a98:	41 c0       	rjmp	.+130    	; 0xb1c <gc_execute_line+0x1c2>
     a9a:	6c 35       	cpi	r22, 0x5C	; 92
     a9c:	71 05       	cpc	r23, r1
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <gc_execute_line+0x148>
     aa0:	46 c0       	rjmp	.+140    	; 0xb2e <gc_execute_line+0x1d4>
     aa2:	6c 35       	cpi	r22, 0x5C	; 92
     aa4:	71 05       	cpc	r23, r1
     aa6:	0c f4       	brge	.+2      	; 0xaaa <gc_execute_line+0x150>
     aa8:	3f c0       	rjmp	.+126    	; 0xb28 <gc_execute_line+0x1ce>
     aaa:	6d 35       	cpi	r22, 0x5D	; 93
     aac:	71 05       	cpc	r23, r1
     aae:	09 f4       	brne	.+2      	; 0xab2 <gc_execute_line+0x158>
     ab0:	41 c0       	rjmp	.+130    	; 0xb34 <gc_execute_line+0x1da>
     ab2:	6e 35       	cpi	r22, 0x5E	; 94
     ab4:	71 05       	cpc	r23, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <gc_execute_line+0x160>
     ab8:	6c c0       	rjmp	.+216    	; 0xb92 <gc_execute_line+0x238>
     aba:	3f c0       	rjmp	.+126    	; 0xb3a <gc_execute_line+0x1e0>
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	fc a7       	std	Y+44, r31	; 0x2c
     ac0:	71 c0       	rjmp	.+226    	; 0xba4 <gc_execute_line+0x24a>
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	2c a7       	std	Y+44, r18	; 0x2c
     ac6:	6e c0       	rjmp	.+220    	; 0xba4 <gc_execute_line+0x24a>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     ac8:	10 92 15 01 	sts	0x0115, r1
     acc:	6b c0       	rjmp	.+214    	; 0xba4 <gc_execute_line+0x24a>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     ace:	d0 92 15 01 	sts	0x0115, r13
     ad2:	68 c0       	rjmp	.+208    	; 0xba4 <gc_execute_line+0x24a>
#ifdef __AVR_ATmega328P__        
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     ad4:	c0 92 15 01 	sts	0x0115, r12
     ad8:	65 c0       	rjmp	.+202    	; 0xba4 <gc_execute_line+0x24a>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     ada:	b0 92 15 01 	sts	0x0115, r11
     ade:	62 c0       	rjmp	.+196    	; 0xba4 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     ae0:	10 92 32 01 	sts	0x0132, r1
  gc.plane_axis_1 = axis_1;
     ae4:	d0 92 33 01 	sts	0x0133, r13
  gc.plane_axis_2 = axis_2;
     ae8:	c0 92 34 01 	sts	0x0134, r12
     aec:	5b c0       	rjmp	.+182    	; 0xba4 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     aee:	10 92 32 01 	sts	0x0132, r1
  gc.plane_axis_1 = axis_1;
     af2:	c0 92 33 01 	sts	0x0133, r12
  gc.plane_axis_2 = axis_2;
     af6:	d0 92 34 01 	sts	0x0134, r13
     afa:	54 c0       	rjmp	.+168    	; 0xba4 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     afc:	d0 92 32 01 	sts	0x0132, r13
  gc.plane_axis_1 = axis_1;
     b00:	c0 92 33 01 	sts	0x0133, r12
  gc.plane_axis_2 = axis_2;
     b04:	10 92 34 01 	sts	0x0134, r1
     b08:	4d c0       	rjmp	.+154    	; 0xba4 <gc_execute_line+0x24a>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = true; break;
     b0a:	d0 92 17 01 	sts	0x0117, r13
     b0e:	4a c0       	rjmp	.+148    	; 0xba4 <gc_execute_line+0x24a>
        case 21: gc.inches_mode = false; break;
     b10:	10 92 17 01 	sts	0x0117, r1
     b14:	47 c0       	rjmp	.+142    	; 0xba4 <gc_execute_line+0x24a>
     b16:	31 e0       	ldi	r19, 0x01	; 1
     b18:	3d a7       	std	Y+45, r19	; 0x2d
     b1a:	44 c0       	rjmp	.+136    	; 0xba4 <gc_execute_line+0x24a>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = true; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;        
     b1c:	a0 92 15 01 	sts	0x0115, r10
     b20:	41 c0       	rjmp	.+130    	; 0xba4 <gc_execute_line+0x24a>
        case 90: gc.absolute_mode = true; break;
     b22:	d0 92 18 01 	sts	0x0118, r13
     b26:	3e c0       	rjmp	.+124    	; 0xba4 <gc_execute_line+0x24a>
        case 91: gc.absolute_mode = false; break;
     b28:	10 92 18 01 	sts	0x0118, r1
     b2c:	3b c0       	rjmp	.+118    	; 0xba4 <gc_execute_line+0x24a>
     b2e:	63 e0       	ldi	r22, 0x03	; 3
     b30:	6c a7       	std	Y+44, r22	; 0x2c
     b32:	38 c0       	rjmp	.+112    	; 0xba4 <gc_execute_line+0x24a>
        case 92: next_action = NEXT_ACTION_SET_COORDINATE_OFFSET; break;        
        case 93: gc.inverse_feed_rate_mode = true; break;
     b34:	d0 92 16 01 	sts	0x0116, r13
     b38:	35 c0       	rjmp	.+106    	; 0xba4 <gc_execute_line+0x24a>
        case 94: gc.inverse_feed_rate_mode = false; break;
     b3a:	10 92 16 01 	sts	0x0116, r1
     b3e:	32 c0       	rjmp	.+100    	; 0xba4 <gc_execute_line+0x24a>
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     b40:	63 30       	cpi	r22, 0x03	; 3
     b42:	71 05       	cpc	r23, r1
     b44:	e1 f0       	breq	.+56     	; 0xb7e <gc_execute_line+0x224>
     b46:	64 30       	cpi	r22, 0x04	; 4
     b48:	71 05       	cpc	r23, r1
     b4a:	34 f4       	brge	.+12     	; 0xb58 <gc_execute_line+0x1fe>
     b4c:	77 fd       	sbrc	r23, 7
     b4e:	21 c0       	rjmp	.+66     	; 0xb92 <gc_execute_line+0x238>
     b50:	62 30       	cpi	r22, 0x02	; 2
     b52:	71 05       	cpc	r23, r1
     b54:	74 f0       	brlt	.+28     	; 0xb72 <gc_execute_line+0x218>
     b56:	10 c0       	rjmp	.+32     	; 0xb78 <gc_execute_line+0x21e>
     b58:	65 30       	cpi	r22, 0x05	; 5
     b5a:	71 05       	cpc	r23, r1
     b5c:	b9 f0       	breq	.+46     	; 0xb8c <gc_execute_line+0x232>
     b5e:	65 30       	cpi	r22, 0x05	; 5
     b60:	71 05       	cpc	r23, r1
     b62:	84 f0       	brlt	.+32     	; 0xb84 <gc_execute_line+0x22a>
     b64:	6e 31       	cpi	r22, 0x1E	; 30
     b66:	71 05       	cpc	r23, r1
     b68:	39 f0       	breq	.+14     	; 0xb78 <gc_execute_line+0x21e>
     b6a:	6c 33       	cpi	r22, 0x3C	; 60
     b6c:	71 05       	cpc	r23, r1
     b6e:	89 f4       	brne	.+34     	; 0xb92 <gc_execute_line+0x238>
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <gc_execute_line+0x21e>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     b72:	d0 92 19 01 	sts	0x0119, r13
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <gc_execute_line+0x24a>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     b78:	c0 92 19 01 	sts	0x0119, r12
     b7c:	13 c0       	rjmp	.+38     	; 0xba4 <gc_execute_line+0x24a>
        case 3: gc.spindle_direction = 1; break;
     b7e:	d0 92 1a 01 	sts	0x011A, r13
     b82:	10 c0       	rjmp	.+32     	; 0xba4 <gc_execute_line+0x24a>
        case 4: gc.spindle_direction = -1; break;
     b84:	7f ef       	ldi	r23, 0xFF	; 255
     b86:	70 93 1a 01 	sts	0x011A, r23
     b8a:	0c c0       	rjmp	.+24     	; 0xba4 <gc_execute_line+0x24a>
        case 5: gc.spindle_direction = 0; break;
     b8c:	10 92 1a 01 	sts	0x011A, r1
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <gc_execute_line+0x24a>
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
     b92:	b0 92 14 01 	sts	0x0114, r11
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <gc_execute_line+0x24a>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     b98:	c8 01       	movw	r24, r16
     b9a:	b7 01       	movw	r22, r14
     b9c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
     ba0:	60 93 2f 01 	sts	0x012F, r22
    }
    if(gc.status_code) { break; }
     ba4:	80 91 14 01 	lds	r24, 0x0114
     ba8:	88 23       	and	r24, r24
     baa:	c9 f0       	breq	.+50     	; 0xbde <gc_execute_line+0x284>
     bac:	21 c0       	rjmp	.+66     	; 0xbf0 <gc_execute_line+0x296>
     bae:	1d a6       	std	Y+45, r1	; 0x2d
     bb0:	1c a6       	std	Y+44, r1	; 0x2c
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bb2:	12 e0       	ldi	r17, 0x02	; 2
     bb4:	61 2e       	mov	r6, r17
     bb6:	71 2c       	mov	r7, r1
     bb8:	6c 0e       	add	r6, r28
     bba:	7d 1e       	adc	r7, r29
     bbc:	b3 e0       	ldi	r27, 0x03	; 3
     bbe:	2b 2e       	mov	r2, r27
     bc0:	31 2c       	mov	r3, r1
     bc2:	2c 0e       	add	r2, r28
     bc4:	3d 1e       	adc	r3, r29
     bc6:	4e 01       	movw	r8, r28
     bc8:	08 94       	sec
     bca:	81 1c       	adc	r8, r1
     bcc:	91 1c       	adc	r9, r1
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     bce:	dd 24       	eor	r13, r13
     bd0:	d3 94       	inc	r13
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
     bd2:	a3 e0       	ldi	r26, 0x03	; 3
     bd4:	ba 2e       	mov	r11, r26
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     bd6:	f2 e0       	ldi	r31, 0x02	; 2
     bd8:	cf 2e       	mov	r12, r31
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = true; break;
        case 21: gc.inches_mode = false; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = true; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;        
     bda:	e4 e0       	ldi	r30, 0x04	; 4
     bdc:	ae 2e       	mov	r10, r30
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bde:	c3 01       	movw	r24, r6
     be0:	b1 01       	movw	r22, r2
     be2:	a2 01       	movw	r20, r4
     be4:	94 01       	movw	r18, r8
     be6:	0e 94 42 04 	call	0x884	; 0x884 <next_statement>
     bea:	89 2b       	or	r24, r25
     bec:	09 f0       	breq	.+2      	; 0xbf0 <gc_execute_line+0x296>
     bee:	ee ce       	rjmp	.-548    	; 0x9cc <gc_execute_line+0x72>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     bf0:	80 91 14 01 	lds	r24, 0x0114
     bf4:	88 23       	and	r24, r24
     bf6:	09 f0       	breq	.+2      	; 0xbfa <gc_execute_line+0x2a0>
     bf8:	c8 c3       	rjmp	.+1936   	; 0x138a <gc_execute_line+0xa30>

  char_counter = 0;
     bfa:	19 82       	std	Y+1, r1	; 0x01
  clear_vector(offset);
     bfc:	8c e0       	ldi	r24, 0x0C	; 12
     bfe:	fe 01       	movw	r30, r28
     c00:	73 96       	adiw	r30, 0x13	; 19
     c02:	df 01       	movw	r26, r30
     c04:	1d 92       	st	X+, r1
     c06:	8a 95       	dec	r24
     c08:	e9 f7       	brne	.-6      	; 0xc04 <gc_execute_line+0x2aa>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     c0a:	de 01       	movw	r26, r28
     c0c:	17 96       	adiw	r26, 0x07	; 7
     c0e:	e3 e2       	ldi	r30, 0x23	; 35
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	01 90       	ld	r0, Z+
     c16:	0d 92       	st	X+, r0
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <gc_execute_line+0x2ba>
     c1c:	1f aa       	std	Y+55, r1	; 0x37
     c1e:	18 ae       	std	Y+56, r1	; 0x38
     c20:	b0 e8       	ldi	r27, 0x80	; 128
     c22:	b9 af       	std	Y+57, r27	; 0x39
     c24:	ef eb       	ldi	r30, 0xBF	; 191
     c26:	ea af       	std	Y+58, r30	; 0x3a
     c28:	22 24       	eor	r2, r2
     c2a:	33 24       	eor	r3, r3
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	6f 2e       	mov	r6, r31
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	7f 2e       	mov	r7, r31
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8f 2e       	mov	r8, r31
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	9f 2e       	mov	r9, r31
     c3e:	f0 2d       	mov	r31, r0
     c40:	68 a6       	std	Y+40, r6	; 0x28
     c42:	79 a6       	std	Y+41, r7	; 0x29
     c44:	8a a6       	std	Y+42, r8	; 0x2a
     c46:	9b a6       	std	Y+43, r9	; 0x2b

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     c48:	5e 01       	movw	r10, r28
     c4a:	08 94       	sec
     c4c:	a1 1c       	adc	r10, r1
     c4e:	b1 1c       	adc	r11, r1
     c50:	b4 c0       	rjmp	.+360    	; 0xdba <gc_execute_line+0x460>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     c52:	cb 80       	ldd	r12, Y+3	; 0x03
     c54:	dc 80       	ldd	r13, Y+4	; 0x04
     c56:	ed 80       	ldd	r14, Y+5	; 0x05
     c58:	fe 80       	ldd	r15, Y+6	; 0x06
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = true;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     c5a:	80 91 17 01 	lds	r24, 0x0117
     c5e:	88 23       	and	r24, r24
     c60:	19 f4       	brne	.+6      	; 0xc68 <gc_execute_line+0x30e>
     c62:	a7 01       	movw	r20, r14
     c64:	96 01       	movw	r18, r12
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <gc_execute_line+0x322>
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	23 e3       	ldi	r18, 0x33	; 51
     c6e:	33 e3       	ldi	r19, 0x33	; 51
     c70:	4b ec       	ldi	r20, 0xCB	; 203
     c72:	51 e4       	ldi	r21, 0x41	; 65
     c74:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     c7c:	0a 81       	ldd	r16, Y+2	; 0x02
     c7e:	00 35       	cpi	r16, 0x50	; 80
     c80:	09 f4       	brne	.+2      	; 0xc84 <gc_execute_line+0x32a>
     c82:	62 c0       	rjmp	.+196    	; 0xd48 <gc_execute_line+0x3ee>
     c84:	01 35       	cpi	r16, 0x51	; 81
     c86:	58 f4       	brcc	.+22     	; 0xc9e <gc_execute_line+0x344>
     c88:	06 34       	cpi	r16, 0x46	; 70
     c8a:	01 f1       	breq	.+64     	; 0xccc <gc_execute_line+0x372>
     c8c:	06 34       	cpi	r16, 0x46	; 70
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <gc_execute_line+0x338>
     c90:	94 c0       	rjmp	.+296    	; 0xdba <gc_execute_line+0x460>
     c92:	80 2f       	mov	r24, r16
     c94:	89 54       	subi	r24, 0x49	; 73
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	08 f0       	brcs	.+2      	; 0xc9c <gc_execute_line+0x342>
     c9a:	8f c0       	rjmp	.+286    	; 0xdba <gc_execute_line+0x460>
     c9c:	46 c0       	rjmp	.+140    	; 0xd2a <gc_execute_line+0x3d0>
     c9e:	03 35       	cpi	r16, 0x53	; 83
     ca0:	09 f4       	brne	.+2      	; 0xca4 <gc_execute_line+0x34a>
     ca2:	55 c0       	rjmp	.+170    	; 0xd4e <gc_execute_line+0x3f4>
     ca4:	04 35       	cpi	r16, 0x54	; 84
     ca6:	20 f4       	brcc	.+8      	; 0xcb0 <gc_execute_line+0x356>
     ca8:	02 35       	cpi	r16, 0x52	; 82
     caa:	09 f0       	breq	.+2      	; 0xcae <gc_execute_line+0x354>
     cac:	86 c0       	rjmp	.+268    	; 0xdba <gc_execute_line+0x460>
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <gc_execute_line+0x362>
     cb0:	80 2f       	mov	r24, r16
     cb2:	88 55       	subi	r24, 0x58	; 88
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	08 f0       	brcs	.+2      	; 0xcba <gc_execute_line+0x360>
     cb8:	80 c0       	rjmp	.+256    	; 0xdba <gc_execute_line+0x460>
     cba:	52 c0       	rjmp	.+164    	; 0xd60 <gc_execute_line+0x406>
     cbc:	28 a7       	std	Y+40, r18	; 0x28
     cbe:	39 a7       	std	Y+41, r19	; 0x29
     cc0:	4a a7       	std	Y+42, r20	; 0x2a
     cc2:	5b a7       	std	Y+43, r21	; 0x2b
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	27 2e       	mov	r2, r23
     cc8:	31 2c       	mov	r3, r1
     cca:	77 c0       	rjmp	.+238    	; 0xdba <gc_execute_line+0x460>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     ccc:	80 91 16 01 	lds	r24, 0x0116
     cd0:	88 23       	and	r24, r24
     cd2:	29 f0       	breq	.+10     	; 0xcde <gc_execute_line+0x384>
     cd4:	2f ab       	std	Y+55, r18	; 0x37
     cd6:	38 af       	std	Y+56, r19	; 0x38
     cd8:	49 af       	std	Y+57, r20	; 0x39
     cda:	5a af       	std	Y+58, r21	; 0x3a
     cdc:	6e c0       	rjmp	.+220    	; 0xdba <gc_execute_line+0x460>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     cde:	80 91 15 01 	lds	r24, 0x0115
     ce2:	88 23       	and	r24, r24
     ce4:	89 f4       	brne	.+34     	; 0xd08 <gc_execute_line+0x3ae>
          gc.seek_rate = unit_converted_value/60;
     ce6:	ca 01       	movw	r24, r20
     ce8:	b9 01       	movw	r22, r18
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e7       	ldi	r20, 0x70	; 112
     cf0:	52 e4       	ldi	r21, 0x42	; 66
     cf2:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     cf6:	60 93 1f 01 	sts	0x011F, r22
     cfa:	70 93 20 01 	sts	0x0120, r23
     cfe:	80 93 21 01 	sts	0x0121, r24
     d02:	90 93 22 01 	sts	0x0122, r25
     d06:	59 c0       	rjmp	.+178    	; 0xdba <gc_execute_line+0x460>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     d08:	ca 01       	movw	r24, r20
     d0a:	b9 01       	movw	r22, r18
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e7       	ldi	r20, 0x70	; 112
     d12:	52 e4       	ldi	r21, 0x42	; 66
     d14:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     d18:	60 93 1b 01 	sts	0x011B, r22
     d1c:	70 93 1c 01 	sts	0x011C, r23
     d20:	80 93 1d 01 	sts	0x011D, r24
     d24:	90 93 1e 01 	sts	0x011E, r25
     d28:	48 c0       	rjmp	.+144    	; 0xdba <gc_execute_line+0x460>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     d2a:	e0 2f       	mov	r30, r16
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	e9 54       	subi	r30, 0x49	; 73
     d30:	f0 40       	sbci	r31, 0x00	; 0
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	ea 0d       	add	r30, r10
     d3c:	fb 1d       	adc	r31, r11
     d3e:	22 8b       	std	Z+18, r18	; 0x12
     d40:	33 8b       	std	Z+19, r19	; 0x13
     d42:	44 8b       	std	Z+20, r20	; 0x14
     d44:	55 8b       	std	Z+21, r21	; 0x15
     d46:	39 c0       	rjmp	.+114    	; 0xdba <gc_execute_line+0x460>
     d48:	36 01       	movw	r6, r12
     d4a:	47 01       	movw	r8, r14
     d4c:	36 c0       	rjmp	.+108    	; 0xdba <gc_execute_line+0x460>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = true; break;
      case 'S': gc.spindle_speed = value; break;
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
     d56:	70 93 31 01 	sts	0x0131, r23
     d5a:	60 93 30 01 	sts	0x0130, r22
     d5e:	2d c0       	rjmp	.+90     	; 0xdba <gc_execute_line+0x460>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     d60:	80 91 18 01 	lds	r24, 0x0118
     d64:	88 23       	and	r24, r24
     d66:	19 f4       	brne	.+6      	; 0xd6e <gc_execute_line+0x414>
     d68:	fd a5       	ldd	r31, Y+45	; 0x2d
     d6a:	ff 23       	and	r31, r31
     d6c:	79 f0       	breq	.+30     	; 0xd8c <gc_execute_line+0x432>
        target[letter - 'X'] = unit_converted_value;
     d6e:	e0 2f       	mov	r30, r16
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	e8 55       	subi	r30, 0x58	; 88
     d74:	f0 40       	sbci	r31, 0x00	; 0
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ea 0d       	add	r30, r10
     d80:	fb 1d       	adc	r31, r11
     d82:	26 83       	std	Z+6, r18	; 0x06
     d84:	37 83       	std	Z+7, r19	; 0x07
     d86:	40 87       	std	Z+8, r20	; 0x08
     d88:	51 87       	std	Z+9, r21	; 0x09
     d8a:	17 c0       	rjmp	.+46     	; 0xdba <gc_execute_line+0x460>
      } else {
        target[letter - 'X'] += unit_converted_value;
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	08 55       	subi	r16, 0x58	; 88
     d90:	10 40       	sbci	r17, 0x00	; 0
     d92:	00 0f       	add	r16, r16
     d94:	11 1f       	adc	r17, r17
     d96:	00 0f       	add	r16, r16
     d98:	11 1f       	adc	r17, r17
     d9a:	0a 0d       	add	r16, r10
     d9c:	1b 1d       	adc	r17, r11
     d9e:	d8 01       	movw	r26, r16
     da0:	16 96       	adiw	r26, 0x06	; 6
     da2:	6d 91       	ld	r22, X+
     da4:	7d 91       	ld	r23, X+
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	19 97       	sbiw	r26, 0x09	; 9
     dac:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
     db0:	f8 01       	movw	r30, r16
     db2:	66 83       	std	Z+6, r22	; 0x06
     db4:	77 83       	std	Z+7, r23	; 0x07
     db6:	80 87       	std	Z+8, r24	; 0x08
     db8:	91 87       	std	Z+9, r25	; 0x09
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     dba:	ce 01       	movw	r24, r28
     dbc:	02 96       	adiw	r24, 0x02	; 2
     dbe:	be 01       	movw	r22, r28
     dc0:	6d 5f       	subi	r22, 0xFD	; 253
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	a2 01       	movw	r20, r4
     dc6:	95 01       	movw	r18, r10
     dc8:	0e 94 42 04 	call	0x884	; 0x884 <next_statement>
     dcc:	89 2b       	or	r24, r25
     dce:	09 f0       	breq	.+2      	; 0xdd2 <gc_execute_line+0x478>
     dd0:	40 cf       	rjmp	.-384    	; 0xc52 <gc_execute_line+0x2f8>
      break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     dd2:	80 91 14 01 	lds	r24, 0x0114
     dd6:	88 23       	and	r24, r24
     dd8:	09 f0       	breq	.+2      	; 0xddc <gc_execute_line+0x482>
     dda:	d7 c2       	rjmp	.+1454   	; 0x138a <gc_execute_line+0xa30>
    
  // Update spindle state
  spindle_run(gc.spindle_direction, gc.spindle_speed);
     ddc:	80 91 1a 01 	lds	r24, 0x011A
     de0:	40 91 30 01 	lds	r20, 0x0130
     de4:	50 91 31 01 	lds	r21, 0x0131
     de8:	66 27       	eor	r22, r22
     dea:	57 fd       	sbrc	r21, 7
     dec:	60 95       	com	r22
     dee:	76 2f       	mov	r23, r22
     df0:	99 27       	eor	r25, r25
     df2:	87 fd       	sbrc	r24, 7
     df4:	90 95       	com	r25
     df6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <spindle_run>
  
  // Perform any physical actions
  switch (next_action) {
     dfa:	fc a5       	ldd	r31, Y+44	; 0x2c
     dfc:	f1 30       	cpi	r31, 0x01	; 1
     dfe:	91 f0       	breq	.+36     	; 0xe24 <gc_execute_line+0x4ca>
     e00:	f1 30       	cpi	r31, 0x01	; 1
     e02:	60 f1       	brcs	.+88     	; 0xe5c <gc_execute_line+0x502>
     e04:	f2 30       	cpi	r31, 0x02	; 2
     e06:	21 f0       	breq	.+8      	; 0xe10 <gc_execute_line+0x4b6>
     e08:	f3 30       	cpi	r31, 0x03	; 3
     e0a:	09 f0       	breq	.+2      	; 0xe0e <gc_execute_line+0x4b4>
     e0c:	b3 c2       	rjmp	.+1382   	; 0x1374 <gc_execute_line+0xa1a>
     e0e:	17 c0       	rjmp	.+46     	; 0xe3e <gc_execute_line+0x4e4>
    case NEXT_ACTION_GO_HOME: mc_go_home(); clear_vector(gc.position); break;
     e10:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <mc_go_home>
     e14:	8c e0       	ldi	r24, 0x0C	; 12
     e16:	e3 e2       	ldi	r30, 0x23	; 35
     e18:	f1 e0       	ldi	r31, 0x01	; 1
     e1a:	df 01       	movw	r26, r30
     e1c:	1d 92       	st	X+, r1
     e1e:	8a 95       	dec	r24
     e20:	e9 f7       	brne	.-6      	; 0xe1c <gc_execute_line+0x4c2>
     e22:	a8 c2       	rjmp	.+1360   	; 0x1374 <gc_execute_line+0xa1a>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;   
     e24:	c4 01       	movw	r24, r8
     e26:	b3 01       	movw	r22, r6
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4a e7       	ldi	r20, 0x7A	; 122
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     e34:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
     e38:	0e 94 94 0b 	call	0x1728	; 0x1728 <mc_dwell>
     e3c:	9b c2       	rjmp	.+1334   	; 0x1374 <gc_execute_line+0xa1a>
    case NEXT_ACTION_SET_COORDINATE_OFFSET: 
    mc_set_current_position(target[X_AXIS], target[Y_AXIS], target[Z_AXIS]);
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	2b 85       	ldd	r18, Y+11	; 0x0b
     e48:	3c 85       	ldd	r19, Y+12	; 0x0c
     e4a:	4d 85       	ldd	r20, Y+13	; 0x0d
     e4c:	5e 85       	ldd	r21, Y+14	; 0x0e
     e4e:	ef 84       	ldd	r14, Y+15	; 0x0f
     e50:	f8 88       	ldd	r15, Y+16	; 0x10
     e52:	09 89       	ldd	r16, Y+17	; 0x11
     e54:	1a 89       	ldd	r17, Y+18	; 0x12
     e56:	0e 94 48 0c 	call	0x1890	; 0x1890 <plan_set_current_position>
     e5a:	8c c2       	rjmp	.+1304   	; 0x1374 <gc_execute_line+0xa1a>
    break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     e5c:	b0 91 15 01 	lds	r27, 0x0115
     e60:	ba ab       	std	Y+50, r27	; 0x32
     e62:	b1 30       	cpi	r27, 0x01	; 1
     e64:	e9 f0       	breq	.+58     	; 0xea0 <gc_execute_line+0x546>
     e66:	b1 30       	cpi	r27, 0x01	; 1
     e68:	20 f0       	brcs	.+8      	; 0xe72 <gc_execute_line+0x518>
     e6a:	b4 30       	cpi	r27, 0x04	; 4
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <gc_execute_line+0x516>
     e6e:	82 c2       	rjmp	.+1284   	; 0x1374 <gc_execute_line+0xa1a>
     e70:	35 c0       	rjmp	.+106    	; 0xedc <gc_execute_line+0x582>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], gc.seek_rate, false);
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	2b 85       	ldd	r18, Y+11	; 0x0b
     e7c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e7e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e80:	5e 85       	ldd	r21, Y+14	; 0x0e
     e82:	ef 84       	ldd	r14, Y+15	; 0x0f
     e84:	f8 88       	ldd	r15, Y+16	; 0x10
     e86:	09 89       	ldd	r16, Y+17	; 0x11
     e88:	1a 89       	ldd	r17, Y+18	; 0x12
     e8a:	a0 90 1f 01 	lds	r10, 0x011F
     e8e:	b0 90 20 01 	lds	r11, 0x0120
     e92:	c0 90 21 01 	lds	r12, 0x0121
     e96:	d0 90 22 01 	lds	r13, 0x0122
     e9a:	88 24       	eor	r8, r8
     e9c:	99 24       	eor	r9, r9
     e9e:	68 c2       	rjmp	.+1232   	; 0x1370 <gc_execute_line+0xa16>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	2b 85       	ldd	r18, Y+11	; 0x0b
     eaa:	3c 85       	ldd	r19, Y+12	; 0x0c
     eac:	4d 85       	ldd	r20, Y+13	; 0x0d
     eae:	5e 85       	ldd	r21, Y+14	; 0x0e
     eb0:	ef 84       	ldd	r14, Y+15	; 0x0f
     eb2:	f8 88       	ldd	r15, Y+16	; 0x10
     eb4:	09 89       	ldd	r16, Y+17	; 0x11
     eb6:	1a 89       	ldd	r17, Y+18	; 0x12
     eb8:	80 90 16 01 	lds	r8, 0x0116
     ebc:	88 20       	and	r8, r8
     ebe:	09 f0       	breq	.+2      	; 0xec2 <gc_execute_line+0x568>
     ec0:	50 c2       	rjmp	.+1184   	; 0x1362 <gc_execute_line+0xa08>
     ec2:	e0 91 1b 01 	lds	r30, 0x011B
     ec6:	ef ab       	std	Y+55, r30	; 0x37
     ec8:	f0 91 1c 01 	lds	r31, 0x011C
     ecc:	f8 af       	std	Y+56, r31	; 0x38
     ece:	a0 91 1d 01 	lds	r26, 0x011D
     ed2:	a9 af       	std	Y+57, r26	; 0x39
     ed4:	b0 91 1e 01 	lds	r27, 0x011E
     ed8:	ba af       	std	Y+58, r27	; 0x3a
     eda:	43 c2       	rjmp	.+1158   	; 0x1362 <gc_execute_line+0xa08>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
#ifdef __AVR_ATmega328P__
      case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC:
      if (radius_mode) {
     edc:	23 28       	or	r2, r3
     ede:	09 f4       	brne	.+2      	; 0xee2 <gc_execute_line+0x588>
     ee0:	e4 c0       	rjmp	.+456    	; 0x10aa <gc_execute_line+0x750>
          j = (y + (x * h_x2_div_d))/2
          
        */
        
        // Calculate the change in position along each selected axis
        double x = target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
     ee2:	e0 91 32 01 	lds	r30, 0x0132
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	d5 01       	movw	r26, r10
     ef2:	ae 0f       	add	r26, r30
     ef4:	bf 1f       	adc	r27, r31
     ef6:	ec 5e       	subi	r30, 0xEC	; 236
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	16 96       	adiw	r26, 0x06	; 6
     efc:	6d 91       	ld	r22, X+
     efe:	7d 91       	ld	r23, X+
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	19 97       	sbiw	r26, 0x09	; 9
     f06:	27 85       	ldd	r18, Z+15	; 0x0f
     f08:	30 89       	ldd	r19, Z+16	; 0x10
     f0a:	41 89       	ldd	r20, Z+17	; 0x11
     f0c:	52 89       	ldd	r21, Z+18	; 0x12
     f0e:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
     f12:	1b 01       	movw	r2, r22
     f14:	2c 01       	movw	r4, r24
        double y = target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
     f16:	e0 91 33 01 	lds	r30, 0x0133
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	ae 0e       	add	r10, r30
     f26:	bf 1e       	adc	r11, r31
     f28:	ec 5e       	subi	r30, 0xEC	; 236
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	d5 01       	movw	r26, r10
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	6d 91       	ld	r22, X+
     f32:	7d 91       	ld	r23, X+
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	19 97       	sbiw	r26, 0x09	; 9
     f3a:	27 85       	ldd	r18, Z+15	; 0x0f
     f3c:	30 89       	ldd	r19, Z+16	; 0x10
     f3e:	41 89       	ldd	r20, Z+17	; 0x11
     f40:	52 89       	ldd	r21, Z+18	; 0x12
     f42:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
     f46:	3b 01       	movw	r6, r22
     f48:	4c 01       	movw	r8, r24
        
        clear_vector(offset);
     f4a:	8c e0       	ldi	r24, 0x0C	; 12
     f4c:	fe 01       	movw	r30, r28
     f4e:	73 96       	adiw	r30, 0x13	; 19
     f50:	df 01       	movw	r26, r30
     f52:	1d 92       	st	X+, r1
     f54:	8a 95       	dec	r24
     f56:	e9 f7       	brne	.-6      	; 0xf52 <gc_execute_line+0x5f8>
        double h_x2_div_d = -sqrt(4 * r*r - x*x - y*y)/hypot(x,y); // == -(h * 2 / d)
     f58:	68 a5       	ldd	r22, Y+40	; 0x28
     f5a:	79 a5       	ldd	r23, Y+41	; 0x29
     f5c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f5e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	50 e4       	ldi	r21, 0x40	; 64
     f68:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     f6c:	28 a5       	ldd	r18, Y+40	; 0x28
     f6e:	39 a5       	ldd	r19, Y+41	; 0x29
     f70:	4a a5       	ldd	r20, Y+42	; 0x2a
     f72:	5b a5       	ldd	r21, Y+43	; 0x2b
     f74:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     f78:	7b 01       	movw	r14, r22
     f7a:	8c 01       	movw	r16, r24
     f7c:	c2 01       	movw	r24, r4
     f7e:	b1 01       	movw	r22, r2
     f80:	a2 01       	movw	r20, r4
     f82:	91 01       	movw	r18, r2
     f84:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	c8 01       	movw	r24, r16
     f8e:	b7 01       	movw	r22, r14
     f90:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
     f94:	7b 01       	movw	r14, r22
     f96:	8c 01       	movw	r16, r24
     f98:	c4 01       	movw	r24, r8
     f9a:	b3 01       	movw	r22, r6
     f9c:	a4 01       	movw	r20, r8
     f9e:	93 01       	movw	r18, r6
     fa0:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
     fa4:	9b 01       	movw	r18, r22
     fa6:	ac 01       	movw	r20, r24
     fa8:	c8 01       	movw	r24, r16
     faa:	b7 01       	movw	r22, r14
     fac:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
     fb0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sqrt>
     fb4:	7b 01       	movw	r14, r22
     fb6:	8c 01       	movw	r16, r24
     fb8:	c2 01       	movw	r24, r4
     fba:	b1 01       	movw	r22, r2
     fbc:	a4 01       	movw	r20, r8
     fbe:	93 01       	movw	r18, r6
     fc0:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <hypot>
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	17 fb       	bst	r17, 7
     fca:	10 95       	com	r17
     fcc:	17 f9       	bld	r17, 7
     fce:	10 95       	com	r17
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
     fd8:	6b 01       	movw	r12, r22
     fda:	7c 01       	movw	r14, r24
        // If r is smaller than d, the arc is now traversing the complex plane beyond the reach of any
        // real CNC, and thus - for practical reasons - we will terminate promptly:
        if(isnan(h_x2_div_d)) { FAIL(STATUS_FLOATING_POINT_ERROR); return(gc.status_code); }
     fdc:	a7 01       	movw	r20, r14
     fde:	96 01       	movw	r18, r12
     fe0:	0e 94 1b 21 	call	0x4236	; 0x4236 <__unordsf2>
     fe4:	88 23       	and	r24, r24
     fe6:	21 f0       	breq	.+8      	; 0xff0 <gc_execute_line+0x696>
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	80 93 14 01 	sts	0x0114, r24
     fee:	cd c1       	rjmp	.+922    	; 0x138a <gc_execute_line+0xa30>
        // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
        if (gc.motion_mode == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
     ff0:	ba a9       	ldd	r27, Y+50	; 0x32
     ff2:	b3 30       	cpi	r27, 0x03	; 3
     ff4:	21 f4       	brne	.+8      	; 0xffe <gc_execute_line+0x6a4>
     ff6:	f7 fa       	bst	r15, 7
     ff8:	f0 94       	com	r15
     ffa:	f7 f8       	bld	r15, 7
     ffc:	f0 94       	com	r15

        // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go figure!), 
        // even though it is advised against ever generating such circles in a single line of g-code. By 
        // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side of the line of
        // travel and thus we get the unadvisably long arcs as prescribed.
        if (r < 0) { h_x2_div_d = -h_x2_div_d; }        
     ffe:	68 a5       	ldd	r22, Y+40	; 0x28
    1000:	79 a5       	ldd	r23, Y+41	; 0x29
    1002:	8a a5       	ldd	r24, Y+42	; 0x2a
    1004:	9b a5       	ldd	r25, Y+43	; 0x2b
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1012:	88 23       	and	r24, r24
    1014:	24 f4       	brge	.+8      	; 0x101e <gc_execute_line+0x6c4>
    1016:	f7 fa       	bst	r15, 7
    1018:	f0 94       	com	r15
    101a:	f7 f8       	bld	r15, 7
    101c:	f0 94       	com	r15
        // Complete the operation by calculating the actual center of the arc
        offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    101e:	00 91 32 01 	lds	r16, 0x0132
    1022:	a0 2e       	mov	r10, r16
    1024:	bb 24       	eor	r11, r11
    1026:	aa 0c       	add	r10, r10
    1028:	bb 1c       	adc	r11, r11
    102a:	aa 0c       	add	r10, r10
    102c:	bb 1c       	adc	r11, r11
    102e:	8e 01       	movw	r16, r28
    1030:	0f 5f       	subi	r16, 0xFF	; 255
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	a0 0e       	add	r10, r16
    1036:	b1 1e       	adc	r11, r17
    1038:	c4 01       	movw	r24, r8
    103a:	b3 01       	movw	r22, r6
    103c:	a7 01       	movw	r20, r14
    103e:	96 01       	movw	r18, r12
    1040:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c2 01       	movw	r24, r4
    104a:	b1 01       	movw	r22, r2
    104c:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    105c:	f5 01       	movw	r30, r10
    105e:	62 8b       	std	Z+18, r22	; 0x12
    1060:	73 8b       	std	Z+19, r23	; 0x13
    1062:	84 8b       	std	Z+20, r24	; 0x14
    1064:	95 8b       	std	Z+21, r25	; 0x15
        offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    1066:	80 91 33 01 	lds	r24, 0x0133
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	08 0f       	add	r16, r24
    1076:	19 1f       	adc	r17, r25
    1078:	c2 01       	movw	r24, r4
    107a:	b1 01       	movw	r22, r2
    107c:	a7 01       	movw	r20, r14
    107e:	96 01       	movw	r18, r12
    1080:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	c4 01       	movw	r24, r8
    108a:	b3 01       	movw	r22, r6
    108c:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    109c:	d8 01       	movw	r26, r16
    109e:	52 96       	adiw	r26, 0x12	; 18
    10a0:	6d 93       	st	X+, r22
    10a2:	7d 93       	st	X+, r23
    10a4:	8d 93       	st	X+, r24
    10a6:	9c 93       	st	X, r25
    10a8:	55 97       	sbiw	r26, 0x15	; 21
                        C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))

      */
            
      // calculate the theta (angle) of the current point
      double theta_start = theta(-offset[gc.plane_axis_0], -offset[gc.plane_axis_1]);
    10aa:	e0 91 32 01 	lds	r30, 0x0132
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	8e 01       	movw	r16, r28
    10ba:	0f 5f       	subi	r16, 0xFF	; 255
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	e0 0f       	add	r30, r16
    10c0:	f1 1f       	adc	r31, r17
    10c2:	62 89       	ldd	r22, Z+18	; 0x12
    10c4:	73 89       	ldd	r23, Z+19	; 0x13
    10c6:	84 89       	ldd	r24, Z+20	; 0x14
    10c8:	95 89       	ldd	r25, Z+21	; 0x15
    10ca:	90 58       	subi	r25, 0x80	; 128
    10cc:	e0 91 33 01 	lds	r30, 0x0133
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	e0 0f       	add	r30, r16
    10dc:	f1 1f       	adc	r31, r17
    10de:	22 89       	ldd	r18, Z+18	; 0x12
    10e0:	33 89       	ldd	r19, Z+19	; 0x13
    10e2:	44 89       	ldd	r20, Z+20	; 0x14
    10e4:	55 89       	ldd	r21, Z+21	; 0x15
    10e6:	50 58       	subi	r21, 0x80	; 128
    10e8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <theta>
    10ec:	6c a3       	std	Y+36, r22	; 0x24
    10ee:	7d a3       	std	Y+37, r23	; 0x25
    10f0:	8e a3       	std	Y+38, r24	; 0x26
    10f2:	9f a3       	std	Y+39, r25	; 0x27
      // calculate the theta (angle) of the target point
      double theta_end = theta(target[gc.plane_axis_0] - offset[gc.plane_axis_0] - gc.position[gc.plane_axis_0], 
         target[gc.plane_axis_1] - offset[gc.plane_axis_1] - gc.position[gc.plane_axis_1]);
    10f4:	80 91 32 01 	lds	r24, 0x0132
    10f8:	e8 2e       	mov	r14, r24
    10fa:	ff 24       	eor	r15, r15
    10fc:	80 91 33 01 	lds	r24, 0x0133
    1100:	a8 2e       	mov	r10, r24
    1102:	bb 24       	eor	r11, r11
    1104:	ee 0c       	add	r14, r14
    1106:	ff 1c       	adc	r15, r15
    1108:	ee 0c       	add	r14, r14
    110a:	ff 1c       	adc	r15, r15
    110c:	f8 01       	movw	r30, r16
    110e:	ee 0d       	add	r30, r14
    1110:	ff 1d       	adc	r31, r15
    1112:	66 81       	ldd	r22, Z+6	; 0x06
    1114:	77 81       	ldd	r23, Z+7	; 0x07
    1116:	80 85       	ldd	r24, Z+8	; 0x08
    1118:	91 85       	ldd	r25, Z+9	; 0x09
    111a:	22 89       	ldd	r18, Z+18	; 0x12
    111c:	33 89       	ldd	r19, Z+19	; 0x13
    111e:	44 89       	ldd	r20, Z+20	; 0x14
    1120:	55 89       	ldd	r21, Z+21	; 0x15
    1122:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1126:	e4 e1       	ldi	r30, 0x14	; 20
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	ee 0e       	add	r14, r30
    112c:	ff 1e       	adc	r15, r31
    112e:	d7 01       	movw	r26, r14
    1130:	1f 96       	adiw	r26, 0x0f	; 15
    1132:	2d 91       	ld	r18, X+
    1134:	3d 91       	ld	r19, X+
    1136:	4d 91       	ld	r20, X+
    1138:	5c 91       	ld	r21, X
    113a:	52 97       	sbiw	r26, 0x12	; 18
    113c:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1140:	6b 01       	movw	r12, r22
    1142:	7c 01       	movw	r14, r24
    1144:	aa 0c       	add	r10, r10
    1146:	bb 1c       	adc	r11, r11
    1148:	aa 0c       	add	r10, r10
    114a:	bb 1c       	adc	r11, r11
    114c:	0a 0d       	add	r16, r10
    114e:	1b 1d       	adc	r17, r11
    1150:	f8 01       	movw	r30, r16
    1152:	66 81       	ldd	r22, Z+6	; 0x06
    1154:	77 81       	ldd	r23, Z+7	; 0x07
    1156:	80 85       	ldd	r24, Z+8	; 0x08
    1158:	91 85       	ldd	r25, Z+9	; 0x09
    115a:	22 89       	ldd	r18, Z+18	; 0x12
    115c:	33 89       	ldd	r19, Z+19	; 0x13
    115e:	44 89       	ldd	r20, Z+20	; 0x14
    1160:	55 89       	ldd	r21, Z+21	; 0x15
    1162:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1166:	24 e1       	ldi	r18, 0x14	; 20
    1168:	31 e0       	ldi	r19, 0x01	; 1
    116a:	a2 0e       	add	r10, r18
    116c:	b3 1e       	adc	r11, r19
    116e:	d5 01       	movw	r26, r10
    1170:	1f 96       	adiw	r26, 0x0f	; 15
    1172:	2d 91       	ld	r18, X+
    1174:	3d 91       	ld	r19, X+
    1176:	4d 91       	ld	r20, X+
    1178:	5c 91       	ld	r21, X
    117a:	52 97       	sbiw	r26, 0x12	; 18
    117c:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 6e 04 	call	0x8dc	; 0x8dc <theta>
    118c:	7b 01       	movw	r14, r22
    118e:	8c 01       	movw	r16, r24
      // ensure that the difference is positive so that we have clockwise travel
      if (theta_end < theta_start) { theta_end += 2*M_PI; }
    1190:	2c a1       	ldd	r18, Y+36	; 0x24
    1192:	3d a1       	ldd	r19, Y+37	; 0x25
    1194:	4e a1       	ldd	r20, Y+38	; 0x26
    1196:	5f a1       	ldd	r21, Y+39	; 0x27
    1198:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    119c:	88 23       	and	r24, r24
    119e:	54 f4       	brge	.+20     	; 0x11b4 <gc_execute_line+0x85a>
    11a0:	c8 01       	movw	r24, r16
    11a2:	b7 01       	movw	r22, r14
    11a4:	2b ed       	ldi	r18, 0xDB	; 219
    11a6:	3f e0       	ldi	r19, 0x0F	; 15
    11a8:	49 ec       	ldi	r20, 0xC9	; 201
    11aa:	50 e4       	ldi	r21, 0x40	; 64
    11ac:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    11b0:	7b 01       	movw	r14, r22
    11b2:	8c 01       	movw	r16, r24
      double angular_travel = theta_end-theta_start;
    11b4:	c8 01       	movw	r24, r16
    11b6:	b7 01       	movw	r22, r14
    11b8:	2c a1       	ldd	r18, Y+36	; 0x24
    11ba:	3d a1       	ldd	r19, Y+37	; 0x25
    11bc:	4e a1       	ldd	r20, Y+38	; 0x26
    11be:	5f a1       	ldd	r21, Y+39	; 0x27
    11c0:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    11c4:	2b 01       	movw	r4, r22
    11c6:	3c 01       	movw	r6, r24
      // Invert angular motion if the g-code wanted a counterclockwise arc
      if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    11c8:	80 91 15 01 	lds	r24, 0x0115
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	51 f4       	brne	.+20     	; 0x11e4 <gc_execute_line+0x88a>
        angular_travel = angular_travel-2*M_PI;
    11d0:	c3 01       	movw	r24, r6
    11d2:	b2 01       	movw	r22, r4
    11d4:	2b ed       	ldi	r18, 0xDB	; 219
    11d6:	3f e0       	ldi	r19, 0x0F	; 15
    11d8:	49 ec       	ldi	r20, 0xC9	; 201
    11da:	50 e4       	ldi	r21, 0x40	; 64
    11dc:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    11e0:	2b 01       	movw	r4, r22
    11e2:	3c 01       	movw	r6, r24
      }
      // Find the radius
      double radius = hypot(offset[gc.plane_axis_0], offset[gc.plane_axis_1]);
    11e4:	80 91 32 01 	lds	r24, 0x0132
    11e8:	e8 2f       	mov	r30, r24
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	fb a3       	std	Y+35, r31	; 0x23
    11ee:	ea a3       	std	Y+34, r30	; 0x22
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	de 01       	movw	r26, r28
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	ea 0f       	add	r30, r26
    11fe:	fb 1f       	adc	r31, r27
    1200:	e2 88       	ldd	r14, Z+18	; 0x12
    1202:	f3 88       	ldd	r15, Z+19	; 0x13
    1204:	04 89       	ldd	r16, Z+20	; 0x14
    1206:	15 89       	ldd	r17, Z+21	; 0x15
    1208:	80 91 33 01 	lds	r24, 0x0133
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	39 a3       	std	Y+33, r19	; 0x21
    1212:	28 a3       	std	Y+32, r18	; 0x20
    1214:	f9 01       	movw	r30, r18
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ea 0f       	add	r30, r26
    1220:	fb 1f       	adc	r31, r27
    1222:	22 89       	ldd	r18, Z+18	; 0x12
    1224:	33 89       	ldd	r19, Z+19	; 0x13
    1226:	44 89       	ldd	r20, Z+20	; 0x14
    1228:	55 89       	ldd	r21, Z+21	; 0x15
      // Calculate the motion along the depth axis of the helix
      double depth = target[gc.plane_axis_2]-gc.position[gc.plane_axis_2];
    122a:	80 91 34 01 	lds	r24, 0x0134
    122e:	28 2e       	mov	r2, r24
    1230:	33 24       	eor	r3, r3
    1232:	f1 01       	movw	r30, r2
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ae 0f       	add	r26, r30
    123e:	bf 1f       	adc	r27, r31
    1240:	16 96       	adiw	r26, 0x06	; 6
    1242:	6d 91       	ld	r22, X+
    1244:	7d 91       	ld	r23, X+
    1246:	8d 91       	ld	r24, X+
    1248:	9c 91       	ld	r25, X
    124a:	19 97       	sbiw	r26, 0x09	; 9
    124c:	6e a7       	std	Y+46, r22	; 0x2e
    124e:	7f a7       	std	Y+47, r23	; 0x2f
    1250:	88 ab       	std	Y+48, r24	; 0x30
    1252:	99 ab       	std	Y+49, r25	; 0x31
    1254:	ec 5e       	subi	r30, 0xEC	; 236
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	a7 84       	ldd	r10, Z+15	; 0x0f
    125a:	b0 88       	ldd	r11, Z+16	; 0x10
    125c:	c1 88       	ldd	r12, Z+17	; 0x11
    125e:	d2 88       	ldd	r13, Z+18	; 0x12
      // Trace the arc
      mc_arc(theta_start, angular_travel, radius, depth, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2, 
    1260:	70 91 16 01 	lds	r23, 0x0116
    1264:	7f 8f       	std	Y+31, r23	; 0x1f
    1266:	77 23       	and	r23, r23
    1268:	49 f0       	breq	.+18     	; 0x127c <gc_execute_line+0x922>
    126a:	8f a9       	ldd	r24, Y+55	; 0x37
    126c:	8b ab       	std	Y+51, r24	; 0x33
    126e:	98 ad       	ldd	r25, Y+56	; 0x38
    1270:	9c ab       	std	Y+52, r25	; 0x34
    1272:	a9 ad       	ldd	r26, Y+57	; 0x39
    1274:	ad ab       	std	Y+53, r26	; 0x35
    1276:	ba ad       	ldd	r27, Y+58	; 0x3a
    1278:	be ab       	std	Y+54, r27	; 0x36
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <gc_execute_line+0x93a>
    127c:	e0 91 1b 01 	lds	r30, 0x011B
    1280:	eb ab       	std	Y+51, r30	; 0x33
    1282:	f0 91 1c 01 	lds	r31, 0x011C
    1286:	fc ab       	std	Y+52, r31	; 0x34
    1288:	60 91 1d 01 	lds	r22, 0x011D
    128c:	6d ab       	std	Y+53, r22	; 0x35
    128e:	70 91 1e 01 	lds	r23, 0x011E
    1292:	7e ab       	std	Y+54, r23	; 0x36
      // Invert angular motion if the g-code wanted a counterclockwise arc
      if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
        angular_travel = angular_travel-2*M_PI;
      }
      // Find the radius
      double radius = hypot(offset[gc.plane_axis_0], offset[gc.plane_axis_1]);
    1294:	c8 01       	movw	r24, r16
    1296:	b7 01       	movw	r22, r14
    1298:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <hypot>
    129c:	7b 01       	movw	r14, r22
    129e:	8c 01       	movw	r16, r24
      // Calculate the motion along the depth axis of the helix
      double depth = target[gc.plane_axis_2]-gc.position[gc.plane_axis_2];
      // Trace the arc
      mc_arc(theta_start, angular_travel, radius, depth, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2, 
    12a0:	8d b7       	in	r24, 0x3d	; 61
    12a2:	9e b7       	in	r25, 0x3e	; 62
    12a4:	0c 97       	sbiw	r24, 0x0c	; 12
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	9e bf       	out	0x3e, r25	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	8d bf       	out	0x3d, r24	; 61
    12b0:	8d b6       	in	r8, 0x3d	; 61
    12b2:	9e b6       	in	r9, 0x3e	; 62
    12b4:	08 94       	sec
    12b6:	81 1c       	adc	r8, r1
    12b8:	91 1c       	adc	r9, r1
    12ba:	6e a5       	ldd	r22, Y+46	; 0x2e
    12bc:	7f a5       	ldd	r23, Y+47	; 0x2f
    12be:	88 a9       	ldd	r24, Y+48	; 0x30
    12c0:	99 a9       	ldd	r25, Y+49	; 0x31
    12c2:	a6 01       	movw	r20, r12
    12c4:	95 01       	movw	r18, r10
    12c6:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    12ca:	5b 01       	movw	r10, r22
    12cc:	6c 01       	movw	r12, r24
    12ce:	e8 a1       	ldd	r30, Y+32	; 0x20
    12d0:	f9 a1       	ldd	r31, Y+33	; 0x21
    12d2:	d4 01       	movw	r26, r8
    12d4:	11 96       	adiw	r26, 0x01	; 1
    12d6:	fc 93       	st	X, r31
    12d8:	ee 93       	st	-X, r30
    12da:	13 96       	adiw	r26, 0x03	; 3
    12dc:	3c 92       	st	X, r3
    12de:	2e 92       	st	-X, r2
    12e0:	12 97       	sbiw	r26, 0x02	; 2
    12e2:	2b a9       	ldd	r18, Y+51	; 0x33
    12e4:	3c a9       	ldd	r19, Y+52	; 0x34
    12e6:	4d a9       	ldd	r20, Y+53	; 0x35
    12e8:	5e a9       	ldd	r21, Y+54	; 0x36
    12ea:	c9 01       	movw	r24, r18
    12ec:	da 01       	movw	r26, r20
    12ee:	f4 01       	movw	r30, r8
    12f0:	84 83       	std	Z+4, r24	; 0x04
    12f2:	95 83       	std	Z+5, r25	; 0x05
    12f4:	a6 83       	std	Z+6, r26	; 0x06
    12f6:	b7 83       	std	Z+7, r27	; 0x07
    12f8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    12fa:	20 87       	std	Z+8, r18	; 0x08
    12fc:	11 86       	std	Z+9, r1	; 0x09
    12fe:	83 e2       	ldi	r24, 0x23	; 35
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	93 87       	std	Z+11, r25	; 0x0b
    1304:	82 87       	std	Z+10, r24	; 0x0a
    1306:	6c a1       	ldd	r22, Y+36	; 0x24
    1308:	7d a1       	ldd	r23, Y+37	; 0x25
    130a:	8e a1       	ldd	r24, Y+38	; 0x26
    130c:	9f a1       	ldd	r25, Y+39	; 0x27
    130e:	a3 01       	movw	r20, r6
    1310:	92 01       	movw	r18, r4
    1312:	8a a0       	ldd	r8, Y+34	; 0x22
    1314:	9b a0       	ldd	r9, Y+35	; 0x23
    1316:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <mc_arc>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode,
        gc.position);
      // Finish off with a line to make sure we arrive exactly where we think we are
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	2b 85       	ldd	r18, Y+11	; 0x0b
    1324:	3c 85       	ldd	r19, Y+12	; 0x0c
    1326:	4d 85       	ldd	r20, Y+13	; 0x0d
    1328:	5e 85       	ldd	r21, Y+14	; 0x0e
    132a:	ef 84       	ldd	r14, Y+15	; 0x0f
    132c:	f8 88       	ldd	r15, Y+16	; 0x10
    132e:	09 89       	ldd	r16, Y+17	; 0x11
    1330:	1a 89       	ldd	r17, Y+18	; 0x12
    1332:	80 90 16 01 	lds	r8, 0x0116
    1336:	ad b7       	in	r26, 0x3d	; 61
    1338:	be b7       	in	r27, 0x3e	; 62
    133a:	1c 96       	adiw	r26, 0x0c	; 12
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	be bf       	out	0x3e, r27	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	ad bf       	out	0x3d, r26	; 61
    1346:	88 20       	and	r8, r8
    1348:	61 f4       	brne	.+24     	; 0x1362 <gc_execute_line+0xa08>
    134a:	b0 91 1b 01 	lds	r27, 0x011B
    134e:	bf ab       	std	Y+55, r27	; 0x37
    1350:	e0 91 1c 01 	lds	r30, 0x011C
    1354:	e8 af       	std	Y+56, r30	; 0x38
    1356:	f0 91 1d 01 	lds	r31, 0x011D
    135a:	f9 af       	std	Y+57, r31	; 0x39
    135c:	a0 91 1e 01 	lds	r26, 0x011E
    1360:	aa af       	std	Y+58, r26	; 0x3a
    1362:	ef a9       	ldd	r30, Y+55	; 0x37
    1364:	f8 ad       	ldd	r31, Y+56	; 0x38
    1366:	a9 ad       	ldd	r26, Y+57	; 0x39
    1368:	ba ad       	ldd	r27, Y+58	; 0x3a
    136a:	5f 01       	movw	r10, r30
    136c:	6d 01       	movw	r12, r26
    136e:	99 24       	eor	r9, r9
    1370:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <plan_buffer_line>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(double)*3); // gc.position[] = target[];
    1374:	a3 e2       	ldi	r26, 0x23	; 35
    1376:	b1 e0       	ldi	r27, 0x01	; 1
    1378:	fe 01       	movw	r30, r28
    137a:	37 96       	adiw	r30, 0x07	; 7
    137c:	8c e0       	ldi	r24, 0x0C	; 12
    137e:	01 90       	ld	r0, Z+
    1380:	0d 92       	st	X+, r0
    1382:	81 50       	subi	r24, 0x01	; 1
    1384:	e1 f7       	brne	.-8      	; 0x137e <gc_execute_line+0xa24>
  return(gc.status_code);
    1386:	80 91 14 01 	lds	r24, 0x0114
}
    138a:	ea 96       	adiw	r28, 0x3a	; 58
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	8f 90       	pop	r8
    13ae:	7f 90       	pop	r7
    13b0:	6f 90       	pop	r6
    13b2:	5f 90       	pop	r5
    13b4:	4f 90       	pop	r4
    13b6:	3f 90       	pop	r3
    13b8:	2f 90       	pop	r2
    13ba:	08 95       	ret

000013bc <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  protocol_init();        
    13bc:	0e 94 31 19 	call	0x3262	; 0x3262 <protocol_init>
  settings_init();  
    13c0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <settings_init>
  plan_init();      
    13c4:	0e 94 09 13 	call	0x2612	; 0x2612 <plan_init>
  st_init();        
    13c8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <st_init>
  spindle_init();   
    13cc:	0e 94 90 15 	call	0x2b20	; 0x2b20 <spindle_init>
  gc_init();
    13d0:	0e 94 04 04 	call	0x808	; 0x808 <gc_init>
  limits_init();  
    13d4:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <limits_init>

  protocol_test();	// inject test block(s) before starting system
    13d8:	0e 94 28 19 	call	0x3250	; 0x3250 <protocol_test>
                    
  for(;;){
    sleep_mode(); // Wait for it ...
    13dc:	83 b7       	in	r24, 0x33	; 51
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	83 bf       	out	0x33, r24	; 51
    13e2:	88 95       	sleep
    13e4:	83 b7       	in	r24, 0x33	; 51
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	83 bf       	out	0x33, r24	; 51
    protocol_process(); // ... process the serial protocol
    13ea:	0e 94 c6 18 	call	0x318c	; 0x318c <protocol_process>
    13ee:	f6 cf       	rjmp	.-20     	; 0x13dc <main+0x20>

000013f0 <mc_go_home>:
}
#endif

void mc_go_home()
{
  st_go_home();
    13f0:	0e 94 67 16 	call	0x2cce	; 0x2cce <st_go_home>
}
    13f4:	08 95       	ret

000013f6 <mc_arc>:
#ifdef __AVR_ATmega328P__
// The arc is approximated by generating a huge number of tiny, linear segments. The length of each 
// segment is configured in settings.mm_per_arc_segment.  
void mc_arc(double theta, double angular_travel, double radius, double linear_travel, int axis_1, int axis_2, 
  int axis_linear, double feed_rate, int invert_feed_rate, double *position)
{      
    13f6:	2f 92       	push	r2
    13f8:	3f 92       	push	r3
    13fa:	4f 92       	push	r4
    13fc:	5f 92       	push	r5
    13fe:	6f 92       	push	r6
    1400:	7f 92       	push	r7
    1402:	8f 92       	push	r8
    1404:	9f 92       	push	r9
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	ae 97       	sbiw	r28, 0x2e	; 46
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	2b 01       	movw	r4, r22
    142c:	3c 01       	movw	r6, r24
    142e:	29 a3       	std	Y+33, r18	; 0x21
    1430:	3a a3       	std	Y+34, r19	; 0x22
    1432:	4b a3       	std	Y+35, r20	; 0x23
    1434:	5c a3       	std	Y+36, r21	; 0x24
    1436:	ed a2       	std	Y+37, r14	; 0x25
    1438:	fe a2       	std	Y+38, r15	; 0x26
    143a:	0f a3       	std	Y+39, r16	; 0x27
    143c:	18 a7       	std	Y+40, r17	; 0x28
    143e:	2f 96       	adiw	r28, 0x0f	; 15
    1440:	2e ac       	ldd	r2, Y+62	; 0x3e
    1442:	3f ac       	ldd	r3, Y+63	; 0x3f
    1444:	2f 97       	sbiw	r28, 0x0f	; 15
  int acceleration_manager_was_enabled = plan_is_acceleration_manager_enabled();
    1446:	0e 94 22 0c 	call	0x1844	; 0x1844 <plan_is_acceleration_manager_enabled>
    144a:	98 a3       	std	Y+32, r25	; 0x20
    144c:	8f 8f       	std	Y+31, r24	; 0x1f
  plan_set_acceleration_manager_enabled(false); // disable acceleration management for the duration of the arc
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 ef 12 	call	0x25de	; 0x25de <plan_set_acceleration_manager_enabled>
  double millimeters_of_travel = hypot(angular_travel*radius, labs(linear_travel));
    1456:	69 a1       	ldd	r22, Y+33	; 0x21
    1458:	7a a1       	ldd	r23, Y+34	; 0x22
    145a:	8b a1       	ldd	r24, Y+35	; 0x23
    145c:	9c a1       	ldd	r25, Y+36	; 0x24
    145e:	2d a1       	ldd	r18, Y+37	; 0x25
    1460:	3e a1       	ldd	r19, Y+38	; 0x26
    1462:	4f a1       	ldd	r20, Y+39	; 0x27
    1464:	58 a5       	ldd	r21, Y+40	; 0x28
    1466:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    146a:	7b 01       	movw	r14, r22
    146c:	8c 01       	movw	r16, r24
    146e:	c6 01       	movw	r24, r12
    1470:	b5 01       	movw	r22, r10
    1472:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    1476:	97 ff       	sbrs	r25, 7
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <mc_arc+0x92>
    147a:	90 95       	com	r25
    147c:	80 95       	com	r24
    147e:	70 95       	com	r23
    1480:	61 95       	neg	r22
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	c8 01       	movw	r24, r16
    1492:	b7 01       	movw	r22, r14
    1494:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <hypot>
    1498:	7b 01       	movw	r14, r22
    149a:	8c 01       	movw	r16, r24
  if (millimeters_of_travel == 0.0) { return; }
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <mc_arc+0xb8>
    14ac:	24 c1       	rjmp	.+584    	; 0x16f6 <mc_arc+0x300>
  uint16_t segments = round(millimeters_of_travel/settings.mm_per_arc_segment);
    14ae:	c8 01       	movw	r24, r16
    14b0:	b7 01       	movw	r22, r14
    14b2:	20 91 f3 06 	lds	r18, 0x06F3
    14b6:	30 91 f4 06 	lds	r19, 0x06F4
    14ba:	40 91 f5 06 	lds	r20, 0x06F5
    14be:	50 91 f6 06 	lds	r21, 0x06F6
    14c2:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    14c6:	0e 94 a9 20 	call	0x4152	; 0x4152 <round>
    14ca:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    14ce:	7e 8f       	std	Y+30, r23	; 0x1e
    14d0:	6d 8f       	std	Y+29, r22	; 0x1d
  // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
  // by a number of discrete segments. The inverse feed_rate should be correct for the sum of 
  // all segments.
  if (invert_feed_rate) { feed_rate *= segments; }
    14d2:	2d 96       	adiw	r28, 0x0d	; 13
    14d4:	2e ad       	ldd	r18, Y+62	; 0x3e
    14d6:	3f ad       	ldd	r19, Y+63	; 0x3f
    14d8:	2d 97       	sbiw	r28, 0x0d	; 13
    14da:	23 2b       	or	r18, r19
    14dc:	a1 f0       	breq	.+40     	; 0x1506 <mc_arc+0x110>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	2b 96       	adiw	r28, 0x0b	; 11
    14ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    14ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    14f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14f4:	2b 97       	sbiw	r28, 0x0b	; 11
    14f6:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    14fa:	2b 96       	adiw	r28, 0x0b	; 11
    14fc:	6c af       	std	Y+60, r22	; 0x3c
    14fe:	7d af       	std	Y+61, r23	; 0x3d
    1500:	8e af       	std	Y+62, r24	; 0x3e
    1502:	9f af       	std	Y+63, r25	; 0x3f
    1504:	2b 97       	sbiw	r28, 0x0b	; 11
  // The angular motion for each segment
  double theta_per_segment = angular_travel/segments;
    1506:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1508:	fe 8d       	ldd	r31, Y+30	; 0x1e
    150a:	bf 01       	movw	r22, r30
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    1514:	7b 01       	movw	r14, r22
    1516:	8c 01       	movw	r16, r24
    1518:	69 a1       	ldd	r22, Y+33	; 0x21
    151a:	7a a1       	ldd	r23, Y+34	; 0x22
    151c:	8b a1       	ldd	r24, Y+35	; 0x23
    151e:	9c a1       	ldd	r25, Y+36	; 0x24
    1520:	a8 01       	movw	r20, r16
    1522:	97 01       	movw	r18, r14
    1524:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1528:	69 8f       	std	Y+25, r22	; 0x19
    152a:	7a 8f       	std	Y+26, r23	; 0x1a
    152c:	8b 8f       	std	Y+27, r24	; 0x1b
    152e:	9c 8f       	std	Y+28, r25	; 0x1c
  // The linear motion for each segment
  double linear_per_segment = linear_travel/segments;
    1530:	c6 01       	movw	r24, r12
    1532:	b5 01       	movw	r22, r10
    1534:	a8 01       	movw	r20, r16
    1536:	97 01       	movw	r18, r14
    1538:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    153c:	6d 8b       	std	Y+21, r22	; 0x15
    153e:	7e 8b       	std	Y+22, r23	; 0x16
    1540:	8f 8b       	std	Y+23, r24	; 0x17
    1542:	98 8f       	std	Y+24, r25	; 0x18
  // Compute the center of this circle
  double center_x = position[axis_1]-sin(theta)*radius;
    1544:	c3 01       	movw	r24, r6
    1546:	b2 01       	movw	r22, r4
    1548:	0e 94 c9 20 	call	0x4192	; 0x4192 <sin>
    154c:	64 01       	movw	r12, r8
    154e:	cc 0c       	add	r12, r12
    1550:	dd 1c       	adc	r13, r13
    1552:	cc 0c       	add	r12, r12
    1554:	dd 1c       	adc	r13, r13
    1556:	81 01       	movw	r16, r2
    1558:	0c 0d       	add	r16, r12
    155a:	1d 1d       	adc	r17, r13
    155c:	2d a1       	ldd	r18, Y+37	; 0x25
    155e:	3e a1       	ldd	r19, Y+38	; 0x26
    1560:	4f a1       	ldd	r20, Y+39	; 0x27
    1562:	58 a5       	ldd	r21, Y+40	; 0x28
    1564:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	d8 01       	movw	r26, r16
    156e:	6d 91       	ld	r22, X+
    1570:	7d 91       	ld	r23, X+
    1572:	8d 91       	ld	r24, X+
    1574:	9c 91       	ld	r25, X
    1576:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    157a:	69 8b       	std	Y+17, r22	; 0x11
    157c:	7a 8b       	std	Y+18, r23	; 0x12
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	9c 8b       	std	Y+20, r25	; 0x14
  double center_y = position[axis_2]-cos(theta)*radius;
    1582:	c3 01       	movw	r24, r6
    1584:	b2 01       	movw	r22, r4
    1586:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <cos>
    158a:	25 96       	adiw	r28, 0x05	; 5
    158c:	0e ad       	ldd	r16, Y+62	; 0x3e
    158e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1590:	25 97       	sbiw	r28, 0x05	; 5
    1592:	00 0f       	add	r16, r16
    1594:	11 1f       	adc	r17, r17
    1596:	00 0f       	add	r16, r16
    1598:	11 1f       	adc	r17, r17
    159a:	71 01       	movw	r14, r2
    159c:	e0 0e       	add	r14, r16
    159e:	f1 1e       	adc	r15, r17
    15a0:	2d a1       	ldd	r18, Y+37	; 0x25
    15a2:	3e a1       	ldd	r19, Y+38	; 0x26
    15a4:	4f a1       	ldd	r20, Y+39	; 0x27
    15a6:	58 a5       	ldd	r21, Y+40	; 0x28
    15a8:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    15ac:	9b 01       	movw	r18, r22
    15ae:	ac 01       	movw	r20, r24
    15b0:	f7 01       	movw	r30, r14
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    15be:	6d 87       	std	Y+13, r22	; 0x0d
    15c0:	7e 87       	std	Y+14, r23	; 0x0e
    15c2:	8f 87       	std	Y+15, r24	; 0x0f
    15c4:	98 8b       	std	Y+16, r25	; 0x10
  // a vector to track the end point of each segment
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
    15c6:	27 96       	adiw	r28, 0x07	; 7
    15c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    15cc:	27 97       	sbiw	r28, 0x07	; 7
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	9e 01       	movw	r18, r28
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	f9 01       	movw	r30, r18
    15de:	e8 0f       	add	r30, r24
    15e0:	f9 1f       	adc	r31, r25
    15e2:	28 0e       	add	r2, r24
    15e4:	39 1e       	adc	r3, r25
    15e6:	d1 01       	movw	r26, r2
    15e8:	4d 91       	ld	r20, X+
    15ea:	5d 91       	ld	r21, X+
    15ec:	6d 91       	ld	r22, X+
    15ee:	7c 91       	ld	r23, X
    15f0:	40 83       	st	Z, r20
    15f2:	51 83       	std	Z+1, r21	; 0x01
    15f4:	62 83       	std	Z+2, r22	; 0x02
    15f6:	73 83       	std	Z+3, r23	; 0x03
    15f8:	22 24       	eor	r2, r2
    15fa:	33 24       	eor	r3, r3
  for (i=0; i<segments; i++) {
    target[axis_linear] += linear_per_segment;
    15fc:	fa a7       	std	Y+42, r31	; 0x2a
    15fe:	e9 a7       	std	Y+41, r30	; 0x29
    theta += theta_per_segment;
    target[axis_1] = center_x+sin(theta)*radius;
    1600:	f9 01       	movw	r30, r18
    1602:	ec 0d       	add	r30, r12
    1604:	fd 1d       	adc	r31, r13
    1606:	fc a7       	std	Y+44, r31	; 0x2c
    1608:	eb a7       	std	Y+43, r30	; 0x2b
    target[axis_2] = center_y+cos(theta)*radius;
    160a:	c9 01       	movw	r24, r18
    160c:	80 0f       	add	r24, r16
    160e:	91 1f       	adc	r25, r17
    1610:	9e a7       	std	Y+46, r25	; 0x2e
    1612:	8d a7       	std	Y+45, r24	; 0x2d
    1614:	66 c0       	rjmp	.+204    	; 0x16e2 <mc_arc+0x2ec>
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
  for (i=0; i<segments; i++) {
    target[axis_linear] += linear_per_segment;
    1616:	a9 a5       	ldd	r26, Y+41	; 0x29
    1618:	ba a5       	ldd	r27, Y+42	; 0x2a
    161a:	6d 91       	ld	r22, X+
    161c:	7d 91       	ld	r23, X+
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	2d 89       	ldd	r18, Y+21	; 0x15
    1624:	3e 89       	ldd	r19, Y+22	; 0x16
    1626:	4f 89       	ldd	r20, Y+23	; 0x17
    1628:	58 8d       	ldd	r21, Y+24	; 0x18
    162a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    162e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1630:	fa a5       	ldd	r31, Y+42	; 0x2a
    1632:	60 83       	st	Z, r22
    1634:	71 83       	std	Z+1, r23	; 0x01
    1636:	82 83       	std	Z+2, r24	; 0x02
    1638:	93 83       	std	Z+3, r25	; 0x03
    theta += theta_per_segment;
    163a:	c3 01       	movw	r24, r6
    163c:	b2 01       	movw	r22, r4
    163e:	29 8d       	ldd	r18, Y+25	; 0x19
    1640:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1642:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1644:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1646:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    164a:	2b 01       	movw	r4, r22
    164c:	3c 01       	movw	r6, r24
    target[axis_1] = center_x+sin(theta)*radius;
    164e:	0e 94 c9 20 	call	0x4192	; 0x4192 <sin>
    1652:	2d a1       	ldd	r18, Y+37	; 0x25
    1654:	3e a1       	ldd	r19, Y+38	; 0x26
    1656:	4f a1       	ldd	r20, Y+39	; 0x27
    1658:	58 a5       	ldd	r21, Y+40	; 0x28
    165a:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    165e:	9b 01       	movw	r18, r22
    1660:	ac 01       	movw	r20, r24
    1662:	69 89       	ldd	r22, Y+17	; 0x11
    1664:	7a 89       	ldd	r23, Y+18	; 0x12
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    166e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1670:	bc a5       	ldd	r27, Y+44	; 0x2c
    1672:	6d 93       	st	X+, r22
    1674:	7d 93       	st	X+, r23
    1676:	8d 93       	st	X+, r24
    1678:	9c 93       	st	X, r25
    167a:	13 97       	sbiw	r26, 0x03	; 3
    target[axis_2] = center_y+cos(theta)*radius;
    167c:	c3 01       	movw	r24, r6
    167e:	b2 01       	movw	r22, r4
    1680:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <cos>
    1684:	2d a1       	ldd	r18, Y+37	; 0x25
    1686:	3e a1       	ldd	r19, Y+38	; 0x26
    1688:	4f a1       	ldd	r20, Y+39	; 0x27
    168a:	58 a5       	ldd	r21, Y+40	; 0x28
    168c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	6d 85       	ldd	r22, Y+13	; 0x0d
    1696:	7e 85       	ldd	r23, Y+14	; 0x0e
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	98 89       	ldd	r25, Y+16	; 0x10
    169c:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    16a0:	ed a5       	ldd	r30, Y+45	; 0x2d
    16a2:	fe a5       	ldd	r31, Y+46	; 0x2e
    16a4:	60 83       	st	Z, r22
    16a6:	71 83       	std	Z+1, r23	; 0x01
    16a8:	82 83       	std	Z+2, r24	; 0x02
    16aa:	93 83       	std	Z+3, r25	; 0x03
    plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], feed_rate, invert_feed_rate);
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	7a 81       	ldd	r23, Y+2	; 0x02
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	2d 81       	ldd	r18, Y+5	; 0x05
    16b6:	3e 81       	ldd	r19, Y+6	; 0x06
    16b8:	4f 81       	ldd	r20, Y+7	; 0x07
    16ba:	58 85       	ldd	r21, Y+8	; 0x08
    16bc:	e9 84       	ldd	r14, Y+9	; 0x09
    16be:	fa 84       	ldd	r15, Y+10	; 0x0a
    16c0:	0b 85       	ldd	r16, Y+11	; 0x0b
    16c2:	1c 85       	ldd	r17, Y+12	; 0x0c
    16c4:	2b 96       	adiw	r28, 0x0b	; 11
    16c6:	ac ac       	ldd	r10, Y+60	; 0x3c
    16c8:	bd ac       	ldd	r11, Y+61	; 0x3d
    16ca:	ce ac       	ldd	r12, Y+62	; 0x3e
    16cc:	df ac       	ldd	r13, Y+63	; 0x3f
    16ce:	2b 97       	sbiw	r28, 0x0b	; 11
    16d0:	2d 96       	adiw	r28, 0x0d	; 13
    16d2:	8e ac       	ldd	r8, Y+62	; 0x3e
    16d4:	9f ac       	ldd	r9, Y+63	; 0x3f
    16d6:	2d 97       	sbiw	r28, 0x0d	; 13
    16d8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <plan_buffer_line>
  // a vector to track the end point of each segment
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
  for (i=0; i<segments; i++) {
    16dc:	08 94       	sec
    16de:	21 1c       	adc	r2, r1
    16e0:	31 1c       	adc	r3, r1
    16e2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16e4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16e6:	22 16       	cp	r2, r18
    16e8:	33 06       	cpc	r3, r19
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <mc_arc+0x2f8>
    16ec:	94 cf       	rjmp	.-216    	; 0x1616 <mc_arc+0x220>
    theta += theta_per_segment;
    target[axis_1] = center_x+sin(theta)*radius;
    target[axis_2] = center_y+cos(theta)*radius;
    plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], feed_rate, invert_feed_rate);
  }
  plan_set_acceleration_manager_enabled(acceleration_manager_was_enabled);
    16ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f0:	98 a1       	ldd	r25, Y+32	; 0x20
    16f2:	0e 94 ef 12 	call	0x25de	; 0x25de <plan_set_acceleration_manager_enabled>
}
    16f6:	ae 96       	adiw	r28, 0x2e	; 46
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	7f 90       	pop	r7
    171c:	6f 90       	pop	r6
    171e:	5f 90       	pop	r5
    1720:	4f 90       	pop	r4
    1722:	3f 90       	pop	r3
    1724:	2f 90       	pop	r2
    1726:	08 95       	ret

00001728 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	7b 01       	movw	r14, r22
    173a:	8c 01       	movw	r16, r24
  st_synchronize();
    173c:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <st_synchronize>
  _delay_ms(milliseconds);
    1740:	c8 01       	movw	r24, r16
    1742:	b7 01       	movw	r22, r14
    1744:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    1748:	5b 01       	movw	r10, r22
    174a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a e7       	ldi	r20, 0x7A	; 122
    1752:	55 e4       	ldi	r21, 0x45	; 69
    1754:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1758:	7b 01       	movw	r14, r22
    175a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1768:	88 23       	and	r24, r24
    176a:	1c f4       	brge	.+6      	; 0x1772 <mc_dwell+0x4a>
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	24 c0       	rjmp	.+72     	; 0x17ba <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    1772:	c8 01       	movw	r24, r16
    1774:	b7 01       	movw	r22, r14
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    1782:	18 16       	cp	r1, r24
    1784:	b4 f4       	brge	.+44     	; 0x17b2 <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	c6 01       	movw	r24, r12
    1788:	b5 01       	movw	r22, r10
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1796:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179a:	80 e9       	ldi	r24, 0x90	; 144
    179c:	91 e0       	ldi	r25, 0x01	; 1
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <mc_dwell+0x82>
    17a0:	fc 01       	movw	r30, r24
    17a2:	31 97       	sbiw	r30, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	61 50       	subi	r22, 0x01	; 1
    17a8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	61 15       	cp	r22, r1
    17ac:	71 05       	cpc	r23, r1
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <mc_dwell+0x78>
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	c8 01       	movw	r24, r16
    17b4:	b7 01       	movw	r22, r14
    17b6:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    17ba:	cb 01       	movw	r24, r22
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <mc_dwell+0x94>
}
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	08 95       	ret

000017d2 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
static double factor_for_safe_speed(block_t *block) {
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
  if(settings.max_jerk < block->nominal_speed) {
    17e2:	a0 90 fb 06 	lds	r10, 0x06FB
    17e6:	b0 90 fc 06 	lds	r11, 0x06FC
    17ea:	c0 90 fd 06 	lds	r12, 0x06FD
    17ee:	d0 90 fe 06 	lds	r13, 0x06FE
    17f2:	fc 01       	movw	r30, r24
    17f4:	e1 a0       	ldd	r14, Z+33	; 0x21
    17f6:	f2 a0       	ldd	r15, Z+34	; 0x22
    17f8:	03 a1       	ldd	r16, Z+35	; 0x23
    17fa:	14 a1       	ldd	r17, Z+36	; 0x24
    17fc:	c6 01       	movw	r24, r12
    17fe:	b5 01       	movw	r22, r10
    1800:	a8 01       	movw	r20, r16
    1802:	97 01       	movw	r18, r14
    1804:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1808:	87 fd       	sbrc	r24, 7
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <factor_for_safe_speed+0x44>
    180c:	e0 e0       	ldi	r30, 0x00	; 0
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	80 e8       	ldi	r24, 0x80	; 128
    1812:	6f e3       	ldi	r22, 0x3F	; 63
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <factor_for_safe_speed+0x54>
    return(settings.max_jerk/block->nominal_speed);  
    1816:	c6 01       	movw	r24, r12
    1818:	b5 01       	movw	r22, r10
    181a:	a8 01       	movw	r20, r16
    181c:	97 01       	movw	r18, r14
    181e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1822:	e6 2f       	mov	r30, r22
    1824:	69 2f       	mov	r22, r25
  } else {
    return(1.0);
  }
}
    1826:	2e 2f       	mov	r18, r30
    1828:	37 2f       	mov	r19, r23
    182a:	48 2f       	mov	r20, r24
    182c:	56 2f       	mov	r21, r22
    182e:	b9 01       	movw	r22, r18
    1830:	ca 01       	movw	r24, r20
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	bf 90       	pop	r11
    1840:	af 90       	pop	r10
    1842:	08 95       	ret

00001844 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1844:	80 91 53 05 	lds	r24, 0x0553
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	08 95       	ret

0000184c <plan_discard_current_block>:

void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    184c:	90 91 45 05 	lds	r25, 0x0545
    1850:	80 91 46 05 	lds	r24, 0x0546
    1854:	98 17       	cp	r25, r24
    1856:	41 f0       	breq	.+16     	; 0x1868 <plan_discard_current_block+0x1c>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1858:	80 91 46 05 	lds	r24, 0x0546
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	90 70       	andi	r25, 0x00	; 0
    1864:	80 93 46 05 	sts	0x0546, r24
    1868:	08 95       	ret

0000186a <plan_get_current_block>:
  }
}

block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    186a:	90 91 45 05 	lds	r25, 0x0545
    186e:	80 91 46 05 	lds	r24, 0x0546
    1872:	98 17       	cp	r25, r24
    1874:	19 f4       	brne	.+6      	; 0x187c <plan_get_current_block+0x12>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	08 c0       	rjmp	.+16     	; 0x188c <plan_get_current_block+0x22>
  return(&block_buffer[block_buffer_tail]);
    187c:	90 91 46 05 	lds	r25, 0x0546
    1880:	81 e4       	ldi	r24, 0x41	; 65
    1882:	98 9f       	mul	r25, r24
    1884:	90 01       	movw	r18, r0
    1886:	11 24       	eor	r1, r1
    1888:	2b 5c       	subi	r18, 0xCB	; 203
    188a:	3e 4f       	sbci	r19, 0xFE	; 254
}
    188c:	c9 01       	movw	r24, r18
    188e:	08 95       	ret

00001890 <plan_set_current_position>:
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}

// Reset the planner position vector
void plan_set_current_position(double x, double y, double z) {
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	49 01       	movw	r8, r18
    18a6:	5a 01       	movw	r10, r20
  position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    18a8:	20 91 dc 06 	lds	r18, 0x06DC
    18ac:	30 91 dd 06 	lds	r19, 0x06DD
    18b0:	40 91 de 06 	lds	r20, 0x06DE
    18b4:	50 91 df 06 	lds	r21, 0x06DF
    18b8:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    18bc:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    18c0:	27 e4       	ldi	r18, 0x47	; 71
    18c2:	c2 2e       	mov	r12, r18
    18c4:	25 e0       	ldi	r18, 0x05	; 5
    18c6:	d2 2e       	mov	r13, r18
    18c8:	60 93 47 05 	sts	0x0547, r22
    18cc:	70 93 48 05 	sts	0x0548, r23
    18d0:	80 93 49 05 	sts	0x0549, r24
    18d4:	90 93 4a 05 	sts	0x054A, r25
  position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    18d8:	c5 01       	movw	r24, r10
    18da:	b4 01       	movw	r22, r8
    18dc:	20 91 e0 06 	lds	r18, 0x06E0
    18e0:	30 91 e1 06 	lds	r19, 0x06E1
    18e4:	40 91 e2 06 	lds	r20, 0x06E2
    18e8:	50 91 e3 06 	lds	r21, 0x06E3
    18ec:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    18f0:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    18f4:	f6 01       	movw	r30, r12
    18f6:	34 96       	adiw	r30, 0x04	; 4
    18f8:	60 93 4b 05 	sts	0x054B, r22
    18fc:	71 83       	std	Z+1, r23	; 0x01
    18fe:	82 83       	std	Z+2, r24	; 0x02
    1900:	93 83       	std	Z+3, r25	; 0x03
  position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1902:	c8 01       	movw	r24, r16
    1904:	b7 01       	movw	r22, r14
    1906:	20 91 e4 06 	lds	r18, 0x06E4
    190a:	30 91 e5 06 	lds	r19, 0x06E5
    190e:	40 91 e6 06 	lds	r20, 0x06E6
    1912:	50 91 e7 06 	lds	r21, 0x06E7
    1916:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    191a:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    191e:	28 e0       	ldi	r18, 0x08	; 8
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	c2 0e       	add	r12, r18
    1924:	d3 1e       	adc	r13, r19
    1926:	60 93 4f 05 	sts	0x054F, r22
    192a:	f6 01       	movw	r30, r12
    192c:	71 83       	std	Z+1, r23	; 0x01
    192e:	82 83       	std	Z+2, r24	; 0x02
    1930:	93 83       	std	Z+3, r25	; 0x03
}
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	9f 90       	pop	r9
    1944:	8f 90       	pop	r8
    1946:	08 95       	ret

00001948 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
static void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1948:	4f 92       	push	r4
    194a:	5f 92       	push	r5
    194c:	6f 92       	push	r6
    194e:	7f 92       	push	r7
    1950:	8f 92       	push	r8
    1952:	9f 92       	push	r9
    1954:	af 92       	push	r10
    1956:	bf 92       	push	r11
    1958:	cf 92       	push	r12
    195a:	df 92       	push	r13
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	2c 01       	movw	r4, r24
    196a:	eb 01       	movw	r28, r22
  if(!current) { return; }
    196c:	61 15       	cp	r22, r1
    196e:	71 05       	cpc	r23, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <planner_forward_pass_kernel+0x2c>
    1972:	5a c0       	rjmp	.+180    	; 0x1a28 <planner_forward_pass_kernel+0xe0>
  // If the previous block is an acceleration block, but it is not long enough to 
  // complete the full speed change within the block, we need to adjust out entry
  // speed accordingly. Remember current->entry_factor equals the exit factor of 
  // the previous block.
  if(previous->entry_factor < current->entry_factor) {
    1974:	fc 01       	movw	r30, r24
    1976:	e1 a4       	ldd	r14, Z+41	; 0x29
    1978:	f2 a4       	ldd	r15, Z+42	; 0x2a
    197a:	03 a5       	ldd	r16, Z+43	; 0x2b
    197c:	14 a5       	ldd	r17, Z+44	; 0x2c
    197e:	69 a4       	ldd	r6, Y+41	; 0x29
    1980:	7a a4       	ldd	r7, Y+42	; 0x2a
    1982:	8b a4       	ldd	r8, Y+43	; 0x2b
    1984:	9c a4       	ldd	r9, Y+44	; 0x2c
    1986:	c8 01       	movw	r24, r16
    1988:	b7 01       	movw	r22, r14
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1992:	88 23       	and	r24, r24
    1994:	0c f0       	brlt	.+2      	; 0x1998 <planner_forward_pass_kernel+0x50>
    1996:	48 c0       	rjmp	.+144    	; 0x1a28 <planner_forward_pass_kernel+0xe0>
    double max_entry_speed = max_allowable_speed(-settings.acceleration,
      current->nominal_speed*previous->entry_factor, previous->millimeters);
    1998:	a9 a0       	ldd	r10, Y+33	; 0x21
    199a:	ba a0       	ldd	r11, Y+34	; 0x22
    199c:	cb a0       	ldd	r12, Y+35	; 0x23
    199e:	dc a0       	ldd	r13, Y+36	; 0x24
    19a0:	c6 01       	movw	r24, r12
    19a2:	b5 01       	movw	r22, r10
    19a4:	a8 01       	movw	r20, r16
    19a6:	97 01       	movw	r18, r14
    19a8:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
static double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    19b0:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    19b4:	7b 01       	movw	r14, r22
    19b6:	8c 01       	movw	r16, r24
    19b8:	20 91 f7 06 	lds	r18, 0x06F7
    19bc:	30 91 f8 06 	lds	r19, 0x06F8
    19c0:	40 91 f9 06 	lds	r20, 0x06F9
    19c4:	50 91 fa 06 	lds	r21, 0x06FA
    19c8:	50 58       	subi	r21, 0x80	; 128
    19ca:	ca 01       	movw	r24, r20
    19cc:	b9 01       	movw	r22, r18
    19ce:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e7       	ldi	r20, 0x70	; 112
    19d8:	52 e4       	ldi	r21, 0x42	; 66
    19da:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e7       	ldi	r20, 0x70	; 112
    19e4:	52 ec       	ldi	r21, 0xC2	; 194
    19e6:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    19ea:	f2 01       	movw	r30, r4
    19ec:	25 a1       	ldd	r18, Z+37	; 0x25
    19ee:	36 a1       	ldd	r19, Z+38	; 0x26
    19f0:	47 a1       	ldd	r20, Z+39	; 0x27
    19f2:	50 a5       	ldd	r21, Z+40	; 0x28
    19f4:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	c8 01       	movw	r24, r16
    19fe:	b7 01       	movw	r22, r14
    1a00:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1a04:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sqrt>
  // speed accordingly. Remember current->entry_factor equals the exit factor of 
  // the previous block.
  if(previous->entry_factor < current->entry_factor) {
    double max_entry_speed = max_allowable_speed(-settings.acceleration,
      current->nominal_speed*previous->entry_factor, previous->millimeters);
    double max_entry_factor = max_entry_speed/current->nominal_speed;
    1a08:	a6 01       	movw	r20, r12
    1a0a:	95 01       	movw	r18, r10
    1a0c:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1a10:	7b 01       	movw	r14, r22
    1a12:	8c 01       	movw	r16, r24
    if (max_entry_factor < current->entry_factor) {
    1a14:	a4 01       	movw	r20, r8
    1a16:	93 01       	movw	r18, r6
    1a18:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	24 f4       	brge	.+8      	; 0x1a28 <planner_forward_pass_kernel+0xe0>
      current->entry_factor = max_entry_factor;
    1a20:	e9 a6       	std	Y+41, r14	; 0x29
    1a22:	fa a6       	std	Y+42, r15	; 0x2a
    1a24:	0b a7       	std	Y+43, r16	; 0x2b
    1a26:	1c a7       	std	Y+44, r17	; 0x2c
    }
  }
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	7f 90       	pop	r7
    1a42:	6f 90       	pop	r6
    1a44:	5f 90       	pop	r5
    1a46:	4f 90       	pop	r4
    1a48:	08 95       	ret

00001a4a <calculate_trapezoid_for_block>:
*/                                                                              

// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
// The factors represent a factor of braking and must be in the range 0.0-1.0.

static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	68 97       	sbiw	r28, 0x18	; 24
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	1c 01       	movw	r2, r24
    1a80:	6a 01       	movw	r12, r20
    1a82:	7b 01       	movw	r14, r22
    1a84:	28 01       	movw	r4, r16
    1a86:	39 01       	movw	r6, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1a88:	dc 01       	movw	r26, r24
    1a8a:	51 96       	adiw	r26, 0x11	; 17
    1a8c:	6d 91       	ld	r22, X+
    1a8e:	7d 91       	ld	r23, X+
    1a90:	8d 91       	ld	r24, X+
    1a92:	9c 91       	ld	r25, X
    1a94:	54 97       	sbiw	r26, 0x14	; 20
    1a96:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    1a9a:	4b 01       	movw	r8, r22
    1a9c:	5c 01       	movw	r10, r24
    1a9e:	a7 01       	movw	r20, r14
    1aa0:	96 01       	movw	r18, r12
    1aa2:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1aa6:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    1aaa:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    1aae:	7b 01       	movw	r14, r22
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	f1 01       	movw	r30, r2
    1ab4:	65 a7       	std	Z+45, r22	; 0x2d
    1ab6:	76 a7       	std	Z+46, r23	; 0x2e
    1ab8:	87 a7       	std	Z+47, r24	; 0x2f
    1aba:	90 ab       	std	Z+48, r25	; 0x30
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1abc:	c5 01       	movw	r24, r10
    1abe:	b4 01       	movw	r22, r8
    1ac0:	a3 01       	movw	r20, r6
    1ac2:	92 01       	movw	r18, r4
    1ac4:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1ac8:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    1acc:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    1ad0:	69 87       	std	Y+9, r22	; 0x09
    1ad2:	7a 87       	std	Y+10, r23	; 0x0a
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
    1ad6:	9c 87       	std	Y+12, r25	; 0x0c
    1ad8:	d1 01       	movw	r26, r2
    1ada:	d1 96       	adiw	r26, 0x31	; 49
    1adc:	6d 93       	st	X+, r22
    1ade:	7d 93       	st	X+, r23
    1ae0:	8d 93       	st	X+, r24
    1ae2:	9c 93       	st	X, r25
    1ae4:	d4 97       	sbiw	r26, 0x34	; 52
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1ae6:	d5 96       	adiw	r26, 0x35	; 53
    1ae8:	6d 91       	ld	r22, X+
    1aea:	7d 91       	ld	r23, X+
    1aec:	8d 91       	ld	r24, X+
    1aee:	9c 91       	ld	r25, X
    1af0:	d8 97       	sbiw	r26, 0x38	; 56
    1af2:	28 e2       	ldi	r18, 0x28	; 40
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	0e 94 3a 21 	call	0x4274	; 0x4274 <__mulsi3>
    1afe:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e7       	ldi	r20, 0x70	; 112
    1b08:	52 e4       	ldi	r21, 0x42	; 66
    1b0a:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1b0e:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    1b12:	2b 01       	movw	r4, r22
    1b14:	3c 01       	movw	r6, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1b16:	c8 01       	movw	r24, r16
    1b18:	b7 01       	movw	r22, r14
    1b1a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    1b1e:	7b 01       	movw	r14, r22
    1b20:	8c 01       	movw	r16, r24
    1b22:	c3 01       	movw	r24, r6
    1b24:	b2 01       	movw	r22, r4
    1b26:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    1b2a:	6d 83       	std	Y+5, r22	; 0x05
    1b2c:	7e 83       	std	Y+6, r23	; 0x06
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
static double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1b32:	c5 01       	movw	r24, r10
    1b34:	b4 01       	movw	r22, r8
    1b36:	a5 01       	movw	r20, r10
    1b38:	94 01       	movw	r18, r8
    1b3a:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1b3e:	5b 01       	movw	r10, r22
    1b40:	6c 01       	movw	r12, r24
    1b42:	c8 01       	movw	r24, r16
    1b44:	b7 01       	movw	r22, r14
    1b46:	a8 01       	movw	r20, r16
    1b48:	97 01       	movw	r18, r14
    1b4a:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1b4e:	6d 87       	std	Y+13, r22	; 0x0d
    1b50:	7e 87       	std	Y+14, r23	; 0x0e
    1b52:	8f 87       	std	Y+15, r24	; 0x0f
    1b54:	98 8b       	std	Y+16, r25	; 0x10
    1b56:	6d 81       	ldd	r22, Y+5	; 0x05
    1b58:	7e 81       	ldd	r23, Y+6	; 0x06
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5c:	98 85       	ldd	r25, Y+8	; 0x08
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1b66:	69 8b       	std	Y+17, r22	; 0x11
    1b68:	7a 8b       	std	Y+18, r23	; 0x12
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1b6e:	c6 01       	movw	r24, r12
    1b70:	b5 01       	movw	r22, r10
    1b72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b76:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b78:	58 89       	ldd	r21, Y+16	; 0x10
    1b7a:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1b7e:	29 89       	ldd	r18, Y+17	; 0x11
    1b80:	3a 89       	ldd	r19, Y+18	; 0x12
    1b82:	4b 89       	ldd	r20, Y+19	; 0x13
    1b84:	5c 89       	ldd	r21, Y+20	; 0x14
    1b86:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1b8a:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    1b8e:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    1b92:	69 83       	std	Y+1, r22	; 0x01
    1b94:	7a 83       	std	Y+2, r23	; 0x02
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1b9a:	69 85       	ldd	r22, Y+9	; 0x09
    1b9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba2:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
static double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1baa:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1bae:	6d 8b       	std	Y+21, r22	; 0x15
    1bb0:	7e 8b       	std	Y+22, r23	; 0x16
    1bb2:	8f 8b       	std	Y+23, r24	; 0x17
    1bb4:	98 8f       	std	Y+24, r25	; 0x18
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1bb6:	a6 01       	movw	r20, r12
    1bb8:	95 01       	movw	r18, r10
    1bba:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1bbe:	7b 01       	movw	r14, r22
    1bc0:	8c 01       	movw	r16, r24
    1bc2:	70 94       	com	r7
    1bc4:	60 94       	com	r6
    1bc6:	50 94       	com	r5
    1bc8:	40 94       	com	r4
    1bca:	41 1c       	adc	r4, r1
    1bcc:	51 1c       	adc	r5, r1
    1bce:	61 1c       	adc	r6, r1
    1bd0:	71 1c       	adc	r7, r1
    1bd2:	c3 01       	movw	r24, r6
    1bd4:	b2 01       	movw	r22, r4
    1bd6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
    1bde:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1be2:	9b 01       	movw	r18, r22
    1be4:	ac 01       	movw	r20, r24
    1be6:	c8 01       	movw	r24, r16
    1be8:	b7 01       	movw	r22, r14
    1bea:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1bee:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1bf2:	f1 01       	movw	r30, r2
    1bf4:	a5 84       	ldd	r10, Z+13	; 0x0d
    1bf6:	b6 84       	ldd	r11, Z+14	; 0x0e
    1bf8:	c7 84       	ldd	r12, Z+15	; 0x0f
    1bfa:	d0 88       	ldd	r13, Z+16	; 0x10
    1bfc:	86 01       	movw	r16, r12
    1bfe:	75 01       	movw	r14, r10
    1c00:	29 81       	ldd	r18, Y+1	; 0x01
    1c02:	3a 81       	ldd	r19, Y+2	; 0x02
    1c04:	4b 81       	ldd	r20, Y+3	; 0x03
    1c06:	5c 81       	ldd	r21, Y+4	; 0x04
    1c08:	e2 1a       	sub	r14, r18
    1c0a:	f3 0a       	sbc	r15, r19
    1c0c:	04 0b       	sbc	r16, r20
    1c0e:	15 0b       	sbc	r17, r21
    1c10:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    1c14:	a8 01       	movw	r20, r16
    1c16:	97 01       	movw	r18, r14
    1c18:	26 1b       	sub	r18, r22
    1c1a:	37 0b       	sbc	r19, r23
    1c1c:	48 0b       	sbc	r20, r24
    1c1e:	59 0b       	sbc	r21, r25
    1c20:	da 01       	movw	r26, r20
    1c22:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1c24:	57 ff       	sbrs	r21, 7
    1c26:	36 c0       	rjmp	.+108    	; 0x1c94 <calculate_trapezoid_for_block+0x24a>
    accelerate_steps = ceil(
    1c28:	c6 01       	movw	r24, r12
    1c2a:	b5 01       	movw	r22, r10
    1c2c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	69 89       	ldd	r22, Y+17	; 0x11
    1c36:	7a 89       	ldd	r23, Y+18	; 0x12
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1c40:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c42:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c44:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c46:	58 89       	ldd	r21, Y+16	; 0x10
    1c48:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1c4c:	2d 89       	ldd	r18, Y+21	; 0x15
    1c4e:	3e 89       	ldd	r19, Y+22	; 0x16
    1c50:	4f 89       	ldd	r20, Y+23	; 0x17
    1c52:	58 8d       	ldd	r21, Y+24	; 0x18
    1c54:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1c58:	7b 01       	movw	r14, r22
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c60:	8f 81       	ldd	r24, Y+7	; 0x07
    1c62:	98 85       	ldd	r25, Y+8	; 0x08
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	50 e4       	ldi	r21, 0x40	; 64
    1c6c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	c8 01       	movw	r24, r16
    1c76:	b7 01       	movw	r22, r14
    1c78:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1c7c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    1c80:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    1c84:	69 83       	std	Y+1, r22	; 0x01
    1c86:	7a 83       	std	Y+2, r23	; 0x02
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1c94:	29 81       	ldd	r18, Y+1	; 0x01
    1c96:	3a 81       	ldd	r19, Y+2	; 0x02
    1c98:	4b 81       	ldd	r20, Y+3	; 0x03
    1c9a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c9c:	f1 01       	movw	r30, r2
    1c9e:	21 af       	std	Z+57, r18	; 0x39
    1ca0:	32 af       	std	Z+58, r19	; 0x3a
    1ca2:	43 af       	std	Z+59, r20	; 0x3b
    1ca4:	54 af       	std	Z+60, r21	; 0x3c
  block->decelerate_after = accelerate_steps+plateau_steps;
    1ca6:	2d e3       	ldi	r18, 0x3D	; 61
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	22 0e       	add	r2, r18
    1cac:	33 1e       	adc	r3, r19
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	a4 1f       	adc	r26, r20
    1cbc:	b5 1f       	adc	r27, r21
    1cbe:	f1 01       	movw	r30, r2
    1cc0:	80 83       	st	Z, r24
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	a2 83       	std	Z+2, r26	; 0x02
    1cc6:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1cc8:	68 96       	adiw	r28, 0x18	; 24
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	9f 90       	pop	r9
    1cea:	8f 90       	pop	r8
    1cec:	7f 90       	pop	r7
    1cee:	6f 90       	pop	r6
    1cf0:	5f 90       	pop	r5
    1cf2:	4f 90       	pop	r4
    1cf4:	3f 90       	pop	r3
    1cf6:	2f 90       	pop	r2
    1cf8:	08 95       	ret

00001cfa <planner_reverse_pass_kernel>:
    return(1.0);
  }
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
static void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <planner_reverse_pass_kernel+0x22>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <planner_reverse_pass_kernel+0x24>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	8c 01       	movw	r16, r24
    1d24:	2b 01       	movw	r4, r22
  if(!current) { return; }
    1d26:	61 15       	cp	r22, r1
    1d28:	71 05       	cpc	r23, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <planner_reverse_pass_kernel+0x34>
    1d2c:	e6 c0       	rjmp	.+460    	; 0x1efa <planner_reverse_pass_kernel+0x200>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1d2e:	41 15       	cp	r20, r1
    1d30:	51 05       	cpc	r21, r1
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <planner_reverse_pass_kernel+0x52>
    exit_factor = next->entry_factor;
    1d34:	da 01       	movw	r26, r20
    1d36:	99 96       	adiw	r26, 0x29	; 41
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9d 91       	ld	r25, X+
    1d3c:	0d 90       	ld	r0, X+
    1d3e:	bc 91       	ld	r27, X
    1d40:	a0 2d       	mov	r26, r0
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	ab 83       	std	Y+3, r26	; 0x03
    1d48:	bc 83       	std	Y+4, r27	; 0x04
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <planner_reverse_pass_kernel+0x60>
  } else {
    exit_factor = factor_for_safe_speed(current);
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <factor_for_safe_speed>
    1d52:	69 83       	std	Y+1, r22	; 0x01
    1d54:	7a 83       	std	Y+2, r23	; 0x02
    1d56:	8b 83       	std	Y+3, r24	; 0x03
    1d58:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1d5a:	01 15       	cp	r16, r1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <planner_reverse_pass_kernel+0x68>
    1d60:	c2 c0       	rjmp	.+388    	; 0x1ee6 <planner_reverse_pass_kernel+0x1ec>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
static double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1d62:	f8 01       	movw	r30, r16
    1d64:	65 89       	ldd	r22, Z+21	; 0x15
    1d66:	76 89       	ldd	r23, Z+22	; 0x16
    1d68:	87 89       	ldd	r24, Z+23	; 0x17
    1d6a:	90 8d       	ldd	r25, Z+24	; 0x18
    1d6c:	d2 01       	movw	r26, r4
    1d6e:	55 96       	adiw	r26, 0x15	; 21
    1d70:	2d 91       	ld	r18, X+
    1d72:	3d 91       	ld	r19, X+
    1d74:	4d 91       	ld	r20, X+
    1d76:	5c 91       	ld	r21, X
    1d78:	58 97       	sbiw	r26, 0x18	; 24
    1d7a:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1d7e:	9b 01       	movw	r18, r22
    1d80:	ac 01       	movw	r20, r24
    1d82:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1d86:	3b 01       	movw	r6, r22
    1d88:	4c 01       	movw	r8, r24
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	61 8d       	ldd	r22, Z+25	; 0x19
    1d8e:	72 8d       	ldd	r23, Z+26	; 0x1a
    1d90:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d92:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d94:	d2 01       	movw	r26, r4
    1d96:	59 96       	adiw	r26, 0x19	; 25
    1d98:	2d 91       	ld	r18, X+
    1d9a:	3d 91       	ld	r19, X+
    1d9c:	4d 91       	ld	r20, X+
    1d9e:	5c 91       	ld	r21, X
    1da0:	5c 97       	sbiw	r26, 0x1c	; 28
    1da2:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1dae:	5b 01       	movw	r10, r22
    1db0:	6c 01       	movw	r12, r24
    1db2:	f8 01       	movw	r30, r16
    1db4:	65 8d       	ldd	r22, Z+29	; 0x1d
    1db6:	76 8d       	ldd	r23, Z+30	; 0x1e
    1db8:	87 8d       	ldd	r24, Z+31	; 0x1f
    1dba:	90 a1       	ldd	r25, Z+32	; 0x20
    1dbc:	d2 01       	movw	r26, r4
    1dbe:	5d 96       	adiw	r26, 0x1d	; 29
    1dc0:	2d 91       	ld	r18, X+
    1dc2:	3d 91       	ld	r19, X+
    1dc4:	4d 91       	ld	r20, X+
    1dc6:	5c 91       	ld	r21, X
    1dc8:	90 97       	sbiw	r26, 0x20	; 32
    1dca:	0e 94 9e 1c 	call	0x393c	; 0x393c <__subsf3>
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1dd6:	7b 01       	movw	r14, r22
    1dd8:	8c 01       	movw	r16, r24
    1dda:	c4 01       	movw	r24, r8
    1ddc:	b3 01       	movw	r22, r6
    1dde:	a6 01       	movw	r20, r12
    1de0:	95 01       	movw	r18, r10
    1de2:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1de6:	a8 01       	movw	r20, r16
    1de8:	97 01       	movw	r18, r14
    1dea:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1dee:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sqrt>
    1df2:	5b 01       	movw	r10, r22
    1df4:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1df6:	e0 90 fb 06 	lds	r14, 0x06FB
    1dfa:	f0 90 fc 06 	lds	r15, 0x06FC
    1dfe:	00 91 fd 06 	lds	r16, 0x06FD
    1e02:	10 91 fe 06 	lds	r17, 0x06FE
    1e06:	a8 01       	movw	r20, r16
    1e08:	97 01       	movw	r18, r14
    1e0a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	5c f0       	brlt	.+22     	; 0x1e28 <planner_reverse_pass_kernel+0x12e>
    1e12:	0f 2e       	mov	r0, r31
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	6f 2e       	mov	r6, r31
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	7f 2e       	mov	r7, r31
    1e1c:	f0 e8       	ldi	r31, 0x80	; 128
    1e1e:	8f 2e       	mov	r8, r31
    1e20:	ff e3       	ldi	r31, 0x3F	; 63
    1e22:	9f 2e       	mov	r9, r31
    1e24:	f0 2d       	mov	r31, r0
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <planner_reverse_pass_kernel+0x13e>
      entry_factor = (settings.max_jerk/jerk);
    1e28:	c8 01       	movw	r24, r16
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	a6 01       	movw	r20, r12
    1e2e:	95 01       	movw	r18, r10
    1e30:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1e34:	3b 01       	movw	r6, r22
    1e36:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1e38:	c4 01       	movw	r24, r8
    1e3a:	b3 01       	movw	r22, r6
    1e3c:	29 81       	ldd	r18, Y+1	; 0x01
    1e3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e40:	4b 81       	ldd	r20, Y+3	; 0x03
    1e42:	5c 81       	ldd	r21, Y+4	; 0x04
    1e44:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    1e48:	18 16       	cp	r1, r24
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <planner_reverse_pass_kernel+0x154>
    1e4c:	51 c0       	rjmp	.+162    	; 0x1ef0 <planner_reverse_pass_kernel+0x1f6>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1e4e:	f2 01       	movw	r30, r4
    1e50:	a1 a0       	ldd	r10, Z+33	; 0x21
    1e52:	b2 a0       	ldd	r11, Z+34	; 0x22
    1e54:	c3 a0       	ldd	r12, Z+35	; 0x23
    1e56:	d4 a0       	ldd	r13, Z+36	; 0x24
    1e58:	c6 01       	movw	r24, r12
    1e5a:	b5 01       	movw	r22, r10
    1e5c:	29 81       	ldd	r18, Y+1	; 0x01
    1e5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e60:	4b 81       	ldd	r20, Y+3	; 0x03
    1e62:	5c 81       	ldd	r21, Y+4	; 0x04
    1e64:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
static double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1e6c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1e70:	7b 01       	movw	r14, r22
    1e72:	8c 01       	movw	r16, r24
    1e74:	20 91 f7 06 	lds	r18, 0x06F7
    1e78:	30 91 f8 06 	lds	r19, 0x06F8
    1e7c:	40 91 f9 06 	lds	r20, 0x06F9
    1e80:	50 91 fa 06 	lds	r21, 0x06FA
    1e84:	50 58       	subi	r21, 0x80	; 128
    1e86:	ca 01       	movw	r24, r20
    1e88:	b9 01       	movw	r22, r18
    1e8a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e7       	ldi	r20, 0x70	; 112
    1e94:	52 e4       	ldi	r21, 0x42	; 66
    1e96:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e7       	ldi	r20, 0x70	; 112
    1ea0:	52 ec       	ldi	r21, 0xC2	; 194
    1ea2:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1ea6:	d2 01       	movw	r26, r4
    1ea8:	95 96       	adiw	r26, 0x25	; 37
    1eaa:	2d 91       	ld	r18, X+
    1eac:	3d 91       	ld	r19, X+
    1eae:	4d 91       	ld	r20, X+
    1eb0:	5c 91       	ld	r21, X
    1eb2:	98 97       	sbiw	r26, 0x28	; 40
    1eb4:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    1ec4:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1ec8:	a6 01       	movw	r20, r12
    1eca:	95 01       	movw	r18, r10
    1ecc:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    1ed0:	7b 01       	movw	r14, r22
    1ed2:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1ed4:	a4 01       	movw	r20, r8
    1ed6:	93 01       	movw	r18, r6
    1ed8:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	44 f4       	brge	.+16     	; 0x1ef0 <planner_reverse_pass_kernel+0x1f6>
    1ee0:	37 01       	movw	r6, r14
    1ee2:	48 01       	movw	r8, r16
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <planner_reverse_pass_kernel+0x1f6>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1ee6:	c2 01       	movw	r24, r4
    1ee8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <factor_for_safe_speed>
    1eec:	3b 01       	movw	r6, r22
    1eee:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1ef0:	f2 01       	movw	r30, r4
    1ef2:	61 a6       	std	Z+41, r6	; 0x29
    1ef4:	72 a6       	std	Z+42, r7	; 0x2a
    1ef6:	83 a6       	std	Z+43, r8	; 0x2b
    1ef8:	94 a6       	std	Z+44, r9	; 0x2c
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	7f 90       	pop	r7
    1f1c:	6f 90       	pop	r6
    1f1e:	5f 90       	pop	r5
    1f20:	4f 90       	pop	r4
    1f22:	08 95       	ret

00001f24 <plan_buffer_line>:
}

// Add a new linear movement to the buffer. steps_x, _y and _z is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double feed_rate, int invert_feed_rate) {
    1f24:	2f 92       	push	r2
    1f26:	3f 92       	push	r3
    1f28:	4f 92       	push	r4
    1f2a:	5f 92       	push	r5
    1f2c:	6f 92       	push	r6
    1f2e:	7f 92       	push	r7
    1f30:	8f 92       	push	r8
    1f32:	9f 92       	push	r9
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	a6 97       	sbiw	r28, 0x26	; 38
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	29 8f       	std	Y+25, r18	; 0x19
    1f5a:	3a 8f       	std	Y+26, r19	; 0x1a
    1f5c:	4b 8f       	std	Y+27, r20	; 0x1b
    1f5e:	5c 8f       	std	Y+28, r21	; 0x1c
    1f60:	ed 8e       	std	Y+29, r14	; 0x1d
    1f62:	fe 8e       	std	Y+30, r15	; 0x1e
    1f64:	0f 8f       	std	Y+31, r16	; 0x1f
    1f66:	18 a3       	std	Y+32, r17	; 0x20
    1f68:	a9 a2       	std	Y+33, r10	; 0x21
    1f6a:	ba a2       	std	Y+34, r11	; 0x22
    1f6c:	cb a2       	std	Y+35, r12	; 0x23
    1f6e:	dc a2       	std	Y+36, r13	; 0x24
    1f70:	9e a2       	std	Y+38, r9	; 0x26
    1f72:	8d a2       	std	Y+37, r8	; 0x25
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1f74:	20 91 dc 06 	lds	r18, 0x06DC
    1f78:	30 91 dd 06 	lds	r19, 0x06DD
    1f7c:	40 91 de 06 	lds	r20, 0x06DE
    1f80:	50 91 df 06 	lds	r21, 0x06DF
    1f84:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    1f88:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    1f8c:	5b 01       	movw	r10, r22
    1f8e:	6c 01       	movw	r12, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1f90:	60 90 e0 06 	lds	r6, 0x06E0
    1f94:	70 90 e1 06 	lds	r7, 0x06E1
    1f98:	80 90 e2 06 	lds	r8, 0x06E2
    1f9c:	90 90 e3 06 	lds	r9, 0x06E3
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1fa0:	20 91 e4 06 	lds	r18, 0x06E4
    1fa4:	30 91 e5 06 	lds	r19, 0x06E5
    1fa8:	40 91 e6 06 	lds	r20, 0x06E6
    1fac:	50 91 e7 06 	lds	r21, 0x06E7
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1fb0:	80 91 45 05 	lds	r24, 0x0545
    1fb4:	28 2e       	mov	r2, r24
    1fb6:	33 24       	eor	r3, r3
    1fb8:	08 94       	sec
    1fba:	21 1c       	adc	r2, r1
    1fbc:	31 1c       	adc	r3, r1
    1fbe:	8f e0       	ldi	r24, 0x0F	; 15
    1fc0:	28 22       	and	r2, r24
    1fc2:	33 24       	eor	r3, r3
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <plan_buffer_line+0xb0>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1fc6:	83 b7       	in	r24, 0x33	; 51
    1fc8:	81 60       	ori	r24, 0x01	; 1
    1fca:	83 bf       	out	0x33, r24	; 51
    1fcc:	88 95       	sleep
    1fce:	83 b7       	in	r24, 0x33	; 51
    1fd0:	8e 7f       	andi	r24, 0xFE	; 254
    1fd2:	83 bf       	out	0x33, r24	; 51
    1fd4:	80 91 46 05 	lds	r24, 0x0546
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	82 15       	cp	r24, r2
    1fdc:	93 05       	cpc	r25, r3
    1fde:	99 f3       	breq	.-26     	; 0x1fc6 <plan_buffer_line+0xa2>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1fe0:	90 91 45 05 	lds	r25, 0x0545
    1fe4:	81 e4       	ldi	r24, 0x41	; 65
    1fe6:	98 9f       	mul	r25, r24
    1fe8:	20 01       	movw	r4, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f1 e0       	ldi	r31, 0x01	; 1
    1ff0:	4e 0e       	add	r4, r30
    1ff2:	5f 1e       	adc	r5, r31
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1ff4:	80 91 47 05 	lds	r24, 0x0547
    1ff8:	90 91 48 05 	lds	r25, 0x0548
    1ffc:	a0 91 49 05 	lds	r26, 0x0549
    2000:	b0 91 4a 05 	lds	r27, 0x054A
    2004:	86 01       	movw	r16, r12
    2006:	75 01       	movw	r14, r10
    2008:	e8 1a       	sub	r14, r24
    200a:	f9 0a       	sbc	r15, r25
    200c:	0a 0b       	sbc	r16, r26
    200e:	1b 0b       	sbc	r17, r27
    2010:	17 ff       	sbrs	r17, 7
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <plan_buffer_line+0x100>
    2014:	10 95       	com	r17
    2016:	00 95       	com	r16
    2018:	f0 94       	com	r15
    201a:	e0 94       	com	r14
    201c:	e1 1c       	adc	r14, r1
    201e:	f1 1c       	adc	r15, r1
    2020:	01 1d       	adc	r16, r1
    2022:	11 1d       	adc	r17, r1
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2024:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2026:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    202a:	98 a1       	ldd	r25, Y+32	; 0x20
    202c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    2030:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    2034:	69 87       	std	Y+9, r22	; 0x09
    2036:	7a 87       	std	Y+10, r23	; 0x0a
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    203c:	69 8d       	ldd	r22, Y+25	; 0x19
    203e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2044:	a4 01       	movw	r20, r8
    2046:	93 01       	movw	r18, r6
    2048:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    204c:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    2050:	6d 83       	std	Y+5, r22	; 0x05
    2052:	7e 83       	std	Y+6, r23	; 0x06
    2054:	8f 83       	std	Y+7, r24	; 0x07
    2056:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2058:	a9 82       	std	Y+1, r10	; 0x01
    205a:	ba 82       	std	Y+2, r11	; 0x02
    205c:	cb 82       	std	Y+3, r12	; 0x03
    205e:	dc 82       	std	Y+4, r13	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2060:	f2 01       	movw	r30, r4
    2062:	e0 82       	st	Z, r14
    2064:	f1 82       	std	Z+1, r15	; 0x01
    2066:	02 83       	std	Z+2, r16	; 0x02
    2068:	13 83       	std	Z+3, r17	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    206a:	2d 81       	ldd	r18, Y+5	; 0x05
    206c:	3e 81       	ldd	r19, Y+6	; 0x06
    206e:	4f 81       	ldd	r20, Y+7	; 0x07
    2070:	58 85       	ldd	r21, Y+8	; 0x08
    2072:	80 91 4b 05 	lds	r24, 0x054B
    2076:	90 91 4c 05 	lds	r25, 0x054C
    207a:	a0 91 4d 05 	lds	r26, 0x054D
    207e:	b0 91 4e 05 	lds	r27, 0x054E
    2082:	28 1b       	sub	r18, r24
    2084:	39 0b       	sbc	r19, r25
    2086:	4a 0b       	sbc	r20, r26
    2088:	5b 0b       	sbc	r21, r27
    208a:	57 ff       	sbrs	r21, 7
    208c:	07 c0       	rjmp	.+14     	; 0x209c <plan_buffer_line+0x178>
    208e:	50 95       	com	r21
    2090:	40 95       	com	r20
    2092:	30 95       	com	r19
    2094:	21 95       	neg	r18
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	4f 4f       	sbci	r20, 0xFF	; 255
    209a:	5f 4f       	sbci	r21, 0xFF	; 255
    209c:	f2 01       	movw	r30, r4
    209e:	24 83       	std	Z+4, r18	; 0x04
    20a0:	35 83       	std	Z+5, r19	; 0x05
    20a2:	46 83       	std	Z+6, r20	; 0x06
    20a4:	57 83       	std	Z+7, r21	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    20a6:	29 85       	ldd	r18, Y+9	; 0x09
    20a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    20aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    20ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    20ae:	80 91 4f 05 	lds	r24, 0x054F
    20b2:	90 91 50 05 	lds	r25, 0x0550
    20b6:	a0 91 51 05 	lds	r26, 0x0551
    20ba:	b0 91 52 05 	lds	r27, 0x0552
    20be:	28 1b       	sub	r18, r24
    20c0:	39 0b       	sbc	r19, r25
    20c2:	4a 0b       	sbc	r20, r26
    20c4:	5b 0b       	sbc	r21, r27
    20c6:	57 ff       	sbrs	r21, 7
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <plan_buffer_line+0x1b4>
    20ca:	50 95       	com	r21
    20cc:	40 95       	com	r20
    20ce:	30 95       	com	r19
    20d0:	21 95       	neg	r18
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	4f 4f       	sbci	r20, 0xFF	; 255
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	f2 01       	movw	r30, r4
    20da:	20 87       	std	Z+8, r18	; 0x08
    20dc:	31 87       	std	Z+9, r19	; 0x09
    20de:	42 87       	std	Z+10, r20	; 0x0a
    20e0:	53 87       	std	Z+11, r21	; 0x0b
  block->step_event_count = max(block->steps_x, max(block->steps_y, block->steps_z));
    20e2:	e4 80       	ldd	r14, Z+4	; 0x04
    20e4:	f5 80       	ldd	r15, Z+5	; 0x05
    20e6:	06 81       	ldd	r16, Z+6	; 0x06
    20e8:	17 81       	ldd	r17, Z+7	; 0x07
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	a2 81       	ldd	r26, Z+2	; 0x02
    20f0:	b3 81       	ldd	r27, Z+3	; 0x03
    20f2:	8e 15       	cp	r24, r14
    20f4:	9f 05       	cpc	r25, r15
    20f6:	a0 07       	cpc	r26, r16
    20f8:	b1 07       	cpc	r27, r17
    20fa:	10 f4       	brcc	.+4      	; 0x2100 <plan_buffer_line+0x1dc>
    20fc:	d8 01       	movw	r26, r16
    20fe:	c7 01       	movw	r24, r14
    2100:	82 17       	cp	r24, r18
    2102:	93 07       	cpc	r25, r19
    2104:	a4 07       	cpc	r26, r20
    2106:	b5 07       	cpc	r27, r21
    2108:	10 f4       	brcc	.+4      	; 0x210e <plan_buffer_line+0x1ea>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	f2 01       	movw	r30, r4
    2110:	85 87       	std	Z+13, r24	; 0x0d
    2112:	96 87       	std	Z+14, r25	; 0x0e
    2114:	a7 87       	std	Z+15, r26	; 0x0f
    2116:	b0 8b       	std	Z+16, r27	; 0x10
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <plan_buffer_line+0x1fe>
    2120:	45 c2       	rjmp	.+1162   	; 0x25ac <plan_buffer_line+0x688>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2122:	69 81       	ldd	r22, Y+1	; 0x01
    2124:	7a 81       	ldd	r23, Y+2	; 0x02
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	20 91 47 05 	lds	r18, 0x0547
    212e:	30 91 48 05 	lds	r19, 0x0548
    2132:	40 91 49 05 	lds	r20, 0x0549
    2136:	50 91 4a 05 	lds	r21, 0x054A
    213a:	62 1b       	sub	r22, r18
    213c:	73 0b       	sbc	r23, r19
    213e:	84 0b       	sbc	r24, r20
    2140:	95 0b       	sbc	r25, r21
    2142:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    2146:	20 91 dc 06 	lds	r18, 0x06DC
    214a:	30 91 dd 06 	lds	r19, 0x06DD
    214e:	40 91 de 06 	lds	r20, 0x06DE
    2152:	50 91 df 06 	lds	r21, 0x06DF
    2156:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    215a:	6d 8b       	std	Y+21, r22	; 0x15
    215c:	7e 8b       	std	Y+22, r23	; 0x16
    215e:	8f 8b       	std	Y+23, r24	; 0x17
    2160:	98 8f       	std	Y+24, r25	; 0x18
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2162:	6d 81       	ldd	r22, Y+5	; 0x05
    2164:	7e 81       	ldd	r23, Y+6	; 0x06
    2166:	8f 81       	ldd	r24, Y+7	; 0x07
    2168:	98 85       	ldd	r25, Y+8	; 0x08
    216a:	20 91 4b 05 	lds	r18, 0x054B
    216e:	30 91 4c 05 	lds	r19, 0x054C
    2172:	40 91 4d 05 	lds	r20, 0x054D
    2176:	50 91 4e 05 	lds	r21, 0x054E
    217a:	62 1b       	sub	r22, r18
    217c:	73 0b       	sbc	r23, r19
    217e:	84 0b       	sbc	r24, r20
    2180:	95 0b       	sbc	r25, r21
    2182:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    2186:	20 91 e0 06 	lds	r18, 0x06E0
    218a:	30 91 e1 06 	lds	r19, 0x06E1
    218e:	40 91 e2 06 	lds	r20, 0x06E2
    2192:	50 91 e3 06 	lds	r21, 0x06E3
    2196:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    219a:	69 8b       	std	Y+17, r22	; 0x11
    219c:	7a 8b       	std	Y+18, r23	; 0x12
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    21a2:	69 85       	ldd	r22, Y+9	; 0x09
    21a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    21a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21aa:	20 91 4f 05 	lds	r18, 0x054F
    21ae:	30 91 50 05 	lds	r19, 0x0550
    21b2:	40 91 51 05 	lds	r20, 0x0551
    21b6:	50 91 52 05 	lds	r21, 0x0552
    21ba:	62 1b       	sub	r22, r18
    21bc:	73 0b       	sbc	r23, r19
    21be:	84 0b       	sbc	r24, r20
    21c0:	95 0b       	sbc	r25, r21
    21c2:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    21c6:	20 91 e4 06 	lds	r18, 0x06E4
    21ca:	30 91 e5 06 	lds	r19, 0x06E5
    21ce:	40 91 e6 06 	lds	r20, 0x06E6
    21d2:	50 91 e7 06 	lds	r21, 0x06E7
    21d6:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    21da:	6d 87       	std	Y+13, r22	; 0x0d
    21dc:	7e 87       	std	Y+14, r23	; 0x0e
    21de:	8f 87       	std	Y+15, r24	; 0x0f
    21e0:	98 8b       	std	Y+16, r25	; 0x10
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm));
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 11 21 	call	0x4222	; 0x4222 <square>
    21ee:	3b 01       	movw	r6, r22
    21f0:	4c 01       	movw	r8, r24
    21f2:	69 89       	ldd	r22, Y+17	; 0x11
    21f4:	7a 89       	ldd	r23, Y+18	; 0x12
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	0e 94 11 21 	call	0x4222	; 0x4222 <square>
    21fe:	7b 01       	movw	r14, r22
    2200:	8c 01       	movw	r16, r24
    2202:	6d 85       	ldd	r22, Y+13	; 0x0d
    2204:	7e 85       	ldd	r23, Y+14	; 0x0e
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	0e 94 11 21 	call	0x4222	; 0x4222 <square>
    220e:	5b 01       	movw	r10, r22
    2210:	6c 01       	movw	r12, r24
    2212:	c4 01       	movw	r24, r8
    2214:	b3 01       	movw	r22, r6
    2216:	a8 01       	movw	r20, r16
    2218:	97 01       	movw	r18, r14
    221a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    221e:	a6 01       	movw	r20, r12
    2220:	95 01       	movw	r18, r10
    2222:	0e 94 9f 1c 	call	0x393e	; 0x393e <__addsf3>
    2226:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sqrt>
    222a:	f2 01       	movw	r30, r4
    222c:	65 a3       	std	Z+37, r22	; 0x25
    222e:	76 a3       	std	Z+38, r23	; 0x26
    2230:	87 a3       	std	Z+39, r24	; 0x27
    2232:	90 a7       	std	Z+40, r25	; 0x28
	
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2234:	2d a1       	ldd	r18, Y+37	; 0x25
    2236:	3e a1       	ldd	r19, Y+38	; 0x26
    2238:	23 2b       	or	r18, r19
    223a:	69 f4       	brne	.+26     	; 0x2256 <plan_buffer_line+0x332>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    223c:	29 a1       	ldd	r18, Y+33	; 0x21
    223e:	3a a1       	ldd	r19, Y+34	; 0x22
    2240:	4b a1       	ldd	r20, Y+35	; 0x23
    2242:	5c a1       	ldd	r21, Y+36	; 0x24
    2244:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	34 e2       	ldi	r19, 0x24	; 36
    224c:	44 e7       	ldi	r20, 0x74	; 116
    224e:	59 e4       	ldi	r21, 0x49	; 73
    2250:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    2254:	0a c0       	rjmp	.+20     	; 0x226a <plan_buffer_line+0x346>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2256:	60 ec       	ldi	r22, 0xC0	; 192
    2258:	71 ee       	ldi	r23, 0xE1	; 225
    225a:	84 e6       	ldi	r24, 0x64	; 100
    225c:	9c e4       	ldi	r25, 0x4C	; 76
    225e:	29 a1       	ldd	r18, Y+33	; 0x21
    2260:	3a a1       	ldd	r19, Y+34	; 0x22
    2262:	4b a1       	ldd	r20, Y+35	; 0x23
    2264:	5c a1       	ldd	r21, Y+36	; 0x24
    2266:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    226a:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <lround>
    226e:	ac 01       	movw	r20, r24
    2270:	cb 01       	movw	r24, r22
    2272:	da 01       	movw	r26, r20
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2278:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    227c:	9b 01       	movw	r18, r22
    227e:	ac 01       	movw	r20, r24
    2280:	60 ec       	ldi	r22, 0xC0	; 192
    2282:	71 ee       	ldi	r23, 0xE1	; 225
    2284:	84 e6       	ldi	r24, 0x64	; 100
    2286:	9c e4       	ldi	r25, 0x4C	; 76
    2288:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    228c:	7b 01       	movw	r14, r22
    228e:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	a8 01       	movw	r20, r16
    229a:	97 01       	movw	r18, r14
    229c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    22a0:	f2 01       	movw	r30, r4
    22a2:	65 8b       	std	Z+21, r22	; 0x15
    22a4:	76 8b       	std	Z+22, r23	; 0x16
    22a6:	87 8b       	std	Z+23, r24	; 0x17
    22a8:	90 8f       	std	Z+24, r25	; 0x18
  block->speed_y = delta_y_mm * multiplier;
    22aa:	69 89       	ldd	r22, Y+17	; 0x11
    22ac:	7a 89       	ldd	r23, Y+18	; 0x12
    22ae:	8b 89       	ldd	r24, Y+19	; 0x13
    22b0:	9c 89       	ldd	r25, Y+20	; 0x14
    22b2:	a8 01       	movw	r20, r16
    22b4:	97 01       	movw	r18, r14
    22b6:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    22ba:	f2 01       	movw	r30, r4
    22bc:	61 8f       	std	Z+25, r22	; 0x19
    22be:	72 8f       	std	Z+26, r23	; 0x1a
    22c0:	83 8f       	std	Z+27, r24	; 0x1b
    22c2:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_z = delta_z_mm * multiplier; 
    22c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    22c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	98 89       	ldd	r25, Y+16	; 0x10
    22cc:	a8 01       	movw	r20, r16
    22ce:	97 01       	movw	r18, r14
    22d0:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    22d4:	f2 01       	movw	r30, r4
    22d6:	65 8f       	std	Z+29, r22	; 0x1d
    22d8:	76 8f       	std	Z+30, r23	; 0x1e
    22da:	87 8f       	std	Z+31, r24	; 0x1f
    22dc:	90 a3       	std	Z+32, r25	; 0x20
  block->nominal_speed = block->millimeters * multiplier;
    22de:	65 a1       	ldd	r22, Z+37	; 0x25
    22e0:	76 a1       	ldd	r23, Z+38	; 0x26
    22e2:	87 a1       	ldd	r24, Z+39	; 0x27
    22e4:	90 a5       	ldd	r25, Z+40	; 0x28
    22e6:	a8 01       	movw	r20, r16
    22e8:	97 01       	movw	r18, r14
    22ea:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    22ee:	f2 01       	movw	r30, r4
    22f0:	61 a3       	std	Z+33, r22	; 0x21
    22f2:	72 a3       	std	Z+34, r23	; 0x22
    22f4:	83 a3       	std	Z+35, r24	; 0x23
    22f6:	94 a3       	std	Z+36, r25	; 0x24
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    22f8:	65 85       	ldd	r22, Z+13	; 0x0d
    22fa:	76 85       	ldd	r23, Z+14	; 0x0e
    22fc:	87 85       	ldd	r24, Z+15	; 0x0f
    22fe:	90 89       	ldd	r25, Z+16	; 0x10
    2300:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__floatsisf>
    2304:	5b 01       	movw	r10, r22
    2306:	6c 01       	movw	r12, r24
    2308:	a8 01       	movw	r20, r16
    230a:	97 01       	movw	r18, r14
    230c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    2310:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    2314:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    2318:	3b 01       	movw	r6, r22
    231a:	4c 01       	movw	r8, r24
    231c:	f2 01       	movw	r30, r4
    231e:	61 8b       	std	Z+17, r22	; 0x11
    2320:	72 8b       	std	Z+18, r23	; 0x12
    2322:	83 8b       	std	Z+19, r24	; 0x13
    2324:	94 8b       	std	Z+20, r25	; 0x14
  block->entry_factor = 0.0;
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a0 e0       	ldi	r26, 0x00	; 0
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	81 a7       	std	Z+41, r24	; 0x29
    2330:	92 a7       	std	Z+42, r25	; 0x2a
    2332:	a3 a7       	std	Z+43, r26	; 0x2b
    2334:	b4 a7       	std	Z+44, r27	; 0x2c
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2336:	60 91 f7 06 	lds	r22, 0x06F7
    233a:	70 91 f8 06 	lds	r23, 0x06F8
    233e:	80 91 f9 06 	lds	r24, 0x06F9
    2342:	90 91 fa 06 	lds	r25, 0x06FA
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e7       	ldi	r20, 0x70	; 112
    234c:	52 e4       	ldi	r21, 0x42	; 66
    234e:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	52 e4       	ldi	r21, 0x42	; 66
    235a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    235e:	7b 01       	movw	r14, r22
    2360:	8c 01       	movw	r16, r24
    2362:	f2 01       	movw	r30, r4
    2364:	65 a1       	ldd	r22, Z+37	; 0x25
    2366:	76 a1       	ldd	r23, Z+38	; 0x26
    2368:	87 a1       	ldd	r24, Z+39	; 0x27
    236a:	90 a5       	ldd	r25, Z+40	; 0x28
    236c:	a6 01       	movw	r20, r12
    236e:	95 01       	movw	r18, r10
    2370:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    2380:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ceil>
    2384:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    2388:	f2 01       	movw	r30, r4
    238a:	65 ab       	std	Z+53, r22	; 0x35
    238c:	76 ab       	std	Z+54, r23	; 0x36
    238e:	87 ab       	std	Z+55, r24	; 0x37
    2390:	90 af       	std	Z+56, r25	; 0x38
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2392:	80 91 53 05 	lds	r24, 0x0553
    2396:	88 23       	and	r24, r24
    2398:	59 f0       	breq	.+22     	; 0x23b0 <plan_buffer_line+0x48c>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    239a:	c2 01       	movw	r24, r4
    239c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <factor_for_safe_speed>
    23a0:	8b 01       	movw	r16, r22
    23a2:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    23a4:	c2 01       	movw	r24, r4
    23a6:	b9 01       	movw	r22, r18
    23a8:	a8 01       	movw	r20, r16
    23aa:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <calculate_trapezoid_for_block>
    23ae:	1e c0       	rjmp	.+60     	; 0x23ec <plan_buffer_line+0x4c8>
  } else {
    block->initial_rate = block->nominal_rate;
    23b0:	f2 01       	movw	r30, r4
    23b2:	65 a6       	std	Z+45, r6	; 0x2d
    23b4:	76 a6       	std	Z+46, r7	; 0x2e
    23b6:	87 a6       	std	Z+47, r8	; 0x2f
    23b8:	90 aa       	std	Z+48, r9	; 0x30
    block->final_rate = block->nominal_rate;
    23ba:	61 aa       	std	Z+49, r6	; 0x31
    23bc:	72 aa       	std	Z+50, r7	; 0x32
    23be:	83 aa       	std	Z+51, r8	; 0x33
    23c0:	94 aa       	std	Z+52, r9	; 0x34
    block->accelerate_until = 0;
    23c2:	11 ae       	std	Z+57, r1	; 0x39
    23c4:	12 ae       	std	Z+58, r1	; 0x3a
    23c6:	13 ae       	std	Z+59, r1	; 0x3b
    23c8:	14 ae       	std	Z+60, r1	; 0x3c
    block->decelerate_after = block->step_event_count;
    23ca:	92 01       	movw	r18, r4
    23cc:	23 5c       	subi	r18, 0xC3	; 195
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	85 85       	ldd	r24, Z+13	; 0x0d
    23d2:	96 85       	ldd	r25, Z+14	; 0x0e
    23d4:	a7 85       	ldd	r26, Z+15	; 0x0f
    23d6:	b0 89       	ldd	r27, Z+16	; 0x10
    23d8:	f9 01       	movw	r30, r18
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    23e2:	f2 01       	movw	r30, r4
    23e4:	15 aa       	std	Z+53, r1	; 0x35
    23e6:	16 aa       	std	Z+54, r1	; 0x36
    23e8:	17 aa       	std	Z+55, r1	; 0x37
    23ea:	10 ae       	std	Z+56, r1	; 0x38
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    23ec:	f2 01       	movw	r30, r4
    23ee:	14 86       	std	Z+12, r1	; 0x0c
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    23f0:	29 81       	ldd	r18, Y+1	; 0x01
    23f2:	3a 81       	ldd	r19, Y+2	; 0x02
    23f4:	4b 81       	ldd	r20, Y+3	; 0x03
    23f6:	5c 81       	ldd	r21, Y+4	; 0x04
    23f8:	80 91 47 05 	lds	r24, 0x0547
    23fc:	90 91 48 05 	lds	r25, 0x0548
    2400:	a0 91 49 05 	lds	r26, 0x0549
    2404:	b0 91 4a 05 	lds	r27, 0x054A
    2408:	28 17       	cp	r18, r24
    240a:	39 07       	cpc	r19, r25
    240c:	4a 07       	cpc	r20, r26
    240e:	5b 07       	cpc	r21, r27
    2410:	14 f4       	brge	.+4      	; 0x2416 <plan_buffer_line+0x4f2>
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	84 87       	std	Z+12, r24	; 0x0c
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2416:	2d 81       	ldd	r18, Y+5	; 0x05
    2418:	3e 81       	ldd	r19, Y+6	; 0x06
    241a:	4f 81       	ldd	r20, Y+7	; 0x07
    241c:	58 85       	ldd	r21, Y+8	; 0x08
    241e:	80 91 4b 05 	lds	r24, 0x054B
    2422:	90 91 4c 05 	lds	r25, 0x054C
    2426:	a0 91 4d 05 	lds	r26, 0x054D
    242a:	b0 91 4e 05 	lds	r27, 0x054E
    242e:	28 17       	cp	r18, r24
    2430:	39 07       	cpc	r19, r25
    2432:	4a 07       	cpc	r20, r26
    2434:	5b 07       	cpc	r21, r27
    2436:	24 f4       	brge	.+8      	; 0x2440 <plan_buffer_line+0x51c>
    2438:	f2 01       	movw	r30, r4
    243a:	84 85       	ldd	r24, Z+12	; 0x0c
    243c:	80 64       	ori	r24, 0x40	; 64
    243e:	84 87       	std	Z+12, r24	; 0x0c
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2440:	29 85       	ldd	r18, Y+9	; 0x09
    2442:	3a 85       	ldd	r19, Y+10	; 0x0a
    2444:	4b 85       	ldd	r20, Y+11	; 0x0b
    2446:	5c 85       	ldd	r21, Y+12	; 0x0c
    2448:	80 91 4f 05 	lds	r24, 0x054F
    244c:	90 91 50 05 	lds	r25, 0x0550
    2450:	a0 91 51 05 	lds	r26, 0x0551
    2454:	b0 91 52 05 	lds	r27, 0x0552
    2458:	28 17       	cp	r18, r24
    245a:	39 07       	cpc	r19, r25
    245c:	4a 07       	cpc	r20, r26
    245e:	5b 07       	cpc	r21, r27
    2460:	24 f4       	brge	.+8      	; 0x246a <plan_buffer_line+0x546>
    2462:	f2 01       	movw	r30, r4
    2464:	84 85       	ldd	r24, Z+12	; 0x0c
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	84 87       	std	Z+12, r24	; 0x0c
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    246a:	20 92 45 05 	sts	0x0545, r2
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    246e:	a7 e4       	ldi	r26, 0x47	; 71
    2470:	b5 e0       	ldi	r27, 0x05	; 5
    2472:	fe 01       	movw	r30, r28
    2474:	31 96       	adiw	r30, 0x01	; 1
    2476:	8c e0       	ldi	r24, 0x0C	; 12
    2478:	01 90       	ld	r0, Z+
    247a:	0d 92       	st	X+, r0
    247c:	81 50       	subi	r24, 0x01	; 1
    247e:	e1 f7       	brne	.-8      	; 0x2478 <plan_buffer_line+0x554>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2480:	80 91 53 05 	lds	r24, 0x0553
    2484:	88 23       	and	r24, r24
    2486:	09 f4       	brne	.+2      	; 0x248a <plan_buffer_line+0x566>
    2488:	8f c0       	rjmp	.+286    	; 0x25a8 <plan_buffer_line+0x684>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
static void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
    248a:	d0 90 45 05 	lds	r13, 0x0545
    248e:	ee 24       	eor	r14, r14
    2490:	ff 24       	eor	r15, r15
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	12 c0       	rjmp	.+36     	; 0x24bc <plan_buffer_line+0x598>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    2498:	da 94       	dec	r13
    if(block_index < 0) {
    249a:	d7 fe       	sbrs	r13, 7
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <plan_buffer_line+0x57e>
    249e:	3f e0       	ldi	r19, 0x0F	; 15
    24a0:	d3 2e       	mov	r13, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    24a2:	fd 2d       	mov	r31, r13
    24a4:	21 e4       	ldi	r18, 0x41	; 65
    24a6:	f2 02       	muls	r31, r18
    24a8:	80 01       	movw	r16, r0
    24aa:	11 24       	eor	r1, r1
    24ac:	0b 5c       	subi	r16, 0xCB	; 203
    24ae:	1e 4f       	sbci	r17, 0xFE	; 254
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    24b0:	c8 01       	movw	r24, r16
    24b2:	b7 01       	movw	r22, r14
    24b4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <planner_reverse_pass_kernel>
    24b8:	a7 01       	movw	r20, r14
    24ba:	78 01       	movw	r14, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
static void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    24bc:	80 91 46 05 	lds	r24, 0x0546
    24c0:	2d 2d       	mov	r18, r13
    24c2:	33 27       	eor	r19, r19
    24c4:	27 fd       	sbrc	r18, 7
    24c6:	30 95       	com	r19
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	28 17       	cp	r18, r24
    24cc:	39 07       	cpc	r19, r25
    24ce:	21 f7       	brne	.-56     	; 0x2498 <plan_buffer_line+0x574>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	b7 01       	movw	r22, r14
    24d6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <planner_reverse_pass_kernel>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
static void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
    24da:	40 91 46 05 	lds	r20, 0x0546
    24de:	ee 24       	eor	r14, r14
    24e0:	ff 24       	eor	r15, r15
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <plan_buffer_line+0x5ec>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    24e8:	81 e4       	ldi	r24, 0x41	; 65
    24ea:	48 02       	muls	r20, r24
    24ec:	80 01       	movw	r16, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	0b 5c       	subi	r16, 0xCB	; 203
    24f2:	1e 4f       	sbci	r17, 0xFE	; 254
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    24f4:	c9 01       	movw	r24, r18
    24f6:	b7 01       	movw	r22, r14
    24f8:	a8 01       	movw	r20, r16
    24fa:	0e 94 a4 0c 	call	0x1948	; 0x1948 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    24fe:	c6 01       	movw	r24, r12
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	60 e1       	ldi	r22, 0x10	; 16
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__divmodhi4>
    250a:	48 2f       	mov	r20, r24
    250c:	97 01       	movw	r18, r14
    250e:	78 01       	movw	r14, r16
// implements the forward pass.
static void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    2510:	c4 2e       	mov	r12, r20
    2512:	dd 24       	eor	r13, r13
    2514:	c7 fc       	sbrc	r12, 7
    2516:	d0 94       	com	r13
    2518:	80 91 45 05 	lds	r24, 0x0545
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	c8 16       	cp	r12, r24
    2520:	d9 06       	cpc	r13, r25
    2522:	11 f7       	brne	.-60     	; 0x24e8 <plan_buffer_line+0x5c4>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    2524:	c9 01       	movw	r24, r18
    2526:	b7 01       	movw	r22, r14
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <planner_forward_pass_kernel>

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
static void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
    2530:	20 91 46 05 	lds	r18, 0x0546
    2534:	ee 24       	eor	r14, r14
    2536:	ff 24       	eor	r15, r15
    2538:	20 c0       	rjmp	.+64     	; 0x257a <plan_buffer_line+0x656>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    253a:	91 e4       	ldi	r25, 0x41	; 65
    253c:	29 02       	muls	r18, r25
    253e:	60 01       	movw	r12, r0
    2540:	11 24       	eor	r1, r1
    2542:	e5 e3       	ldi	r30, 0x35	; 53
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	ce 0e       	add	r12, r30
    2548:	df 1e       	adc	r13, r31
    if (current) {
    254a:	e1 14       	cp	r14, r1
    254c:	f1 04       	cpc	r15, r1
    254e:	69 f0       	breq	.+26     	; 0x256a <plan_buffer_line+0x646>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2550:	f7 01       	movw	r30, r14
    2552:	41 a5       	ldd	r20, Z+41	; 0x29
    2554:	52 a5       	ldd	r21, Z+42	; 0x2a
    2556:	63 a5       	ldd	r22, Z+43	; 0x2b
    2558:	74 a5       	ldd	r23, Z+44	; 0x2c
    255a:	f6 01       	movw	r30, r12
    255c:	01 a5       	ldd	r16, Z+41	; 0x29
    255e:	12 a5       	ldd	r17, Z+42	; 0x2a
    2560:	23 a5       	ldd	r18, Z+43	; 0x2b
    2562:	34 a5       	ldd	r19, Z+44	; 0x2c
    2564:	c7 01       	movw	r24, r14
    2566:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    256a:	c5 01       	movw	r24, r10
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	60 e1       	ldi	r22, 0x10	; 16
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__divmodhi4>
    2576:	28 2f       	mov	r18, r24
    2578:	76 01       	movw	r14, r12
static void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    257a:	a2 2e       	mov	r10, r18
    257c:	bb 24       	eor	r11, r11
    257e:	a7 fc       	sbrc	r10, 7
    2580:	b0 94       	com	r11
    2582:	80 91 45 05 	lds	r24, 0x0545
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a8 16       	cp	r10, r24
    258a:	b9 06       	cpc	r11, r25
    258c:	b1 f6       	brne	.-84     	; 0x253a <plan_buffer_line+0x616>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    258e:	c7 01       	movw	r24, r14
    2590:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <factor_for_safe_speed>
    2594:	8b 01       	movw	r16, r22
    2596:	9c 01       	movw	r18, r24
    2598:	f7 01       	movw	r30, r14
    259a:	41 a5       	ldd	r20, Z+41	; 0x29
    259c:	52 a5       	ldd	r21, Z+42	; 0x2a
    259e:	63 a5       	ldd	r22, Z+43	; 0x2b
    25a0:	74 a5       	ldd	r23, Z+44	; 0x2c
    25a2:	c7 01       	movw	r24, r14
    25a4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <calculate_trapezoid_for_block>
  block_buffer_head = next_buffer_head;     
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
    25a8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <st_wake_up>
}
    25ac:	a6 96       	adiw	r28, 0x26	; 38
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	cf 90       	pop	r12
    25c8:	bf 90       	pop	r11
    25ca:	af 90       	pop	r10
    25cc:	9f 90       	pop	r9
    25ce:	8f 90       	pop	r8
    25d0:	7f 90       	pop	r7
    25d2:	6f 90       	pop	r6
    25d4:	5f 90       	pop	r5
    25d6:	4f 90       	pop	r4
    25d8:	3f 90       	pop	r3
    25da:	2f 90       	pop	r2
    25dc:	08 95       	ret

000025de <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(true);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	80 91 53 05 	lds	r24, 0x0553
    25ea:	81 11       	cpse	r24, r1
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	20 97       	sbiw	r28, 0x00	; 0
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <plan_set_acceleration_manager_enabled+0x18>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	98 17       	cp	r25, r24
    25f8:	49 f0       	breq	.+18     	; 0x260c <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    25fa:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    25fe:	10 92 53 05 	sts	0x0553, r1
    2602:	cd 2b       	or	r28, r29
    2604:	19 f0       	breq	.+6      	; 0x260c <plan_set_acceleration_manager_enabled+0x2e>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 93 53 05 	sts	0x0553, r24
  }
}
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    2612:	10 92 45 05 	sts	0x0545, r1
  block_buffer_tail = 0;
    2616:	10 92 46 05 	sts	0x0546, r1
  plan_set_acceleration_manager_enabled(true);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 ef 12 	call	0x25de	; 0x25de <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    2622:	8c e0       	ldi	r24, 0x0C	; 12
    2624:	e7 e4       	ldi	r30, 0x47	; 71
    2626:	f5 e0       	ldi	r31, 0x05	; 5
    2628:	df 01       	movw	r26, r30
    262a:	1d 92       	st	X+, r1
    262c:	8a 95       	dec	r24
    262e:	e9 f7       	brne	.-6      	; 0x262a <plan_init+0x18>
}
    2630:	08 95       	ret

00002632 <settings_reset>:
#define DEFAULT_MAX_JERK 300.0
//#define DEFAULT_STEPPING_INVERT_MASK 0
#define DEFAULT_STEPPING_INVERT_MASK 0x1C

void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2632:	84 ef       	ldi	r24, 0xF4	; 244
    2634:	99 ef       	ldi	r25, 0xF9	; 249
    2636:	ac e3       	ldi	r26, 0x3C	; 60
    2638:	b4 e4       	ldi	r27, 0x44	; 68
    263a:	80 93 dc 06 	sts	0x06DC, r24
    263e:	90 93 dd 06 	sts	0x06DD, r25
    2642:	a0 93 de 06 	sts	0x06DE, r26
    2646:	b0 93 df 06 	sts	0x06DF, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    264a:	80 93 e0 06 	sts	0x06E0, r24
    264e:	90 93 e1 06 	sts	0x06E1, r25
    2652:	a0 93 e2 06 	sts	0x06E2, r26
    2656:	b0 93 e3 06 	sts	0x06E3, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    265a:	80 93 e4 06 	sts	0x06E4, r24
    265e:	90 93 e5 06 	sts	0x06E5, r25
    2662:	a0 93 e6 06 	sts	0x06E6, r26
    2666:	b0 93 e7 06 	sts	0x06E7, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    266a:	8e e1       	ldi	r24, 0x1E	; 30
    266c:	80 93 e9 06 	sts	0x06E9, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	aa ef       	ldi	r26, 0xFA	; 250
    2676:	b3 e4       	ldi	r27, 0x43	; 67
    2678:	80 93 ea 06 	sts	0x06EA, r24
    267c:	90 93 eb 06 	sts	0x06EB, r25
    2680:	a0 93 ec 06 	sts	0x06EC, r26
    2684:	b0 93 ed 06 	sts	0x06ED, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2688:	80 93 ee 06 	sts	0x06EE, r24
    268c:	90 93 ef 06 	sts	0x06EF, r25
    2690:	a0 93 f0 06 	sts	0x06F0, r26
    2694:	b0 93 f1 06 	sts	0x06F1, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a8 e4       	ldi	r26, 0x48	; 72
    269e:	b2 e4       	ldi	r27, 0x42	; 66
    26a0:	80 93 f7 06 	sts	0x06F7, r24
    26a4:	90 93 f8 06 	sts	0x06F8, r25
    26a8:	a0 93 f9 06 	sts	0x06F9, r26
    26ac:	b0 93 fa 06 	sts	0x06FA, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    26b0:	8d ec       	ldi	r24, 0xCD	; 205
    26b2:	9c ec       	ldi	r25, 0xCC	; 204
    26b4:	ac ec       	ldi	r26, 0xCC	; 204
    26b6:	bd e3       	ldi	r27, 0x3D	; 61
    26b8:	80 93 f3 06 	sts	0x06F3, r24
    26bc:	90 93 f4 06 	sts	0x06F4, r25
    26c0:	a0 93 f5 06 	sts	0x06F5, r26
    26c4:	b0 93 f6 06 	sts	0x06F6, r27
  settings.invert_mask = DEFAULT_STEPPING_INVERT_MASK;
    26c8:	8c e1       	ldi	r24, 0x1C	; 28
    26ca:	80 93 f2 06 	sts	0x06F2, r24
  settings.max_jerk = DEFAULT_MAX_JERK;
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	a6 e9       	ldi	r26, 0x96	; 150
    26d4:	b3 e4       	ldi	r27, 0x43	; 67
    26d6:	80 93 fb 06 	sts	0x06FB, r24
    26da:	90 93 fc 06 	sts	0x06FC, r25
    26de:	a0 93 fd 06 	sts	0x06FD, r26
    26e2:	b0 93 fe 06 	sts	0x06FE, r27
}
    26e6:	08 95       	ret

000026e8 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 61 03 	call	0x6c2	; 0x6c2 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	81 f4       	brne	.+32     	; 0x2714 <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    26f4:	8c ed       	ldi	r24, 0xDC	; 220
    26f6:	96 e0       	ldi	r25, 0x06	; 6
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	43 e2       	ldi	r20, 0x23	; 35
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	0e 94 cd 03 	call	0x79a	; 0x79a <memcpy_from_eeprom_with_checksum>
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	89 2b       	or	r24, r25
    2708:	09 f4       	brne	.+2      	; 0x270c <read_settings+0x24>
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	28 27       	eor	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	29 c0       	rjmp	.+82     	; 0x2766 <read_settings+0x7e>
      return(false);
    }
  } else if (version == 1) {
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	29 f5       	brne	.+74     	; 0x2762 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2718:	8c ed       	ldi	r24, 0xDC	; 220
    271a:	96 e0       	ldi	r25, 0x06	; 6
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	4b e1       	ldi	r20, 0x1B	; 27
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	0e 94 cd 03 	call	0x79a	; 0x79a <memcpy_from_eeprom_with_checksum>
    2728:	89 2b       	or	r24, r25
    272a:	d9 f0       	breq	.+54     	; 0x2762 <read_settings+0x7a>
      return(false);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a8 e4       	ldi	r26, 0x48	; 72
    2732:	b2 e4       	ldi	r27, 0x42	; 66
    2734:	80 93 f7 06 	sts	0x06F7, r24
    2738:	90 93 f8 06 	sts	0x06F8, r25
    273c:	a0 93 f9 06 	sts	0x06F9, r26
    2740:	b0 93 fa 06 	sts	0x06FA, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a6 e9       	ldi	r26, 0x96	; 150
    274a:	b3 e4       	ldi	r27, 0x43	; 67
    274c:	80 93 fb 06 	sts	0x06FB, r24
    2750:	90 93 fc 06 	sts	0x06FC, r25
    2754:	a0 93 fd 06 	sts	0x06FD, r26
    2758:	b0 93 fe 06 	sts	0x06FE, r27
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <read_settings+0x7e>
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
  } else {      
    return(false);
  }
  return(true);
}
    2766:	c9 01       	movw	r24, r18
    2768:	08 95       	ret

0000276a <write_settings>:
  settings_store_setting(parameter, value);
  return(STATUS_OK);
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	0e 94 69 03 	call	0x6d2	; 0x6d2 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	6c ed       	ldi	r22, 0xDC	; 220
    277a:	76 e0       	ldi	r23, 0x06	; 6
    277c:	43 e2       	ldi	r20, 0x23	; 35
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	0e 94 84 03 	call	0x708	; 0x708 <memcpy_to_eeprom_with_checksum>
}
    2784:	08 95       	ret

00002786 <settings_store_setting>:
  }
  return(true);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	ec 01       	movw	r28, r24
    2794:	7a 01       	movw	r14, r20
    2796:	8b 01       	movw	r16, r22
  switch(parameter) {
    2798:	85 30       	cpi	r24, 0x05	; 5
    279a:	91 05       	cpc	r25, r1
    279c:	09 f4       	brne	.+2      	; 0x27a0 <settings_store_setting+0x1a>
    279e:	46 c0       	rjmp	.+140    	; 0x282c <settings_store_setting+0xa6>
    27a0:	86 30       	cpi	r24, 0x06	; 6
    27a2:	91 05       	cpc	r25, r1
    27a4:	4c f4       	brge	.+18     	; 0x27b8 <settings_store_setting+0x32>
    27a6:	83 30       	cpi	r24, 0x03	; 3
    27a8:	91 05       	cpc	r25, r1
    27aa:	71 f1       	breq	.+92     	; 0x2808 <settings_store_setting+0x82>
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	91 05       	cpc	r25, r1
    27b0:	a4 f5       	brge	.+104    	; 0x281a <settings_store_setting+0x94>
    27b2:	97 ff       	sbrs	r25, 7
    27b4:	11 c0       	rjmp	.+34     	; 0x27d8 <settings_store_setting+0x52>
    27b6:	6a c0       	rjmp	.+212    	; 0x288c <settings_store_setting+0x106>
    27b8:	87 30       	cpi	r24, 0x07	; 7
    27ba:	91 05       	cpc	r25, r1
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <settings_store_setting+0x3a>
    27be:	48 c0       	rjmp	.+144    	; 0x2850 <settings_store_setting+0xca>
    27c0:	87 30       	cpi	r24, 0x07	; 7
    27c2:	91 05       	cpc	r25, r1
    27c4:	e4 f1       	brlt	.+120    	; 0x283e <settings_store_setting+0xb8>
    27c6:	88 30       	cpi	r24, 0x08	; 8
    27c8:	91 05       	cpc	r25, r1
    27ca:	09 f4       	brne	.+2      	; 0x27ce <settings_store_setting+0x48>
    27cc:	4a c0       	rjmp	.+148    	; 0x2862 <settings_store_setting+0xdc>
    27ce:	89 30       	cpi	r24, 0x09	; 9
    27d0:	91 05       	cpc	r25, r1
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <settings_store_setting+0x50>
    27d4:	5b c0       	rjmp	.+182    	; 0x288c <settings_store_setting+0x106>
    27d6:	4e c0       	rjmp	.+156    	; 0x2874 <settings_store_setting+0xee>
    case 0: case 1: case 2:
    if (value <= 0.0) {
    27d8:	cb 01       	movw	r24, r22
    27da:	ba 01       	movw	r22, r20
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	1c f0       	brlt	.+6      	; 0x27f2 <settings_store_setting+0x6c>
      printPgmString(PSTR("Steps/mm must be > 0.0\r\n"));
    27ec:	86 e3       	ldi	r24, 0x36	; 54
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	54 c0       	rjmp	.+168    	; 0x289a <settings_store_setting+0x114>
      return;
    }
    settings.steps_per_mm[parameter] = value; break;
    27f2:	cc 0f       	add	r28, r28
    27f4:	dd 1f       	adc	r29, r29
    27f6:	cc 0f       	add	r28, r28
    27f8:	dd 1f       	adc	r29, r29
    27fa:	c4 52       	subi	r28, 0x24	; 36
    27fc:	d9 4f       	sbci	r29, 0xF9	; 249
    27fe:	e8 82       	st	Y, r14
    2800:	f9 82       	std	Y+1, r15	; 0x01
    2802:	0a 83       	std	Y+2, r16	; 0x02
    2804:	1b 83       	std	Y+3, r17	; 0x03
    2806:	45 c0       	rjmp	.+138    	; 0x2892 <settings_store_setting+0x10c>
    case 3: settings.pulse_microseconds = round(value); break;
    2808:	cb 01       	movw	r24, r22
    280a:	ba 01       	movw	r22, r20
    280c:	0e 94 a9 20 	call	0x4152	; 0x4152 <round>
    2810:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    2814:	60 93 e9 06 	sts	0x06E9, r22
    2818:	3c c0       	rjmp	.+120    	; 0x2892 <settings_store_setting+0x10c>
    case 4: settings.default_feed_rate = value; break;
    281a:	40 93 ea 06 	sts	0x06EA, r20
    281e:	50 93 eb 06 	sts	0x06EB, r21
    2822:	60 93 ec 06 	sts	0x06EC, r22
    2826:	70 93 ed 06 	sts	0x06ED, r23
    282a:	33 c0       	rjmp	.+102    	; 0x2892 <settings_store_setting+0x10c>
    case 5: settings.default_seek_rate = value; break;
    282c:	40 93 ee 06 	sts	0x06EE, r20
    2830:	50 93 ef 06 	sts	0x06EF, r21
    2834:	60 93 f0 06 	sts	0x06F0, r22
    2838:	70 93 f1 06 	sts	0x06F1, r23
    283c:	2a c0       	rjmp	.+84     	; 0x2892 <settings_store_setting+0x10c>
    case 6: settings.mm_per_arc_segment = value; break;
    283e:	40 93 f3 06 	sts	0x06F3, r20
    2842:	50 93 f4 06 	sts	0x06F4, r21
    2846:	60 93 f5 06 	sts	0x06F5, r22
    284a:	70 93 f6 06 	sts	0x06F6, r23
    284e:	21 c0       	rjmp	.+66     	; 0x2892 <settings_store_setting+0x10c>
    case 7: settings.invert_mask = trunc(value); break;
    2850:	cb 01       	movw	r24, r22
    2852:	ba 01       	movw	r22, r20
    2854:	0e 94 14 21 	call	0x4228	; 0x4228 <trunc>
    2858:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    285c:	60 93 f2 06 	sts	0x06F2, r22
    2860:	18 c0       	rjmp	.+48     	; 0x2892 <settings_store_setting+0x10c>
    case 8: settings.acceleration = value; break;
    2862:	40 93 f7 06 	sts	0x06F7, r20
    2866:	50 93 f8 06 	sts	0x06F8, r21
    286a:	60 93 f9 06 	sts	0x06F9, r22
    286e:	70 93 fa 06 	sts	0x06FA, r23
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <settings_store_setting+0x10c>
    case 9: settings.max_jerk = fabs(value); break;
    2874:	db 01       	movw	r26, r22
    2876:	ca 01       	movw	r24, r20
    2878:	bf 77       	andi	r27, 0x7F	; 127
    287a:	80 93 fb 06 	sts	0x06FB, r24
    287e:	90 93 fc 06 	sts	0x06FC, r25
    2882:	a0 93 fd 06 	sts	0x06FD, r26
    2886:	b0 93 fe 06 	sts	0x06FE, r27
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <settings_store_setting+0x10c>
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    288c:	82 e2       	ldi	r24, 0x22	; 34
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	04 c0       	rjmp	.+8      	; 0x289a <settings_store_setting+0x114>
      return;
  }
  write_settings();
    2892:	0e 94 b5 13 	call	0x276a	; 0x276a <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2896:	8d e0       	ldi	r24, 0x0D	; 13
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
}
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	08 95       	ret

000028ac <settings_dump>:
  settings.invert_mask = DEFAULT_STEPPING_INVERT_MASK;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$0 = ")); printFloat(settings.steps_per_mm[X_AXIS]);
    28ac:	89 ed       	ldi	r24, 0xD9	; 217
    28ae:	92 e0       	ldi	r25, 0x02	; 2
    28b0:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    28b4:	60 91 dc 06 	lds	r22, 0x06DC
    28b8:	70 91 dd 06 	lds	r23, 0x06DD
    28bc:	80 91 de 06 	lds	r24, 0x06DE
    28c0:	90 91 df 06 	lds	r25, 0x06DF
    28c4:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n$1 = ")); printFloat(settings.steps_per_mm[Y_AXIS]);
    28c8:	84 ec       	ldi	r24, 0xC4	; 196
    28ca:	92 e0       	ldi	r25, 0x02	; 2
    28cc:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    28d0:	60 91 e0 06 	lds	r22, 0x06E0
    28d4:	70 91 e1 06 	lds	r23, 0x06E1
    28d8:	80 91 e2 06 	lds	r24, 0x06E2
    28dc:	90 91 e3 06 	lds	r25, 0x06E3
    28e0:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n$2 = ")); printFloat(settings.steps_per_mm[Z_AXIS]);
    28e4:	8f ea       	ldi	r24, 0xAF	; 175
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    28ec:	60 91 e4 06 	lds	r22, 0x06E4
    28f0:	70 91 e5 06 	lds	r23, 0x06E5
    28f4:	80 91 e6 06 	lds	r24, 0x06E6
    28f8:	90 91 e7 06 	lds	r25, 0x06E7
    28fc:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n$3 = ")); printInteger(settings.pulse_microseconds);
    2900:	8a e9       	ldi	r24, 0x9A	; 154
    2902:	92 e0       	ldi	r25, 0x02	; 2
    2904:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    2908:	60 91 e9 06 	lds	r22, 0x06E9
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 15 03 	call	0x62a	; 0x62a <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n$4 = ")); printFloat(settings.default_feed_rate);
    2916:	88 e7       	ldi	r24, 0x78	; 120
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    291e:	60 91 ea 06 	lds	r22, 0x06EA
    2922:	70 91 eb 06 	lds	r23, 0x06EB
    2926:	80 91 ec 06 	lds	r24, 0x06EC
    292a:	90 91 ed 06 	lds	r25, 0x06ED
    292e:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n$5 = ")); printFloat(settings.default_seek_rate);
    2932:	85 e5       	ldi	r24, 0x55	; 85
    2934:	92 e0       	ldi	r25, 0x02	; 2
    2936:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    293a:	60 91 ee 06 	lds	r22, 0x06EE
    293e:	70 91 ef 06 	lds	r23, 0x06EF
    2942:	80 91 f0 06 	lds	r24, 0x06F0
    2946:	90 91 f1 06 	lds	r25, 0x06F1
    294a:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n$6 = ")); printFloat(settings.mm_per_arc_segment);
    294e:	82 e3       	ldi	r24, 0x32	; 50
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    2956:	60 91 f3 06 	lds	r22, 0x06F3
    295a:	70 91 f4 06 	lds	r23, 0x06F4
    295e:	80 91 f5 06 	lds	r24, 0x06F5
    2962:	90 91 f6 06 	lds	r25, 0x06F6
    2966:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n$7 = ")); printInteger(settings.invert_mask); 
    296a:	89 e1       	ldi	r24, 0x19	; 25
    296c:	92 e0       	ldi	r25, 0x02	; 2
    296e:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    2972:	60 91 f2 06 	lds	r22, 0x06F2
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 15 03 	call	0x62a	; 0x62a <printInteger>
  printPgmString(PSTR(" (step port invert mask. binary = ")); printIntegerInBase(settings.invert_mask, 2);  
    2980:	86 ef       	ldi	r24, 0xF6	; 246
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    2988:	60 91 f2 06 	lds	r22, 0x06F2
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	22 e0       	ldi	r18, 0x02	; 2
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	0e 94 91 02 	call	0x522	; 0x522 <printIntegerInBase>
  printPgmString(PSTR(")\r\n$8 = ")); printFloat(settings.acceleration);
    299e:	8d ee       	ldi	r24, 0xED	; 237
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    29a6:	60 91 f7 06 	lds	r22, 0x06F7
    29aa:	70 91 f8 06 	lds	r23, 0x06F8
    29ae:	80 91 f9 06 	lds	r24, 0x06F9
    29b2:	90 91 fa 06 	lds	r25, 0x06FA
    29b6:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n$9 = ")); printFloat(settings.max_jerk);
    29ba:	8a ec       	ldi	r24, 0xCA	; 202
    29bc:	91 e0       	ldi	r25, 0x01	; 1
    29be:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    29c2:	60 91 fb 06 	lds	r22, 0x06FB
    29c6:	70 91 fc 06 	lds	r23, 0x06FC
    29ca:	80 91 fd 06 	lds	r24, 0x06FD
    29ce:	90 91 fe 06 	lds	r25, 0x06FE
    29d2:	0e 94 2c 03 	call	0x658	; 0x658 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)"));
    29d6:	84 e9       	ldi	r24, 0x94	; 148
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    29de:	8f e4       	ldi	r24, 0x4F	; 79
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
}
    29e6:	08 95       	ret

000029e8 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    29e8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <read_settings>
    29ec:	89 2b       	or	r24, r25
    29ee:	29 f0       	breq	.+10     	; 0x29fa <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    29f0:	8e ee       	ldi	r24, 0xEE	; 238
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    29f8:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    29fa:	83 eb       	ldi	r24, 0xB3	; 179
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    settings_reset();
    2a02:	0e 94 19 13 	call	0x2632	; 0x2632 <settings_reset>
    write_settings();
    2a06:	0e 94 b5 13 	call	0x276a	; 0x276a <write_settings>
    settings_dump();
    2a0a:	0e 94 56 14 	call	0x28ac	; 0x28ac <settings_dump>
    2a0e:	08 95       	ret

00002a10 <settings_execute_line>:
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)"));
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

// Parameter lines are on the form '$4=374.3' or '$' to dump current settings
uint8_t settings_execute_line(char *line) {
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	29 97       	sbiw	r28, 0x09	; 9
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	8c 01       	movw	r16, r24
  uint8_t char_counter = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
  double parameter, value;
  if(line[0] != '$') { 
    2a32:	f8 01       	movw	r30, r16
    2a34:	80 81       	ld	r24, Z
    2a36:	84 32       	cpi	r24, 0x24	; 36
    2a38:	e1 f5       	brne	.+120    	; 0x2ab2 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(line[char_counter] == 0) { 
    2a3a:	81 81       	ldd	r24, Z+1	; 0x01
    2a3c:	88 23       	and	r24, r24
    2a3e:	19 f4       	brne	.+6      	; 0x2a46 <settings_execute_line+0x36>
    settings_dump(); return(STATUS_OK); 
    2a40:	0e 94 56 14 	call	0x28ac	; 0x28ac <settings_dump>
    2a44:	34 c0       	rjmp	.+104    	; 0x2aae <settings_execute_line+0x9e>
  }
  if(!read_double(line, &char_counter, &parameter)) {
    2a46:	c8 01       	movw	r24, r16
    2a48:	7e 01       	movw	r14, r28
    2a4a:	08 94       	sec
    2a4c:	e1 1c       	adc	r14, r1
    2a4e:	f1 1c       	adc	r15, r1
    2a50:	b7 01       	movw	r22, r14
    2a52:	ae 01       	movw	r20, r28
    2a54:	4e 5f       	subi	r20, 0xFE	; 254
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	0e 94 40 19 	call	0x3280	; 0x3280 <read_double>
    2a5c:	89 2b       	or	r24, r25
    2a5e:	59 f1       	breq	.+86     	; 0x2ab6 <settings_execute_line+0xa6>
    return(STATUS_BAD_NUMBER_FORMAT);
  };
  if(line[char_counter++] != '=') { 
    2a60:	99 81       	ldd	r25, Y+1	; 0x01
    2a62:	f8 01       	movw	r30, r16
    2a64:	e9 0f       	add	r30, r25
    2a66:	f1 1d       	adc	r31, r1
    2a68:	80 81       	ld	r24, Z
    2a6a:	8d 33       	cpi	r24, 0x3D	; 61
    2a6c:	11 f5       	brne	.+68     	; 0x2ab2 <settings_execute_line+0xa2>
    2a6e:	9f 5f       	subi	r25, 0xFF	; 255
    2a70:	99 83       	std	Y+1, r25	; 0x01
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(!read_double(line, &char_counter, &value)) {
    2a72:	c8 01       	movw	r24, r16
    2a74:	b7 01       	movw	r22, r14
    2a76:	ae 01       	movw	r20, r28
    2a78:	4a 5f       	subi	r20, 0xFA	; 250
    2a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7c:	0e 94 40 19 	call	0x3280	; 0x3280 <read_double>
    2a80:	89 2b       	or	r24, r25
    2a82:	c9 f0       	breq	.+50     	; 0x2ab6 <settings_execute_line+0xa6>
    return(STATUS_BAD_NUMBER_FORMAT);
  }
  if(line[char_counter] != 0) { 
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	08 0f       	add	r16, r24
    2a88:	11 1d       	adc	r17, r1
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 23       	and	r24, r24
    2a90:	81 f4       	brne	.+32     	; 0x2ab2 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  settings_store_setting(parameter, value);
    2a92:	6a 81       	ldd	r22, Y+2	; 0x02
    2a94:	7b 81       	ldd	r23, Y+3	; 0x03
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9a:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fixsfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	4e 81       	ldd	r20, Y+6	; 0x06
    2aa4:	5f 81       	ldd	r21, Y+7	; 0x07
    2aa6:	68 85       	ldd	r22, Y+8	; 0x08
    2aa8:	79 85       	ldd	r23, Y+9	; 0x09
    2aaa:	0e 94 c3 13 	call	0x2786	; 0x2786 <settings_store_setting>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <settings_execute_line+0xa8>
  return(STATUS_OK);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <settings_execute_line+0xa8>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
}
    2ab8:	29 96       	adiw	r28, 0x09	; 9
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	08 95       	ret

00002ad2 <spindle_run>:
{
  spindle_run(0, 0);
}

void spindle_run(int direction, uint32_t rpm) 
{
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	ec 01       	movw	r28, r24
  if (direction != current_direction) {
    2ad8:	80 91 54 05 	lds	r24, 0x0554
    2adc:	90 91 55 05 	lds	r25, 0x0555
    2ae0:	c8 17       	cp	r28, r24
    2ae2:	d9 07       	cpc	r29, r25
    2ae4:	89 f0       	breq	.+34     	; 0x2b08 <spindle_run+0x36>
    st_synchronize();
    2ae6:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <st_synchronize>
    if(direction) {
    2aea:	20 97       	sbiw	r28, 0x00	; 0
    2aec:	41 f0       	breq	.+16     	; 0x2afe <spindle_run+0x2c>
      if(direction > 0) {
    2aee:	1c 16       	cp	r1, r28
    2af0:	1d 06       	cpc	r1, r29
    2af2:	14 f4       	brge	.+4      	; 0x2af8 <spindle_run+0x26>
        SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2af4:	2d 98       	cbi	0x05, 5	; 5
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <spindle_run+0x28>
      } else {
        SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2af8:	2d 9a       	sbi	0x05, 5	; 5
      }
      SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2afa:	2c 9a       	sbi	0x05, 4	; 5
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <spindle_run+0x2e>
    } else {
      SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);      
    2afe:	2c 98       	cbi	0x05, 4	; 5
    }
    current_direction = direction;
    2b00:	d0 93 55 05 	sts	0x0555, r29
    2b04:	c0 93 54 05 	sts	0x0554, r28
  }
}
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	08 95       	ret

00002b0e <spindle_stop>:

void spindle_stop()
{
  spindle_run(0, 0);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <spindle_run>
}
    2b1e:	08 95       	ret

00002b20 <spindle_init>:

static int current_direction;

void spindle_init()
{
  spindle_run(0, 0);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <spindle_run>
}
    2b30:	08 95       	ret

00002b32 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

static void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
    2b32:	28 98       	cbi	0x05, 0	; 5
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2b34:	ef e6       	ldi	r30, 0x6F	; 111
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	82 60       	ori	r24, 0x02	; 2
    2b3c:	80 83       	st	Z, r24
}
    2b3e:	08 95       	ret

00002b40 <st_disable_steppers>:

void st_disable_steppers() {
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    2b40:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2b42:	ef e6       	ldi	r30, 0x6F	; 111
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	8d 7f       	andi	r24, 0xFD	; 253
    2b4a:	80 83       	st	Z, r24
}
    2b4c:	08 95       	ret

00002b4e <__vector_9>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	8f 93       	push	r24
    2b5a:	9f 93       	push	r25
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (settings.invert_mask & STEP_MASK); 
    2b5c:	9b b1       	in	r25, 0x0b	; 11
    2b5e:	80 91 f2 06 	lds	r24, 0x06F2
    2b62:	8c 71       	andi	r24, 0x1C	; 28
    2b64:	93 7e       	andi	r25, 0xE3	; 227
    2b66:	89 2b       	or	r24, r25
    2b68:	8b b9       	out	0x0b, r24	; 11
}
    2b6a:	9f 91       	pop	r25
    2b6c:	8f 91       	pop	r24
    2b6e:	0f 90       	pop	r0
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	0f 90       	pop	r0
    2b74:	1f 90       	pop	r1
    2b76:	18 95       	reti

00002b78 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

static void set_step_events_per_minute(uint32_t steps_per_minute) {
    2b78:	9b 01       	movw	r18, r22
    2b7a:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2b7c:	20 3b       	cpi	r18, 0xB0	; 176
    2b7e:	84 e0       	ldi	r24, 0x04	; 4
    2b80:	38 07       	cpc	r19, r24
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	48 07       	cpc	r20, r24
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	58 07       	cpc	r21, r24
    2b8a:	20 f4       	brcc	.+8      	; 0x2b94 <set_step_events_per_minute+0x1c>
    2b8c:	20 eb       	ldi	r18, 0xB0	; 176
    2b8e:	34 e0       	ldi	r19, 0x04	; 4
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2b94:	60 e0       	ldi	r22, 0x00	; 0
    2b96:	70 e7       	ldi	r23, 0x70	; 112
    2b98:	88 e3       	ldi	r24, 0x38	; 56
    2b9a:	99 e3       	ldi	r25, 0x39	; 57
    2b9c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__udivmodsi4>
    2ba0:	c9 01       	movw	r24, r18
    2ba2:	da 01       	movw	r26, r20
static uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2ba4:	80 30       	cpi	r24, 0x00	; 0
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	92 07       	cpc	r25, r18
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	a2 07       	cpc	r26, r18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	b2 07       	cpc	r27, r18
    2bb2:	38 f4       	brcc	.+14     	; 0x2bc2 <set_step_events_per_minute+0x4a>
		ceiling = cycles;
    2bb4:	fc 01       	movw	r30, r24
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2bb6:	9c 01       	movw	r18, r24
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	31 c0       	rjmp	.+98     	; 0x2c24 <set_step_events_per_minute+0xac>
	} else if (cycles <= 0x7ffffL) {
    2bc2:	80 30       	cpi	r24, 0x00	; 0
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	92 07       	cpc	r25, r18
    2bc8:	28 e0       	ldi	r18, 0x08	; 8
    2bca:	a2 07       	cpc	r26, r18
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	b2 07       	cpc	r27, r18
    2bd0:	a8 f4       	brcc	.+42     	; 0x2bfc <set_step_events_per_minute+0x84>
    ceiling = cycles >> 3;
    2bd2:	73 e0       	ldi	r23, 0x03	; 3
    2bd4:	b6 95       	lsr	r27
    2bd6:	a7 95       	ror	r26
    2bd8:	97 95       	ror	r25
    2bda:	87 95       	ror	r24
    2bdc:	7a 95       	dec	r23
    2bde:	d1 f7       	brne	.-12     	; 0x2bd4 <set_step_events_per_minute+0x5c>
    2be0:	fc 01       	movw	r30, r24
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2be2:	9c 01       	movw	r18, r24
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	63 e0       	ldi	r22, 0x03	; 3
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	44 1f       	adc	r20, r20
    2bf0:	55 1f       	adc	r21, r21
    2bf2:	6a 95       	dec	r22
    2bf4:	d1 f7       	brne	.-12     	; 0x2bea <set_step_events_per_minute+0x72>
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <set_step_events_per_minute+0xac>
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    2bfc:	26 e0       	ldi	r18, 0x06	; 6
    2bfe:	b6 95       	lsr	r27
    2c00:	a7 95       	ror	r26
    2c02:	97 95       	ror	r25
    2c04:	87 95       	ror	r24
    2c06:	2a 95       	dec	r18
    2c08:	d1 f7       	brne	.-12     	; 0x2bfe <set_step_events_per_minute+0x86>
    2c0a:	fc 01       	movw	r30, r24
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2c0c:	9c 01       	movw	r18, r24
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	86 e0       	ldi	r24, 0x06	; 6
    2c14:	22 0f       	add	r18, r18
    2c16:	33 1f       	adc	r19, r19
    2c18:	44 1f       	adc	r20, r20
    2c1a:	55 1f       	adc	r21, r21
    2c1c:	8a 95       	dec	r24
    2c1e:	d1 f7       	brne	.-12     	; 0x2c14 <set_step_events_per_minute+0x9c>
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	70 e0       	ldi	r23, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2c24:	80 91 81 00 	lds	r24, 0x0081
    2c28:	96 2f       	mov	r25, r22
    2c2a:	9f 5f       	subi	r25, 0xFF	; 255
    2c2c:	88 7f       	andi	r24, 0xF8	; 248
    2c2e:	98 2b       	or	r25, r24
    2c30:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2c34:	f0 93 89 00 	sts	0x0089, r31
    2c38:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}

static void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2c3c:	20 93 6b 05 	sts	0x056B, r18
    2c40:	30 93 6c 05 	sts	0x056C, r19
    2c44:	40 93 6d 05 	sts	0x056D, r20
    2c48:	50 93 6e 05 	sts	0x056E, r21
}
    2c4c:	08 95       	ret

00002c4e <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR   |= STEPPING_MASK;
    2c4e:	8a b1       	in	r24, 0x0a	; 10
    2c50:	8c 6f       	ori	r24, 0xFC	; 252
    2c52:	8a b9       	out	0x0a, r24	; 10
  STEPPING_PORT = (STEPPING_PORT & ~STEPPING_MASK) | settings.invert_mask;
    2c54:	8b b1       	in	r24, 0x0b	; 11
    2c56:	83 70       	andi	r24, 0x03	; 3
    2c58:	90 91 f2 06 	lds	r25, 0x06F2
    2c5c:	89 2b       	or	r24, r25
    2c5e:	8b b9       	out	0x0b, r24	; 11
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2c60:	20 9a       	sbi	0x04, 0	; 4
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2c62:	e1 e8       	ldi	r30, 0x81	; 129
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	8f 7e       	andi	r24, 0xEF	; 239
    2c6a:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 60       	ori	r24, 0x08	; 8
    2c70:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2c72:	e0 e8       	ldi	r30, 0x80	; 128
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	8d 7f       	andi	r24, 0xFD	; 253
    2c7a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8e 7f       	andi	r24, 0xFE	; 254
    2c80:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2c82:	80 81       	ld	r24, Z
    2c84:	8f 73       	andi	r24, 0x3F	; 63
    2c86:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 7c       	andi	r24, 0xCF	; 207
    2c8c:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2c8e:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2c98:	e0 e7       	ldi	r30, 0x70	; 112
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	81 60       	ori	r24, 0x01	; 1
    2ca0:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2ca2:	60 e7       	ldi	r22, 0x70	; 112
    2ca4:	77 e1       	ldi	r23, 0x17	; 23
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <set_step_events_per_minute>
  trapezoid_tick_cycle_counter = 0;
    2cae:	10 92 6f 05 	sts	0x056F, r1
    2cb2:	10 92 70 05 	sts	0x0570, r1
    2cb6:	10 92 71 05 	sts	0x0571, r1
    2cba:	10 92 72 05 	sts	0x0572, r1
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
}

void st_disable_steppers() {
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    2cbe:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2cc0:	ef e6       	ldi	r30, 0x6F	; 111
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8d 7f       	andi	r24, 0xFD	; 253
    2cc8:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
  st_disable_steppers();
//  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
//  DISABLE_STEPPER_DRIVER_INTERRUPT();  
       
  sei();
    2cca:	78 94       	sei
}
    2ccc:	08 95       	ret

00002cce <st_go_home>:
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
}

void st_go_home()
{
    2cce:	ef 92       	push	r14
    2cd0:	ff 92       	push	r15
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
  limits_go_home();  
    2cd6:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <limits_go_home>
  plan_set_current_position(0,0,0);
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9b 01       	movw	r18, r22
    2ce4:	ac 01       	movw	r20, r24
    2ce6:	7b 01       	movw	r14, r22
    2ce8:	8c 01       	movw	r16, r24
    2cea:	0e 94 48 0c 	call	0x1890	; 0x1890 <plan_set_current_position>
}
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	08 95       	ret

00002cf8 <st_synchronize>:
  sei();
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2cf8:	07 c0       	rjmp	.+14     	; 0x2d08 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2cfa:	83 b7       	in	r24, 0x33	; 51
    2cfc:	81 60       	ori	r24, 0x01	; 1
    2cfe:	83 bf       	out	0x33, r24	; 51
    2d00:	88 95       	sleep
    2d02:	83 b7       	in	r24, 0x33	; 51
    2d04:	8e 7f       	andi	r24, 0xFE	; 254
    2d06:	83 bf       	out	0x33, r24	; 51
    2d08:	0e 94 35 0c 	call	0x186a	; 0x186a <plan_get_current_block>
    2d0c:	89 2b       	or	r24, r25
    2d0e:	a9 f7       	brne	.-22     	; 0x2cfa <st_synchronize+0x2>
}
    2d10:	08 95       	ret

00002d12 <__vector_11>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2d12:	1f 92       	push	r1
    2d14:	0f 92       	push	r0
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	0f 92       	push	r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	2f 93       	push	r18
    2d26:	3f 93       	push	r19
    2d28:	4f 93       	push	r20
    2d2a:	5f 93       	push	r21
    2d2c:	6f 93       	push	r22
    2d2e:	7f 93       	push	r23
    2d30:	8f 93       	push	r24
    2d32:	9f 93       	push	r25
    2d34:	af 93       	push	r26
    2d36:	bf 93       	push	r27
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabeling this interrupt while we are in it
  
  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2d40:	80 91 69 05 	lds	r24, 0x0569
    2d44:	90 91 6a 05 	lds	r25, 0x056A
    2d48:	89 2b       	or	r24, r25
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__vector_11+0x3c>
    2d4c:	fc c1       	rjmp	.+1016   	; 0x3146 <__vector_11+0x434>
  // Set the direction pins a cuple of nanoseconds before we step the steppers
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    2d4e:	9b b1       	in	r25, 0x0b	; 11
    2d50:	20 91 58 05 	lds	r18, 0x0558
    2d54:	82 2f       	mov	r24, r18
    2d56:	80 7e       	andi	r24, 0xE0	; 224
    2d58:	9f 71       	andi	r25, 0x1F	; 31
    2d5a:	89 2b       	or	r24, r25
    2d5c:	8b b9       	out	0x0b, r24	; 11
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2d5e:	8b b1       	in	r24, 0x0b	; 11
    2d60:	83 7e       	andi	r24, 0xE3	; 227
    2d62:	82 2b       	or	r24, r18
    2d64:	8b b9       	out	0x0b, r24	; 11
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2d66:	80 91 e9 06 	lds	r24, 0x06E9
    2d6a:	88 0f       	add	r24, r24
    2d6c:	84 50       	subi	r24, 0x04	; 4
    2d6e:	81 95       	neg	r24
    2d70:	80 93 b2 00 	sts	0x00B2, r24

  busy = true;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	90 93 6a 05 	sts	0x056A, r25
    2d7c:	80 93 69 05 	sts	0x0569, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2d80:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2d82:	80 91 56 05 	lds	r24, 0x0556
    2d86:	90 91 57 05 	lds	r25, 0x0557
    2d8a:	89 2b       	or	r24, r25
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <__vector_11+0x7e>
    2d8e:	56 c0       	rjmp	.+172    	; 0x2e3c <__vector_11+0x12a>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2d90:	0e 94 35 0c 	call	0x186a	; 0x186a <plan_get_current_block>
    2d94:	ec 01       	movw	r28, r24
    2d96:	90 93 57 05 	sts	0x0557, r25
    2d9a:	80 93 56 05 	sts	0x0556, r24
    if (current_block != NULL) {
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_11+0x92>
    2da2:	46 c0       	rjmp	.+140    	; 0x2e30 <__vector_11+0x11e>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    2da4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2da6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2daa:	98 a9       	ldd	r25, Y+48	; 0x30
    2dac:	60 93 73 05 	sts	0x0573, r22
    2db0:	70 93 74 05 	sts	0x0574, r23
    2db4:	80 93 75 05 	sts	0x0575, r24
    2db8:	90 93 76 05 	sts	0x0576, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    2dbc:	10 92 6f 05 	sts	0x056F, r1
    2dc0:	10 92 70 05 	sts	0x0570, r1
    2dc4:	10 92 71 05 	sts	0x0571, r1
    2dc8:	10 92 72 05 	sts	0x0572, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    2dcc:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd4:	af 85       	ldd	r26, Y+15	; 0x0f
    2dd6:	b8 89       	ldd	r27, Y+16	; 0x10
    2dd8:	b5 95       	asr	r27
    2dda:	a7 95       	ror	r26
    2ddc:	97 95       	ror	r25
    2dde:	87 95       	ror	r24
    2de0:	b0 95       	com	r27
    2de2:	a0 95       	com	r26
    2de4:	90 95       	com	r25
    2de6:	81 95       	neg	r24
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	af 4f       	sbci	r26, 0xFF	; 255
    2dec:	bf 4f       	sbci	r27, 0xFF	; 255
    2dee:	80 93 59 05 	sts	0x0559, r24
    2df2:	90 93 5a 05 	sts	0x055A, r25
    2df6:	a0 93 5b 05 	sts	0x055B, r26
    2dfa:	b0 93 5c 05 	sts	0x055C, r27
      counter_y = counter_x;
    2dfe:	80 93 5d 05 	sts	0x055D, r24
    2e02:	90 93 5e 05 	sts	0x055E, r25
    2e06:	a0 93 5f 05 	sts	0x055F, r26
    2e0a:	b0 93 60 05 	sts	0x0560, r27
      counter_z = counter_x;
    2e0e:	80 93 61 05 	sts	0x0561, r24
    2e12:	90 93 62 05 	sts	0x0562, r25
    2e16:	a0 93 63 05 	sts	0x0563, r26
    2e1a:	b0 93 64 05 	sts	0x0564, r27
      step_events_completed = 0;
    2e1e:	10 92 65 05 	sts	0x0565, r1
    2e22:	10 92 66 05 	sts	0x0566, r1
    2e26:	10 92 67 05 	sts	0x0567, r1
    2e2a:	10 92 68 05 	sts	0x0568, r1
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <__vector_11+0x12a>
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
}

void st_disable_steppers() {
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    2e30:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2e32:	80 91 6f 00 	lds	r24, 0x006F
    2e36:	8d 7f       	andi	r24, 0xFD	; 253
    2e38:	80 93 6f 00 	sts	0x006F, r24
//      STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
//      DISABLE_STEPPER_DRIVER_INTERRUPT();
    }    
  } 

  if (current_block != NULL) {
    2e3c:	e0 91 56 05 	lds	r30, 0x0556
    2e40:	f0 91 57 05 	lds	r31, 0x0557
    2e44:	30 97       	sbiw	r30, 0x00	; 0
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <__vector_11+0x138>
    2e48:	ba c0       	rjmp	.+372    	; 0x2fbe <__vector_11+0x2ac>
    out_bits = current_block->direction_bits;
    2e4a:	64 85       	ldd	r22, Z+12	; 0x0c
    2e4c:	60 93 58 05 	sts	0x0558, r22
    counter_x += current_block->steps_x;
    2e50:	20 91 59 05 	lds	r18, 0x0559
    2e54:	30 91 5a 05 	lds	r19, 0x055A
    2e58:	40 91 5b 05 	lds	r20, 0x055B
    2e5c:	50 91 5c 05 	lds	r21, 0x055C
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	a2 81       	ldd	r26, Z+2	; 0x02
    2e66:	b3 81       	ldd	r27, Z+3	; 0x03
    2e68:	28 0f       	add	r18, r24
    2e6a:	39 1f       	adc	r19, r25
    2e6c:	4a 1f       	adc	r20, r26
    2e6e:	5b 1f       	adc	r21, r27
    2e70:	20 93 59 05 	sts	0x0559, r18
    2e74:	30 93 5a 05 	sts	0x055A, r19
    2e78:	40 93 5b 05 	sts	0x055B, r20
    2e7c:	50 93 5c 05 	sts	0x055C, r21
    if (counter_x > 0) {
    2e80:	12 16       	cp	r1, r18
    2e82:	13 06       	cpc	r1, r19
    2e84:	14 06       	cpc	r1, r20
    2e86:	15 06       	cpc	r1, r21
    2e88:	9c f4       	brge	.+38     	; 0x2eb0 <__vector_11+0x19e>
      out_bits |= (1<<X_STEP_BIT);
    2e8a:	64 60       	ori	r22, 0x04	; 4
    2e8c:	60 93 58 05 	sts	0x0558, r22
      counter_x -= current_block->step_event_count;
    2e90:	85 85       	ldd	r24, Z+13	; 0x0d
    2e92:	96 85       	ldd	r25, Z+14	; 0x0e
    2e94:	a7 85       	ldd	r26, Z+15	; 0x0f
    2e96:	b0 89       	ldd	r27, Z+16	; 0x10
    2e98:	28 1b       	sub	r18, r24
    2e9a:	39 0b       	sbc	r19, r25
    2e9c:	4a 0b       	sbc	r20, r26
    2e9e:	5b 0b       	sbc	r21, r27
    2ea0:	20 93 59 05 	sts	0x0559, r18
    2ea4:	30 93 5a 05 	sts	0x055A, r19
    2ea8:	40 93 5b 05 	sts	0x055B, r20
    2eac:	50 93 5c 05 	sts	0x055C, r21
    }
    counter_y += current_block->steps_y;
    2eb0:	20 91 5d 05 	lds	r18, 0x055D
    2eb4:	30 91 5e 05 	lds	r19, 0x055E
    2eb8:	40 91 5f 05 	lds	r20, 0x055F
    2ebc:	50 91 60 05 	lds	r21, 0x0560
    2ec0:	84 81       	ldd	r24, Z+4	; 0x04
    2ec2:	95 81       	ldd	r25, Z+5	; 0x05
    2ec4:	a6 81       	ldd	r26, Z+6	; 0x06
    2ec6:	b7 81       	ldd	r27, Z+7	; 0x07
    2ec8:	28 0f       	add	r18, r24
    2eca:	39 1f       	adc	r19, r25
    2ecc:	4a 1f       	adc	r20, r26
    2ece:	5b 1f       	adc	r21, r27
    2ed0:	20 93 5d 05 	sts	0x055D, r18
    2ed4:	30 93 5e 05 	sts	0x055E, r19
    2ed8:	40 93 5f 05 	sts	0x055F, r20
    2edc:	50 93 60 05 	sts	0x0560, r21
    if (counter_y > 0) {
    2ee0:	12 16       	cp	r1, r18
    2ee2:	13 06       	cpc	r1, r19
    2ee4:	14 06       	cpc	r1, r20
    2ee6:	15 06       	cpc	r1, r21
    2ee8:	ac f4       	brge	.+42     	; 0x2f14 <__vector_11+0x202>
      out_bits |= (1<<Y_STEP_BIT);
    2eea:	80 91 58 05 	lds	r24, 0x0558
    2eee:	88 60       	ori	r24, 0x08	; 8
    2ef0:	80 93 58 05 	sts	0x0558, r24
      counter_y -= current_block->step_event_count;
    2ef4:	85 85       	ldd	r24, Z+13	; 0x0d
    2ef6:	96 85       	ldd	r25, Z+14	; 0x0e
    2ef8:	a7 85       	ldd	r26, Z+15	; 0x0f
    2efa:	b0 89       	ldd	r27, Z+16	; 0x10
    2efc:	28 1b       	sub	r18, r24
    2efe:	39 0b       	sbc	r19, r25
    2f00:	4a 0b       	sbc	r20, r26
    2f02:	5b 0b       	sbc	r21, r27
    2f04:	20 93 5d 05 	sts	0x055D, r18
    2f08:	30 93 5e 05 	sts	0x055E, r19
    2f0c:	40 93 5f 05 	sts	0x055F, r20
    2f10:	50 93 60 05 	sts	0x0560, r21
    }
    counter_z += current_block->steps_z;
    2f14:	20 91 61 05 	lds	r18, 0x0561
    2f18:	30 91 62 05 	lds	r19, 0x0562
    2f1c:	40 91 63 05 	lds	r20, 0x0563
    2f20:	50 91 64 05 	lds	r21, 0x0564
    2f24:	80 85       	ldd	r24, Z+8	; 0x08
    2f26:	91 85       	ldd	r25, Z+9	; 0x09
    2f28:	a2 85       	ldd	r26, Z+10	; 0x0a
    2f2a:	b3 85       	ldd	r27, Z+11	; 0x0b
    2f2c:	28 0f       	add	r18, r24
    2f2e:	39 1f       	adc	r19, r25
    2f30:	4a 1f       	adc	r20, r26
    2f32:	5b 1f       	adc	r21, r27
    2f34:	20 93 61 05 	sts	0x0561, r18
    2f38:	30 93 62 05 	sts	0x0562, r19
    2f3c:	40 93 63 05 	sts	0x0563, r20
    2f40:	50 93 64 05 	sts	0x0564, r21
    if (counter_z > 0) {
    2f44:	12 16       	cp	r1, r18
    2f46:	13 06       	cpc	r1, r19
    2f48:	14 06       	cpc	r1, r20
    2f4a:	15 06       	cpc	r1, r21
    2f4c:	ac f4       	brge	.+42     	; 0x2f78 <__vector_11+0x266>
      out_bits |= (1<<Z_STEP_BIT);
    2f4e:	80 91 58 05 	lds	r24, 0x0558
    2f52:	80 61       	ori	r24, 0x10	; 16
    2f54:	80 93 58 05 	sts	0x0558, r24
      counter_z -= current_block->step_event_count;
    2f58:	85 85       	ldd	r24, Z+13	; 0x0d
    2f5a:	96 85       	ldd	r25, Z+14	; 0x0e
    2f5c:	a7 85       	ldd	r26, Z+15	; 0x0f
    2f5e:	b0 89       	ldd	r27, Z+16	; 0x10
    2f60:	28 1b       	sub	r18, r24
    2f62:	39 0b       	sbc	r19, r25
    2f64:	4a 0b       	sbc	r20, r26
    2f66:	5b 0b       	sbc	r21, r27
    2f68:	20 93 61 05 	sts	0x0561, r18
    2f6c:	30 93 62 05 	sts	0x0562, r19
    2f70:	40 93 63 05 	sts	0x0563, r20
    2f74:	50 93 64 05 	sts	0x0564, r21
    }
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    2f78:	80 91 65 05 	lds	r24, 0x0565
    2f7c:	90 91 66 05 	lds	r25, 0x0566
    2f80:	a0 91 67 05 	lds	r26, 0x0567
    2f84:	b0 91 68 05 	lds	r27, 0x0568
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	b1 1d       	adc	r27, r1
    2f8e:	80 93 65 05 	sts	0x0565, r24
    2f92:	90 93 66 05 	sts	0x0566, r25
    2f96:	a0 93 67 05 	sts	0x0567, r26
    2f9a:	b0 93 68 05 	sts	0x0568, r27
    if (step_events_completed >= current_block->step_event_count) {
    2f9e:	25 85       	ldd	r18, Z+13	; 0x0d
    2fa0:	36 85       	ldd	r19, Z+14	; 0x0e
    2fa2:	47 85       	ldd	r20, Z+15	; 0x0f
    2fa4:	50 89       	ldd	r21, Z+16	; 0x10
    2fa6:	82 17       	cp	r24, r18
    2fa8:	93 07       	cpc	r25, r19
    2faa:	a4 07       	cpc	r26, r20
    2fac:	b5 07       	cpc	r27, r21
    2fae:	48 f0       	brcs	.+18     	; 0x2fc2 <__vector_11+0x2b0>
      current_block = NULL;
    2fb0:	10 92 57 05 	sts	0x0557, r1
    2fb4:	10 92 56 05 	sts	0x0556, r1
      plan_discard_current_block();
    2fb8:	0e 94 26 0c 	call	0x184c	; 0x184c <plan_discard_current_block>
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <__vector_11+0x2b0>
    }
  } else {
    out_bits = 0;
    2fbe:	10 92 58 05 	sts	0x0558, r1
  }          
  out_bits ^= settings.invert_mask;
    2fc2:	80 91 58 05 	lds	r24, 0x0558
    2fc6:	90 91 f2 06 	lds	r25, 0x06F2
    2fca:	89 27       	eor	r24, r25
    2fcc:	80 93 58 05 	sts	0x0558, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    2fd0:	20 91 6b 05 	lds	r18, 0x056B
    2fd4:	30 91 6c 05 	lds	r19, 0x056C
    2fd8:	40 91 6d 05 	lds	r20, 0x056D
    2fdc:	50 91 6e 05 	lds	r21, 0x056E
    2fe0:	80 91 6f 05 	lds	r24, 0x056F
    2fe4:	90 91 70 05 	lds	r25, 0x0570
    2fe8:	a0 91 71 05 	lds	r26, 0x0571
    2fec:	b0 91 72 05 	lds	r27, 0x0572
    2ff0:	28 0f       	add	r18, r24
    2ff2:	39 1f       	adc	r19, r25
    2ff4:	4a 1f       	adc	r20, r26
    2ff6:	5b 1f       	adc	r21, r27
    2ff8:	20 93 6f 05 	sts	0x056F, r18
    2ffc:	30 93 70 05 	sts	0x0570, r19
    3000:	40 93 71 05 	sts	0x0571, r20
    3004:	50 93 72 05 	sts	0x0572, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3008:	21 38       	cpi	r18, 0x81	; 129
    300a:	8a e1       	ldi	r24, 0x1A	; 26
    300c:	38 07       	cpc	r19, r24
    300e:	86 e0       	ldi	r24, 0x06	; 6
    3010:	48 07       	cpc	r20, r24
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	58 07       	cpc	r21, r24
    3016:	08 f4       	brcc	.+2      	; 0x301a <__vector_11+0x308>
    3018:	92 c0       	rjmp	.+292    	; 0x313e <__vector_11+0x42c>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    301a:	20 58       	subi	r18, 0x80	; 128
    301c:	3a 41       	sbci	r19, 0x1A	; 26
    301e:	46 40       	sbci	r20, 0x06	; 6
    3020:	50 40       	sbci	r21, 0x00	; 0
    3022:	20 93 6f 05 	sts	0x056F, r18
    3026:	30 93 70 05 	sts	0x0570, r19
    302a:	40 93 71 05 	sts	0x0571, r20
    302e:	50 93 72 05 	sts	0x0572, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static void trapezoid_generator_tick() {     
  if (current_block) {
    3032:	e0 91 56 05 	lds	r30, 0x0556
    3036:	f0 91 57 05 	lds	r31, 0x0557
    303a:	30 97       	sbiw	r30, 0x00	; 0
    303c:	09 f4       	brne	.+2      	; 0x3040 <__vector_11+0x32e>
    303e:	7f c0       	rjmp	.+254    	; 0x313e <__vector_11+0x42c>
    if (step_events_completed < current_block->accelerate_until) {
    3040:	e0 90 65 05 	lds	r14, 0x0565
    3044:	f0 90 66 05 	lds	r15, 0x0566
    3048:	00 91 67 05 	lds	r16, 0x0567
    304c:	10 91 68 05 	lds	r17, 0x0568
    3050:	81 ad       	ldd	r24, Z+57	; 0x39
    3052:	92 ad       	ldd	r25, Z+58	; 0x3a
    3054:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3056:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3058:	e8 16       	cp	r14, r24
    305a:	f9 06       	cpc	r15, r25
    305c:	0a 07       	cpc	r16, r26
    305e:	1b 07       	cpc	r17, r27
    3060:	88 f4       	brcc	.+34     	; 0x3084 <__vector_11+0x372>
      trapezoid_adjusted_rate += current_block->rate_delta;
    3062:	65 a9       	ldd	r22, Z+53	; 0x35
    3064:	76 a9       	ldd	r23, Z+54	; 0x36
    3066:	87 a9       	ldd	r24, Z+55	; 0x37
    3068:	90 ad       	ldd	r25, Z+56	; 0x38
    306a:	20 91 73 05 	lds	r18, 0x0573
    306e:	30 91 74 05 	lds	r19, 0x0574
    3072:	40 91 75 05 	lds	r20, 0x0575
    3076:	50 91 76 05 	lds	r21, 0x0576
    307a:	62 0f       	add	r22, r18
    307c:	73 1f       	adc	r23, r19
    307e:	84 1f       	adc	r24, r20
    3080:	95 1f       	adc	r25, r21
    3082:	53 c0       	rjmp	.+166    	; 0x312a <__vector_11+0x418>
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3084:	fd 96       	adiw	r30, 0x3d	; 61
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	a2 81       	ldd	r26, Z+2	; 0x02
    308c:	b3 81       	ldd	r27, Z+3	; 0x03
    308e:	fd 97       	sbiw	r30, 0x3d	; 61
    3090:	20 91 73 05 	lds	r18, 0x0573
    3094:	30 91 74 05 	lds	r19, 0x0574
    3098:	40 91 75 05 	lds	r20, 0x0575
    309c:	50 91 76 05 	lds	r21, 0x0576
    30a0:	8e 15       	cp	r24, r14
    30a2:	9f 05       	cpc	r25, r15
    30a4:	a0 07       	cpc	r26, r16
    30a6:	b1 07       	cpc	r27, r17
    30a8:	b8 f5       	brcc	.+110    	; 0x3118 <__vector_11+0x406>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    30aa:	85 a9       	ldd	r24, Z+53	; 0x35
    30ac:	96 a9       	ldd	r25, Z+54	; 0x36
    30ae:	a7 a9       	ldd	r26, Z+55	; 0x37
    30b0:	b0 ad       	ldd	r27, Z+56	; 0x38
    30b2:	82 17       	cp	r24, r18
    30b4:	93 07       	cpc	r25, r19
    30b6:	a4 07       	cpc	r26, r20
    30b8:	b5 07       	cpc	r27, r21
    30ba:	60 f4       	brcc	.+24     	; 0x30d4 <__vector_11+0x3c2>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    30bc:	28 1b       	sub	r18, r24
    30be:	39 0b       	sbc	r19, r25
    30c0:	4a 0b       	sbc	r20, r26
    30c2:	5b 0b       	sbc	r21, r27
    30c4:	20 93 73 05 	sts	0x0573, r18
    30c8:	30 93 74 05 	sts	0x0574, r19
    30cc:	40 93 75 05 	sts	0x0575, r20
    30d0:	50 93 76 05 	sts	0x0576, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    30d4:	21 a9       	ldd	r18, Z+49	; 0x31
    30d6:	32 a9       	ldd	r19, Z+50	; 0x32
    30d8:	43 a9       	ldd	r20, Z+51	; 0x33
    30da:	54 a9       	ldd	r21, Z+52	; 0x34
    30dc:	80 91 73 05 	lds	r24, 0x0573
    30e0:	90 91 74 05 	lds	r25, 0x0574
    30e4:	a0 91 75 05 	lds	r26, 0x0575
    30e8:	b0 91 76 05 	lds	r27, 0x0576
    30ec:	82 17       	cp	r24, r18
    30ee:	93 07       	cpc	r25, r19
    30f0:	a4 07       	cpc	r26, r20
    30f2:	b5 07       	cpc	r27, r21
    30f4:	40 f4       	brcc	.+16     	; 0x3106 <__vector_11+0x3f4>
        trapezoid_adjusted_rate = current_block->final_rate;
    30f6:	20 93 73 05 	sts	0x0573, r18
    30fa:	30 93 74 05 	sts	0x0574, r19
    30fe:	40 93 75 05 	sts	0x0575, r20
    3102:	50 93 76 05 	sts	0x0576, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    3106:	60 91 73 05 	lds	r22, 0x0573
    310a:	70 91 74 05 	lds	r23, 0x0574
    310e:	80 91 75 05 	lds	r24, 0x0575
    3112:	90 91 76 05 	lds	r25, 0x0576
    3116:	11 c0       	rjmp	.+34     	; 0x313a <__vector_11+0x428>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3118:	61 89       	ldd	r22, Z+17	; 0x11
    311a:	72 89       	ldd	r23, Z+18	; 0x12
    311c:	83 89       	ldd	r24, Z+19	; 0x13
    311e:	94 89       	ldd	r25, Z+20	; 0x14
    3120:	26 17       	cp	r18, r22
    3122:	37 07       	cpc	r19, r23
    3124:	48 07       	cpc	r20, r24
    3126:	59 07       	cpc	r21, r25
    3128:	51 f0       	breq	.+20     	; 0x313e <__vector_11+0x42c>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    312a:	60 93 73 05 	sts	0x0573, r22
    312e:	70 93 74 05 	sts	0x0574, r23
    3132:	80 93 75 05 	sts	0x0575, r24
    3136:	90 93 76 05 	sts	0x0576, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    313a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=false;
    313e:	10 92 6a 05 	sts	0x056A, r1
    3142:	10 92 69 05 	sts	0x0569, r1
}
    3146:	ff 91       	pop	r31
    3148:	ef 91       	pop	r30
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	7f 91       	pop	r23
    3158:	6f 91       	pop	r22
    315a:	5f 91       	pop	r21
    315c:	4f 91       	pop	r20
    315e:	3f 91       	pop	r19
    3160:	2f 91       	pop	r18
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	0f 90       	pop	r0
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	0f 90       	pop	r0
    3170:	1f 90       	pop	r1
    3172:	18 95       	reti

00003174 <protocol_execute_line>:
  gc_execute_line("G0X4Y4.1Z4.2");	// move
//  gc_execute_line("G0X100Y101Z102");	// move
}

// Executes one line of input according to protocol
uint8_t protocol_execute_line(char *line) {
    3174:	fc 01       	movw	r30, r24
  if(line[0] == '$') {
    3176:	80 81       	ld	r24, Z
    3178:	84 32       	cpi	r24, 0x24	; 36
    317a:	21 f4       	brne	.+8      	; 0x3184 <protocol_execute_line+0x10>
    return(settings_execute_line(line)); // Delegate lines starting with '$' to the settings module
    317c:	cf 01       	movw	r24, r30
    317e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <settings_execute_line>
    3182:	08 95       	ret
  } else {
    return(gc_execute_line(line));    // Everything else is gcode
    3184:	cf 01       	movw	r24, r30
    3186:	0e 94 ad 04 	call	0x95a	; 0x95a <gc_execute_line>
  }
}
    318a:	08 95       	ret

0000318c <protocol_process>:

void protocol_process()
{
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	54 c0       	rjmp	.+168    	; 0x323c <protocol_process+0xb0>
  unsigned char c;	// what do you get when you have a lot of unsigned characters?
  while((c = serialRead()) != (unsigned char)-1) 	// unemployed actors.
  {
    if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    3194:	e0 91 db 05 	lds	r30, 0x05DB
    3198:	ee 23       	and	r30, r30
    319a:	f1 f1       	breq	.+124    	; 0x3218 <protocol_process+0x8c>
    319c:	9a 30       	cpi	r25, 0x0A	; 10
    319e:	11 f0       	breq	.+4      	; 0x31a4 <protocol_process+0x18>
    31a0:	9d 30       	cpi	r25, 0x0D	; 13
    31a2:	d1 f5       	brne	.+116    	; 0x3218 <protocol_process+0x8c>
      line[char_counter] = 0; // treminate string
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	e9 58       	subi	r30, 0x89	; 137
    31a8:	fa 4f       	sbci	r31, 0xFA	; 250
    31aa:	10 82       	st	Z, r1
      status_message(protocol_execute_line(line));
    31ac:	87 e7       	ldi	r24, 0x77	; 119
    31ae:	95 e0       	ldi	r25, 0x05	; 5
    31b0:	0e 94 ba 18 	call	0x3174	; 0x3174 <protocol_execute_line>
    31b4:	18 2f       	mov	r17, r24
    31b6:	c8 2f       	mov	r28, r24
    31b8:	d0 e0       	ldi	r29, 0x00	; 0

static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {
  if (status_code == 0) {
    31ba:	20 97       	sbiw	r28, 0x00	; 0
    31bc:	19 f4       	brne	.+6      	; 0x31c4 <protocol_process+0x38>
    printPgmString(PSTR("ok\r\n"));
    31be:	87 e4       	ldi	r24, 0x47	; 71
    31c0:	93 e0       	ldi	r25, 0x03	; 3
    31c2:	25 c0       	rjmp	.+74     	; 0x320e <protocol_process+0x82>
  } else {
    printPgmString(PSTR("error: "));
    31c4:	8f e3       	ldi	r24, 0x3F	; 63
    31c6:	93 e0       	ldi	r25, 0x03	; 3
    31c8:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
    switch(status_code) {          
    31cc:	12 30       	cpi	r17, 0x02	; 2
    31ce:	69 f0       	breq	.+26     	; 0x31ea <protocol_process+0x5e>
    31d0:	13 30       	cpi	r17, 0x03	; 3
    31d2:	18 f4       	brcc	.+6      	; 0x31da <protocol_process+0x4e>
    31d4:	11 30       	cpi	r17, 0x01	; 1
    31d6:	91 f4       	brne	.+36     	; 0x31fc <protocol_process+0x70>
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <protocol_process+0x58>
    31da:	13 30       	cpi	r17, 0x03	; 3
    31dc:	49 f0       	breq	.+18     	; 0x31f0 <protocol_process+0x64>
    31de:	14 30       	cpi	r17, 0x04	; 4
    31e0:	69 f4       	brne	.+26     	; 0x31fc <protocol_process+0x70>
    31e2:	09 c0       	rjmp	.+18     	; 0x31f6 <protocol_process+0x6a>
      case STATUS_BAD_NUMBER_FORMAT:
      printPgmString(PSTR("Bad number format\r\n")); break;
    31e4:	8b e2       	ldi	r24, 0x2B	; 43
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	12 c0       	rjmp	.+36     	; 0x320e <protocol_process+0x82>
      case STATUS_EXPECTED_COMMAND_LETTER:
      printPgmString(PSTR("Expected command letter\r\n")); break;
    31ea:	81 e1       	ldi	r24, 0x11	; 17
    31ec:	93 e0       	ldi	r25, 0x03	; 3
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <protocol_process+0x82>
      case STATUS_UNSUPPORTED_STATEMENT:
      printPgmString(PSTR("Unsupported statement\r\n")); break;
    31f0:	89 ef       	ldi	r24, 0xF9	; 249
    31f2:	92 e0       	ldi	r25, 0x02	; 2
    31f4:	0c c0       	rjmp	.+24     	; 0x320e <protocol_process+0x82>
      case STATUS_FLOATING_POINT_ERROR:
      printPgmString(PSTR("Floating point error\r\n")); break;
    31f6:	82 ee       	ldi	r24, 0xE2	; 226
    31f8:	92 e0       	ldi	r25, 0x02	; 2
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <protocol_process+0x82>
      default:
      printInteger(status_code);
    31fc:	be 01       	movw	r22, r28
    31fe:	88 27       	eor	r24, r24
    3200:	77 fd       	sbrc	r23, 7
    3202:	80 95       	com	r24
    3204:	98 2f       	mov	r25, r24
    3206:	0e 94 15 03 	call	0x62a	; 0x62a <printInteger>
      printPgmString(PSTR("\r\n"));
    320a:	8f ed       	ldi	r24, 0xDF	; 223
    320c:	92 e0       	ldi	r25, 0x02	; 2
    320e:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
  while((c = serialRead()) != (unsigned char)-1) 	// unemployed actors.
  {
    if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // treminate string
      status_message(protocol_execute_line(line));
      char_counter = 0; // reset line buffer index
    3212:	10 92 db 05 	sts	0x05DB, r1
    3216:	12 c0       	rjmp	.+36     	; 0x323c <protocol_process+0xb0>
    } else if (c <= ' ') { // Throw away whitepace and control characters
    3218:	91 32       	cpi	r25, 0x21	; 33
    321a:	80 f0       	brcs	.+32     	; 0x323c <protocol_process+0xb0>
    } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
    321c:	89 2f       	mov	r24, r25
    321e:	81 56       	subi	r24, 0x61	; 97
    3220:	ae 2f       	mov	r26, r30
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	ef 5f       	subi	r30, 0xFF	; 255
    3226:	8a 31       	cpi	r24, 0x1A	; 26
    3228:	20 f4       	brcc	.+8      	; 0x3232 <protocol_process+0xa6>
      line[char_counter++] = c-'a'+'A';
    322a:	a9 58       	subi	r26, 0x89	; 137
    322c:	ba 4f       	sbci	r27, 0xFA	; 250
    322e:	90 52       	subi	r25, 0x20	; 32
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <protocol_process+0xaa>
    } else {
      line[char_counter++] = c;
    3232:	a9 58       	subi	r26, 0x89	; 137
    3234:	ba 4f       	sbci	r27, 0xFA	; 250
    3236:	9c 93       	st	X, r25
    3238:	e0 93 db 05 	sts	0x05DB, r30
}

void protocol_process()
{
  unsigned char c;	// what do you get when you have a lot of unsigned characters?
  while((c = serialRead()) != (unsigned char)-1) 	// unemployed actors.
    323c:	0e 94 35 02 	call	0x46a	; 0x46a <serialRead>
    3240:	98 2f       	mov	r25, r24
    3242:	8f 3f       	cpi	r24, 0xFF	; 255
    3244:	09 f0       	breq	.+2      	; 0x3248 <protocol_process+0xbc>
    3246:	a6 cf       	rjmp	.-180    	; 0x3194 <protocol_process+0x8>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	1f 91       	pop	r17
    324e:	08 95       	ret

00003250 <protocol_test>:
  printPgmString(PSTR("\r\n"));  
}

void protocol_test()
{
  gc_execute_line("G20");				// set inches mode
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	0e 94 ad 04 	call	0x95a	; 0x95a <gc_execute_line>
  gc_execute_line("G0X4Y4.1Z4.2");	// move
    3258:	84 e0       	ldi	r24, 0x04	; 4
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	0e 94 ad 04 	call	0x95a	; 0x95a <gc_execute_line>
//  gc_execute_line("G0X100Y101Z102");	// move
}
    3260:	08 95       	ret

00003262 <protocol_init>:
  }
}

void protocol_init() 
{
  beginSerial(BAUD_RATE);  
    3262:	60 e8       	ldi	r22, 0x80	; 128
    3264:	75 e2       	ldi	r23, 0x25	; 37
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <beginSerial>
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION));
    326e:	8f e4       	ldi	r24, 0x4F	; 79
    3270:	93 e0       	ldi	r25, 0x03	; 3
    3272:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
  printPgmString(PSTR("\r\n"));  
    3276:	8c e4       	ldi	r24, 0x4C	; 76
    3278:	93 e0       	ldi	r25, 0x03	; 3
    327a:	0e 94 88 02 	call	0x510	; 0x510 <printPgmString>
}
    327e:	08 95       	ret

00003280 <read_double>:
#include "nuts_bolts.h"
#include <stdint.h>
#include <stdlib.h>

int read_double(char *line, uint8_t *char_counter, double *double_ptr)                  
{
    3280:	af 92       	push	r10
    3282:	bf 92       	push	r11
    3284:	cf 92       	push	r12
    3286:	df 92       	push	r13
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <read_double+0x16>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	6c 01       	movw	r12, r24
    329c:	5b 01       	movw	r10, r22
    329e:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
    32a0:	fb 01       	movw	r30, r22
    32a2:	80 81       	ld	r24, Z
    32a4:	86 01       	movw	r16, r12
    32a6:	08 0f       	add	r16, r24
    32a8:	11 1d       	adc	r17, r1
  char *end;
  
  *double_ptr = strtod(start, &end);
    32aa:	c8 01       	movw	r24, r16
    32ac:	be 01       	movw	r22, r28
    32ae:	6f 5f       	subi	r22, 0xFF	; 255
    32b0:	7f 4f       	sbci	r23, 0xFF	; 255
    32b2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <strtod>
    32b6:	f7 01       	movw	r30, r14
    32b8:	60 83       	st	Z, r22
    32ba:	71 83       	std	Z+1, r23	; 0x01
    32bc:	82 83       	std	Z+2, r24	; 0x02
    32be:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	9a 81       	ldd	r25, Y+2	; 0x02
    32c4:	80 17       	cp	r24, r16
    32c6:	91 07       	cpc	r25, r17
    32c8:	19 f4       	brne	.+6      	; 0x32d0 <read_double+0x50>
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <read_double+0x5a>
    return(false); 
  };

  *char_counter = end - line;
    32d0:	8c 19       	sub	r24, r12
    32d2:	f5 01       	movw	r30, r10
    32d4:	80 83       	st	Z, r24
    32d6:	21 e0       	ldi	r18, 0x01	; 1
    32d8:	30 e0       	ldi	r19, 0x00	; 0
  return(true);
}
    32da:	c9 01       	movw	r24, r18
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	df 90       	pop	r13
    32ee:	cf 90       	pop	r12
    32f0:	bf 90       	pop	r11
    32f2:	af 90       	pop	r10
    32f4:	08 95       	ret

000032f6 <limits_init>:
#include "settings.h"
#include "nuts_bolts.h"
#include "config.h"

void limits_init() {
  LIMIT_DDR &= ~(LIMIT_MASK);
    32f6:	84 b1       	in	r24, 0x04	; 4
    32f8:	81 7f       	andi	r24, 0xF1	; 241
    32fa:	84 b9       	out	0x04, r24	; 4
}
    32fc:	08 95       	ret

000032fe <homing_cycle>:

static void homing_cycle(bool x_axis, bool y_axis, bool z_axis, bool reverse_direction, uint32_t microseconds_per_pulse) {
    32fe:	2f 92       	push	r2
    3300:	3f 92       	push	r3
    3302:	4f 92       	push	r4
    3304:	5f 92       	push	r5
    3306:	6f 92       	push	r6
    3308:	7f 92       	push	r7
    330a:	8f 92       	push	r8
    330c:	9f 92       	push	r9
    330e:	af 92       	push	r10
    3310:	bf 92       	push	r11
    3312:	cf 92       	push	r12
    3314:	df 92       	push	r13
    3316:	ef 92       	push	r14
    3318:	ff 92       	push	r15
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <homing_cycle+0x26>
    3324:	00 d0       	rcall	.+0      	; 0x3326 <homing_cycle+0x28>
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	26 2e       	mov	r2, r22
    3330:	34 2e       	mov	r3, r20
    3332:	27 01       	movw	r4, r14
    3334:	38 01       	movw	r6, r16
  // First home the Z axis
  uint32_t step_delay = microseconds_per_pulse - settings.pulse_microseconds;
    3336:	60 91 e9 06 	lds	r22, 0x06E9
    333a:	46 1a       	sub	r4, r22
    333c:	51 08       	sbc	r5, r1
    333e:	61 08       	sbc	r6, r1
    3340:	71 08       	sbc	r7, r1
  uint8_t out_bits = DIRECTION_MASK;
  uint8_t limit_bits;
  
  if (x_axis) { out_bits |= (1<<X_STEP_BIT); }
    3342:	88 23       	and	r24, r24
    3344:	11 f0       	breq	.+4      	; 0x334a <homing_cycle+0x4c>
    3346:	94 ee       	ldi	r25, 0xE4	; 228
    3348:	01 c0       	rjmp	.+2      	; 0x334c <homing_cycle+0x4e>
    334a:	90 ee       	ldi	r25, 0xE0	; 224
  if (y_axis) { out_bits |= (1<<Y_STEP_BIT); }
    334c:	21 10       	cpse	r2, r1
    334e:	98 60       	ori	r25, 0x08	; 8
  if (z_axis) { out_bits |= (1<<Z_STEP_BIT); }
    3350:	31 10       	cpse	r3, r1
    3352:	90 61       	ori	r25, 0x10	; 16
  
  // Invert direction bits if this is a reverse homing_cycle
  if (reverse_direction) {
    3354:	22 23       	and	r18, r18
    3356:	11 f0       	breq	.+4      	; 0x335c <homing_cycle+0x5e>
    out_bits ^= DIRECTION_MASK;
    3358:	80 ee       	ldi	r24, 0xE0	; 224
    335a:	98 27       	eor	r25, r24
  }
  
  // Apply the global invert mask
  out_bits ^= settings.invert_mask;
    335c:	90 90 f2 06 	lds	r9, 0x06F2
    3360:	99 26       	eor	r9, r25
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    3362:	8b b1       	in	r24, 0x0b	; 11
    3364:	99 2d       	mov	r25, r9
    3366:	90 7e       	andi	r25, 0xE0	; 224
    3368:	8f 71       	andi	r24, 0x1F	; 31
    336a:	98 2b       	or	r25, r24
    336c:	9b b9       	out	0x0b, r25	; 11
      out_bits ^= (1<<Z_STEP_BIT);
    }
    // Check if we are done
    if(!(x_axis || y_axis || z_axis)) { return; }
    STEPPING_PORT |= out_bits & STEP_MASK;
    _delay_us(settings.pulse_microseconds);
    336e:	86 2f       	mov	r24, r22
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	8a 83       	std	Y+2, r24	; 0x02
    3378:	9b 83       	std	Y+3, r25	; 0x03
    337a:	ac 83       	std	Y+4, r26	; 0x04
    337c:	bd 83       	std	Y+5, r27	; 0x05
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
  
  for(;;) {
    limit_bits = LIMIT_PIN;
    337e:	83 b1       	in	r24, 0x03	; 3
    if (reverse_direction) {         
      // Invert limit_bits if this is a reverse homing_cycle
      limit_bits ^= LIMIT_MASK;
    }
    if (x_axis && !(LIMIT_PIN & (1<<X_LIMIT_BIT))) {
    3380:	99 81       	ldd	r25, Y+1	; 0x01
    3382:	99 23       	and	r25, r25
    3384:	29 f0       	breq	.+10     	; 0x3390 <homing_cycle+0x92>
    3386:	19 99       	sbic	0x03, 1	; 3
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <homing_cycle+0x92>
      x_axis = false;
      out_bits ^= (1<<X_STEP_BIT);      
    338a:	a4 e0       	ldi	r26, 0x04	; 4
    338c:	9a 26       	eor	r9, r26
    338e:	19 82       	std	Y+1, r1	; 0x01
    }    
    if (y_axis && !(LIMIT_PIN & (1<<Y_LIMIT_BIT))) {
    3390:	22 20       	and	r2, r2
    3392:	29 f0       	breq	.+10     	; 0x339e <homing_cycle+0xa0>
    3394:	1a 99       	sbic	0x03, 2	; 3
    3396:	03 c0       	rjmp	.+6      	; 0x339e <homing_cycle+0xa0>
      y_axis = false;
      out_bits ^= (1<<Y_STEP_BIT);
    3398:	b8 e0       	ldi	r27, 0x08	; 8
    339a:	9b 26       	eor	r9, r27
    339c:	22 24       	eor	r2, r2
    }    
    if (z_axis && !(LIMIT_PIN & (1<<Z_LIMIT_BIT))) {
    339e:	33 20       	and	r3, r3
    33a0:	29 f0       	breq	.+10     	; 0x33ac <homing_cycle+0xae>
    33a2:	1b 99       	sbic	0x03, 3	; 3
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <homing_cycle+0xae>
      z_axis = false;
      out_bits ^= (1<<Z_STEP_BIT);
    33a6:	e0 e1       	ldi	r30, 0x10	; 16
    33a8:	9e 26       	eor	r9, r30
    33aa:	33 24       	eor	r3, r3
    }
    // Check if we are done
    if(!(x_axis || y_axis || z_axis)) { return; }
    33ac:	f9 81       	ldd	r31, Y+1	; 0x01
    33ae:	ff 23       	and	r31, r31
    33b0:	29 f4       	brne	.+10     	; 0x33bc <homing_cycle+0xbe>
    33b2:	22 20       	and	r2, r2
    33b4:	19 f4       	brne	.+6      	; 0x33bc <homing_cycle+0xbe>
    33b6:	33 20       	and	r3, r3
    33b8:	09 f4       	brne	.+2      	; 0x33bc <homing_cycle+0xbe>
    33ba:	e6 c0       	rjmp	.+460    	; 0x3588 <homing_cycle+0x28a>
    STEPPING_PORT |= out_bits & STEP_MASK;
    33bc:	8b b1       	in	r24, 0x0b	; 11
    33be:	9c e1       	ldi	r25, 0x1C	; 28
    33c0:	89 2e       	mov	r8, r25
    33c2:	89 20       	and	r8, r9
    33c4:	88 29       	or	r24, r8
    33c6:	8b b9       	out	0x0b, r24	; 11
    _delay_us(settings.pulse_microseconds);
    33c8:	6a 81       	ldd	r22, Y+2	; 0x02
    33ca:	7b 81       	ldd	r23, Y+3	; 0x03
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    33d4:	5b 01       	movw	r10, r22
    33d6:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33d8:	2b ea       	ldi	r18, 0xAB	; 171
    33da:	3a ea       	ldi	r19, 0xAA	; 170
    33dc:	4a ea       	ldi	r20, 0xAA	; 170
    33de:	50 e4       	ldi	r21, 0x40	; 64
    33e0:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    33e4:	7b 01       	movw	r14, r22
    33e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	14 f4       	brge	.+4      	; 0x33fc <homing_cycle+0xfe>
    33f8:	61 e0       	ldi	r22, 0x01	; 1
    33fa:	53 c0       	rjmp	.+166    	; 0x34a2 <homing_cycle+0x1a4>
		__ticks = 1;
	else if (__tmp > 255)
    33fc:	c8 01       	movw	r24, r16
    33fe:	b7 01       	movw	r22, r14
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	53 e4       	ldi	r21, 0x43	; 67
    3408:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    340c:	18 16       	cp	r1, r24
    340e:	0c f0       	brlt	.+2      	; 0x3412 <homing_cycle+0x114>
    3410:	44 c0       	rjmp	.+136    	; 0x349a <homing_cycle+0x19c>
	{
		_delay_ms(__us / 1000.0);
    3412:	c6 01       	movw	r24, r12
    3414:	b5 01       	movw	r22, r10
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a e7       	ldi	r20, 0x7A	; 122
    341c:	54 e4       	ldi	r21, 0x44	; 68
    341e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    3422:	5b 01       	movw	r10, r22
    3424:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	4a e7       	ldi	r20, 0x7A	; 122
    342c:	55 e4       	ldi	r21, 0x45	; 69
    342e:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    3432:	7b 01       	movw	r14, r22
    3434:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    3442:	88 23       	and	r24, r24
    3444:	1c f4       	brge	.+6      	; 0x344c <homing_cycle+0x14e>
    3446:	61 e0       	ldi	r22, 0x01	; 1
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	23 c0       	rjmp	.+70     	; 0x3492 <homing_cycle+0x194>
		__ticks = 1;
	else if (__tmp > 65535)
    344c:	c8 01       	movw	r24, r16
    344e:	b7 01       	movw	r22, r14
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	3f ef       	ldi	r19, 0xFF	; 255
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	57 e4       	ldi	r21, 0x47	; 71
    3458:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    345c:	18 16       	cp	r1, r24
    345e:	ac f4       	brge	.+42     	; 0x348a <homing_cycle+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	c6 01       	movw	r24, r12
    3462:	b5 01       	movw	r22, r10
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    3470:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    3474:	06 c0       	rjmp	.+12     	; 0x3482 <homing_cycle+0x184>
    3476:	80 e9       	ldi	r24, 0x90	; 144
    3478:	91 e0       	ldi	r25, 0x01	; 1
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <homing_cycle+0x17c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	61 50       	subi	r22, 0x01	; 1
    3480:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3482:	61 15       	cp	r22, r1
    3484:	71 05       	cpc	r23, r1
    3486:	b9 f7       	brne	.-18     	; 0x3476 <homing_cycle+0x178>
    3488:	0e c0       	rjmp	.+28     	; 0x34a6 <homing_cycle+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	c8 01       	movw	r24, r16
    348c:	b7 01       	movw	r22, r14
    348e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    3492:	cb 01       	movw	r24, r22
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <homing_cycle+0x196>
    3498:	06 c0       	rjmp	.+12     	; 0x34a6 <homing_cycle+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    349a:	c8 01       	movw	r24, r16
    349c:	b7 01       	movw	r22, r14
    349e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a2:	6a 95       	dec	r22
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <homing_cycle+0x1a4>
    STEPPING_PORT ^= out_bits & STEP_MASK;
    34a6:	8b b1       	in	r24, 0x0b	; 11
    34a8:	88 26       	eor	r8, r24
    34aa:	8b b8       	out	0x0b, r8	; 11
    _delay_us(step_delay);
    34ac:	c3 01       	movw	r24, r6
    34ae:	b2 01       	movw	r22, r4
    34b0:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    34b4:	5b 01       	movw	r10, r22
    34b6:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34b8:	2b ea       	ldi	r18, 0xAB	; 171
    34ba:	3a ea       	ldi	r19, 0xAA	; 170
    34bc:	4a ea       	ldi	r20, 0xAA	; 170
    34be:	50 e4       	ldi	r21, 0x40	; 64
    34c0:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    34c4:	7b 01       	movw	r14, r22
    34c6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	14 f4       	brge	.+4      	; 0x34dc <homing_cycle+0x1de>
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	53 c0       	rjmp	.+166    	; 0x3582 <homing_cycle+0x284>
		__ticks = 1;
	else if (__tmp > 255)
    34dc:	c8 01       	movw	r24, r16
    34de:	b7 01       	movw	r22, r14
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4f e7       	ldi	r20, 0x7F	; 127
    34e6:	53 e4       	ldi	r21, 0x43	; 67
    34e8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    34ec:	18 16       	cp	r1, r24
    34ee:	0c f0       	brlt	.+2      	; 0x34f2 <homing_cycle+0x1f4>
    34f0:	44 c0       	rjmp	.+136    	; 0x357a <homing_cycle+0x27c>
	{
		_delay_ms(__us / 1000.0);
    34f2:	c6 01       	movw	r24, r12
    34f4:	b5 01       	movw	r22, r10
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a e7       	ldi	r20, 0x7A	; 122
    34fc:	54 e4       	ldi	r21, 0x44	; 68
    34fe:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__divsf3>
    3502:	5b 01       	movw	r10, r22
    3504:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	4a e7       	ldi	r20, 0x7A	; 122
    350c:	55 e4       	ldi	r21, 0x45	; 69
    350e:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    3512:	7b 01       	movw	r14, r22
    3514:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e8       	ldi	r20, 0x80	; 128
    351c:	5f e3       	ldi	r21, 0x3F	; 63
    351e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    3522:	88 23       	and	r24, r24
    3524:	1c f4       	brge	.+6      	; 0x352c <homing_cycle+0x22e>
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	23 c0       	rjmp	.+70     	; 0x3572 <homing_cycle+0x274>
		__ticks = 1;
	else if (__tmp > 65535)
    352c:	c8 01       	movw	r24, r16
    352e:	b7 01       	movw	r22, r14
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__gesf2>
    353c:	18 16       	cp	r1, r24
    353e:	ac f4       	brge	.+42     	; 0x356a <homing_cycle+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3540:	c6 01       	movw	r24, r12
    3542:	b5 01       	movw	r22, r10
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    3550:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    3554:	06 c0       	rjmp	.+12     	; 0x3562 <homing_cycle+0x264>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3556:	80 e9       	ldi	r24, 0x90	; 144
    3558:	91 e0       	ldi	r25, 0x01	; 1
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <homing_cycle+0x25c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355e:	61 50       	subi	r22, 0x01	; 1
    3560:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3562:	61 15       	cp	r22, r1
    3564:	71 05       	cpc	r23, r1
    3566:	b9 f7       	brne	.-18     	; 0x3556 <homing_cycle+0x258>
    3568:	0a cf       	rjmp	.-492    	; 0x337e <homing_cycle+0x80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356a:	c8 01       	movw	r24, r16
    356c:	b7 01       	movw	r22, r14
    356e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    3572:	cb 01       	movw	r24, r22
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <homing_cycle+0x276>
    3578:	02 cf       	rjmp	.-508    	; 0x337e <homing_cycle+0x80>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    357a:	c8 01       	movw	r24, r16
    357c:	b7 01       	movw	r22, r14
    357e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3582:	6a 95       	dec	r22
    3584:	f1 f7       	brne	.-4      	; 0x3582 <homing_cycle+0x284>
    3586:	fb ce       	rjmp	.-522    	; 0x337e <homing_cycle+0x80>
  }
  return;
}
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	bf 90       	pop	r11
    35a4:	af 90       	pop	r10
    35a6:	9f 90       	pop	r9
    35a8:	8f 90       	pop	r8
    35aa:	7f 90       	pop	r7
    35ac:	6f 90       	pop	r6
    35ae:	5f 90       	pop	r5
    35b0:	4f 90       	pop	r4
    35b2:	3f 90       	pop	r3
    35b4:	2f 90       	pop	r2
    35b6:	08 95       	ret

000035b8 <limits_go_home>:

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
}

void limits_go_home() {
    35b8:	df 92       	push	r13
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
  st_synchronize();
    35c2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <st_synchronize>
  // Store the current limit switch state
  uint8_t original_limit_state = LIMIT_PIN;
    35c6:	d3 b0       	in	r13, 0x03	; 3
  }
  return;
}

static void approach_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, false, 100000);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	41 e0       	ldi	r20, 0x01	; 1
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	f0 ea       	ldi	r31, 0xA0	; 160
    35d2:	ef 2e       	mov	r14, r31
    35d4:	f6 e8       	ldi	r31, 0x86	; 134
    35d6:	ff 2e       	mov	r15, r31
    35d8:	f1 e0       	ldi	r31, 0x01	; 1
    35da:	0f 2f       	mov	r16, r31
    35dc:	11 2d       	mov	r17, r1
    35de:	0e 94 7f 19 	call	0x32fe	; 0x32fe <homing_cycle>
  uint8_t original_limit_state = LIMIT_PIN;
  approach_limit_switch(false, false, true); // First home the z axis
  approach_limit_switch(true, true, false);  // Then home the x and y axis
  // Xor previous and current limit switch state to determine which were high then but have become 
  // low now. These are the actual installed limit switches.
  uint8_t limit_switches_present = (original_limit_state ^ LIMIT_PIN) & LIMIT_MASK;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	0e 94 7f 19 	call	0x32fe	; 0x32fe <homing_cycle>
    35ee:	83 b1       	in	r24, 0x03	; 3
  // Now carefully leave the limit switches
  leave_limit_switch(
    35f0:	8d 25       	eor	r24, r13
    35f2:	8e 70       	andi	r24, 0x0E	; 14
    35f4:	90 e0       	ldi	r25, 0x00	; 0
static void approach_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, false, 100000);
}

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
    35f6:	bc 01       	movw	r22, r24
    35f8:	76 95       	lsr	r23
    35fa:	67 95       	ror	r22
    35fc:	76 95       	lsr	r23
    35fe:	67 95       	ror	r22
    3600:	61 70       	andi	r22, 0x01	; 1
    3602:	ac 01       	movw	r20, r24
    3604:	73 e0       	ldi	r23, 0x03	; 3
    3606:	56 95       	lsr	r21
    3608:	47 95       	ror	r20
    360a:	7a 95       	dec	r23
    360c:	e1 f7       	brne	.-8      	; 0x3606 <limits_go_home+0x4e>
    360e:	41 70       	andi	r20, 0x01	; 1
    3610:	96 95       	lsr	r25
    3612:	87 95       	ror	r24
    3614:	81 70       	andi	r24, 0x01	; 1
    3616:	21 e0       	ldi	r18, 0x01	; 1
    3618:	30 e2       	ldi	r19, 0x20	; 32
    361a:	e3 2e       	mov	r14, r19
    361c:	31 ea       	ldi	r19, 0xA1	; 161
    361e:	f3 2e       	mov	r15, r19
    3620:	37 e0       	ldi	r19, 0x07	; 7
    3622:	03 2f       	mov	r16, r19
    3624:	11 2d       	mov	r17, r1
    3626:	0e 94 7f 19 	call	0x32fe	; 0x32fe <homing_cycle>
  // Now carefully leave the limit switches
  leave_limit_switch(
    limit_switches_present & (1<<X_LIMIT_BIT), 
    limit_switches_present & (1<<Y_LIMIT_BIT),
    limit_switches_present & (1<<Z_LIMIT_BIT));
}
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	08 95       	ret

00003636 <strtod>:
    3636:	a0 e0       	ldi	r26, 0x00	; 0
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e1 e2       	ldi	r30, 0x21	; 33
    363c:	fb e1       	ldi	r31, 0x1B	; 27
    363e:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0xc>
    3642:	ec 01       	movw	r28, r24
    3644:	5b 01       	movw	r10, r22
    3646:	61 15       	cp	r22, r1
    3648:	71 05       	cpc	r23, r1
    364a:	19 f0       	breq	.+6      	; 0x3652 <strtod+0x1c>
    364c:	fb 01       	movw	r30, r22
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	f9 90       	ld	r15, Y+
    3654:	8f 2d       	mov	r24, r15
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <isspace>
    365c:	89 2b       	or	r24, r25
    365e:	c9 f7       	brne	.-14     	; 0x3652 <strtod+0x1c>
    3660:	fd e2       	ldi	r31, 0x2D	; 45
    3662:	ff 16       	cp	r15, r31
    3664:	21 f4       	brne	.+8      	; 0x366e <strtod+0x38>
    3666:	f9 90       	ld	r15, Y+
    3668:	ee 24       	eor	r14, r14
    366a:	e3 94       	inc	r14
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <strtod+0x42>
    366e:	2b e2       	ldi	r18, 0x2B	; 43
    3670:	f2 16       	cp	r15, r18
    3672:	09 f4       	brne	.+2      	; 0x3676 <strtod+0x40>
    3674:	f9 90       	ld	r15, Y+
    3676:	ee 24       	eor	r14, r14
    3678:	8e 01       	movw	r16, r28
    367a:	01 50       	subi	r16, 0x01	; 1
    367c:	10 40       	sbci	r17, 0x00	; 0
    367e:	c8 01       	movw	r24, r16
    3680:	6b e5       	ldi	r22, 0x5B	; 91
    3682:	73 e0       	ldi	r23, 0x03	; 3
    3684:	43 e0       	ldi	r20, 0x03	; 3
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	0e 94 86 1c 	call	0x390c	; 0x390c <strncasecmp_P>
    368c:	89 2b       	or	r24, r25
    368e:	01 f5       	brne	.+64     	; 0x36d0 <strtod+0x9a>
    3690:	8e 01       	movw	r16, r28
    3692:	0e 5f       	subi	r16, 0xFE	; 254
    3694:	1f 4f       	sbci	r17, 0xFF	; 255
    3696:	c8 01       	movw	r24, r16
    3698:	6e e5       	ldi	r22, 0x5E	; 94
    369a:	73 e0       	ldi	r23, 0x03	; 3
    369c:	45 e0       	ldi	r20, 0x05	; 5
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 86 1c 	call	0x390c	; 0x390c <strncasecmp_P>
    36a4:	89 2b       	or	r24, r25
    36a6:	19 f4       	brne	.+6      	; 0x36ae <strtod+0x78>
    36a8:	8e 01       	movw	r16, r28
    36aa:	09 5f       	subi	r16, 0xF9	; 249
    36ac:	1f 4f       	sbci	r17, 0xFF	; 255
    36ae:	a1 14       	cp	r10, r1
    36b0:	b1 04       	cpc	r11, r1
    36b2:	19 f0       	breq	.+6      	; 0x36ba <strtod+0x84>
    36b4:	f5 01       	movw	r30, r10
    36b6:	11 83       	std	Z+1, r17	; 0x01
    36b8:	00 83       	st	Z, r16
    36ba:	e0 fc       	sbrc	r14, 0
    36bc:	04 c0       	rjmp	.+8      	; 0x36c6 <strtod+0x90>
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	80 e8       	ldi	r24, 0x80	; 128
    36c4:	14 c0       	rjmp	.+40     	; 0x36ee <strtod+0xb8>
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	80 e8       	ldi	r24, 0x80	; 128
    36cc:	6f ef       	ldi	r22, 0xFF	; 255
    36ce:	08 c1       	rjmp	.+528    	; 0x38e0 <strtod+0x2aa>
    36d0:	c8 01       	movw	r24, r16
    36d2:	63 e6       	ldi	r22, 0x63	; 99
    36d4:	73 e0       	ldi	r23, 0x03	; 3
    36d6:	43 e0       	ldi	r20, 0x03	; 3
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	0e 94 86 1c 	call	0x390c	; 0x390c <strncasecmp_P>
    36de:	89 2b       	or	r24, r25
    36e0:	69 f4       	brne	.+26     	; 0x36fc <strtod+0xc6>
    36e2:	a1 14       	cp	r10, r1
    36e4:	b1 04       	cpc	r11, r1
    36e6:	29 f4       	brne	.+10     	; 0x36f2 <strtod+0xbc>
    36e8:	70 e0       	ldi	r23, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	80 ec       	ldi	r24, 0xC0	; 192
    36ee:	6f e7       	ldi	r22, 0x7F	; 127
    36f0:	f7 c0       	rjmp	.+494    	; 0x38e0 <strtod+0x2aa>
    36f2:	22 96       	adiw	r28, 0x02	; 2
    36f4:	f5 01       	movw	r30, r10
    36f6:	d1 83       	std	Z+1, r29	; 0x01
    36f8:	c0 83       	st	Z, r28
    36fa:	f6 cf       	rjmp	.-20     	; 0x36e8 <strtod+0xb2>
    36fc:	88 24       	eor	r8, r8
    36fe:	99 24       	eor	r9, r9
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	ef 2d       	mov	r30, r15
    370a:	e0 53       	subi	r30, 0x30	; 48
    370c:	ea 30       	cpi	r30, 0x0A	; 10
    370e:	a0 f5       	brcc	.+104    	; 0x3778 <strtod+0x142>
    3710:	f2 e0       	ldi	r31, 0x02	; 2
    3712:	ef 2a       	or	r14, r31
    3714:	8e 2d       	mov	r24, r14
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	9c 01       	movw	r18, r24
    371a:	28 70       	andi	r18, 0x08	; 8
    371c:	30 70       	andi	r19, 0x00	; 0
    371e:	e2 fe       	sbrs	r14, 2
    3720:	06 c0       	rjmp	.+12     	; 0x372e <strtod+0xf8>
    3722:	23 2b       	or	r18, r19
    3724:	79 f5       	brne	.+94     	; 0x3784 <strtod+0x14e>
    3726:	08 94       	sec
    3728:	81 1c       	adc	r8, r1
    372a:	91 1c       	adc	r9, r1
    372c:	2b c0       	rjmp	.+86     	; 0x3784 <strtod+0x14e>
    372e:	23 2b       	or	r18, r19
    3730:	19 f0       	breq	.+6      	; 0x3738 <strtod+0x102>
    3732:	08 94       	sec
    3734:	81 08       	sbc	r8, r1
    3736:	91 08       	sbc	r9, r1
    3738:	db 01       	movw	r26, r22
    373a:	ca 01       	movw	r24, r20
    373c:	12 e0       	ldi	r17, 0x02	; 2
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	aa 1f       	adc	r26, r26
    3744:	bb 1f       	adc	r27, r27
    3746:	1a 95       	dec	r17
    3748:	d1 f7       	brne	.-12     	; 0x373e <strtod+0x108>
    374a:	48 0f       	add	r20, r24
    374c:	59 1f       	adc	r21, r25
    374e:	6a 1f       	adc	r22, r26
    3750:	7b 1f       	adc	r23, r27
    3752:	44 0f       	add	r20, r20
    3754:	55 1f       	adc	r21, r21
    3756:	66 1f       	adc	r22, r22
    3758:	77 1f       	adc	r23, r23
    375a:	4e 0f       	add	r20, r30
    375c:	51 1d       	adc	r21, r1
    375e:	61 1d       	adc	r22, r1
    3760:	71 1d       	adc	r23, r1
    3762:	48 39       	cpi	r20, 0x98	; 152
    3764:	29 e9       	ldi	r18, 0x99	; 153
    3766:	52 07       	cpc	r21, r18
    3768:	29 e9       	ldi	r18, 0x99	; 153
    376a:	62 07       	cpc	r22, r18
    376c:	29 e1       	ldi	r18, 0x19	; 25
    376e:	72 07       	cpc	r23, r18
    3770:	48 f0       	brcs	.+18     	; 0x3784 <strtod+0x14e>
    3772:	84 e0       	ldi	r24, 0x04	; 4
    3774:	e8 2a       	or	r14, r24
    3776:	06 c0       	rjmp	.+12     	; 0x3784 <strtod+0x14e>
    3778:	ee 3f       	cpi	r30, 0xFE	; 254
    377a:	31 f4       	brne	.+12     	; 0x3788 <strtod+0x152>
    377c:	e3 fc       	sbrc	r14, 3
    377e:	39 c0       	rjmp	.+114    	; 0x37f2 <strtod+0x1bc>
    3780:	98 e0       	ldi	r25, 0x08	; 8
    3782:	e9 2a       	or	r14, r25
    3784:	f9 90       	ld	r15, Y+
    3786:	c0 cf       	rjmp	.-128    	; 0x3708 <strtod+0xd2>
    3788:	e5 33       	cpi	r30, 0x35	; 53
    378a:	11 f0       	breq	.+4      	; 0x3790 <strtod+0x15a>
    378c:	e5 31       	cpi	r30, 0x15	; 21
    378e:	89 f5       	brne	.+98     	; 0x37f2 <strtod+0x1bc>
    3790:	29 91       	ld	r18, Y+
    3792:	2d 32       	cpi	r18, 0x2D	; 45
    3794:	19 f4       	brne	.+6      	; 0x379c <strtod+0x166>
    3796:	e0 e1       	ldi	r30, 0x10	; 16
    3798:	ee 2a       	or	r14, r30
    379a:	05 c0       	rjmp	.+10     	; 0x37a6 <strtod+0x170>
    379c:	2b 32       	cpi	r18, 0x2B	; 43
    379e:	19 f0       	breq	.+6      	; 0x37a6 <strtod+0x170>
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	03 c0       	rjmp	.+6      	; 0x37ac <strtod+0x176>
    37a6:	29 91       	ld	r18, Y+
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	e2 2f       	mov	r30, r18
    37ae:	e0 53       	subi	r30, 0x30	; 48
    37b0:	ea 30       	cpi	r30, 0x0A	; 10
    37b2:	18 f0       	brcs	.+6      	; 0x37ba <strtod+0x184>
    37b4:	c8 1b       	sub	r28, r24
    37b6:	d9 0b       	sbc	r29, r25
    37b8:	1c c0       	rjmp	.+56     	; 0x37f2 <strtod+0x1bc>
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	fc e0       	ldi	r31, 0x0C	; 12
    37c0:	20 38       	cpi	r18, 0x80	; 128
    37c2:	3f 07       	cpc	r19, r31
    37c4:	5c f4       	brge	.+22     	; 0x37dc <strtod+0x1a6>
    37c6:	c9 01       	movw	r24, r18
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	28 0f       	add	r18, r24
    37d2:	39 1f       	adc	r19, r25
    37d4:	22 0f       	add	r18, r18
    37d6:	33 1f       	adc	r19, r19
    37d8:	2e 0f       	add	r18, r30
    37da:	31 1d       	adc	r19, r1
    37dc:	e9 91       	ld	r30, Y+
    37de:	e0 53       	subi	r30, 0x30	; 48
    37e0:	ea 30       	cpi	r30, 0x0A	; 10
    37e2:	68 f3       	brcs	.-38     	; 0x37be <strtod+0x188>
    37e4:	e4 fe       	sbrs	r14, 4
    37e6:	03 c0       	rjmp	.+6      	; 0x37ee <strtod+0x1b8>
    37e8:	30 95       	com	r19
    37ea:	21 95       	neg	r18
    37ec:	3f 4f       	sbci	r19, 0xFF	; 255
    37ee:	82 0e       	add	r8, r18
    37f0:	93 1e       	adc	r9, r19
    37f2:	ce 2c       	mov	r12, r14
    37f4:	dd 24       	eor	r13, r13
    37f6:	e1 fe       	sbrs	r14, 1
    37f8:	07 c0       	rjmp	.+14     	; 0x3808 <strtod+0x1d2>
    37fa:	a1 14       	cp	r10, r1
    37fc:	b1 04       	cpc	r11, r1
    37fe:	21 f0       	breq	.+8      	; 0x3808 <strtod+0x1d2>
    3800:	21 97       	sbiw	r28, 0x01	; 1
    3802:	f5 01       	movw	r30, r10
    3804:	d1 83       	std	Z+1, r29	; 0x01
    3806:	c0 83       	st	Z, r28
    3808:	cb 01       	movw	r24, r22
    380a:	ba 01       	movw	r22, r20
    380c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__floatunsisf>
    3810:	7b 01       	movw	r14, r22
    3812:	8c 01       	movw	r16, r24
    3814:	f3 e0       	ldi	r31, 0x03	; 3
    3816:	cf 22       	and	r12, r31
    3818:	dd 24       	eor	r13, r13
    381a:	23 e0       	ldi	r18, 0x03	; 3
    381c:	c2 16       	cp	r12, r18
    381e:	d1 04       	cpc	r13, r1
    3820:	21 f4       	brne	.+8      	; 0x382a <strtod+0x1f4>
    3822:	17 fb       	bst	r17, 7
    3824:	10 95       	com	r17
    3826:	17 f9       	bld	r17, 7
    3828:	10 95       	com	r17
    382a:	57 01       	movw	r10, r14
    382c:	68 01       	movw	r12, r16
    382e:	c8 01       	movw	r24, r16
    3830:	b7 01       	movw	r22, r14
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    383e:	88 23       	and	r24, r24
    3840:	09 f4       	brne	.+2      	; 0x3844 <strtod+0x20e>
    3842:	4a c0       	rjmp	.+148    	; 0x38d8 <strtod+0x2a2>
    3844:	97 fe       	sbrs	r9, 7
    3846:	0d c0       	rjmp	.+26     	; 0x3862 <strtod+0x22c>
    3848:	2a e7       	ldi	r18, 0x7A	; 122
    384a:	e2 2e       	mov	r14, r18
    384c:	23 e0       	ldi	r18, 0x03	; 3
    384e:	f2 2e       	mov	r15, r18
    3850:	90 94       	com	r9
    3852:	81 94       	neg	r8
    3854:	91 08       	sbc	r9, r1
    3856:	93 94       	inc	r9
    3858:	c0 e2       	ldi	r28, 0x20	; 32
    385a:	d0 e0       	ldi	r29, 0x00	; 0
    385c:	00 e0       	ldi	r16, 0x00	; 0
    385e:	10 e0       	ldi	r17, 0x00	; 0
    3860:	12 c0       	rjmp	.+36     	; 0x3886 <strtod+0x250>
    3862:	92 e9       	ldi	r25, 0x92	; 146
    3864:	e9 2e       	mov	r14, r25
    3866:	93 e0       	ldi	r25, 0x03	; 3
    3868:	f9 2e       	mov	r15, r25
    386a:	f6 cf       	rjmp	.-20     	; 0x3858 <strtod+0x222>
    386c:	f7 01       	movw	r30, r14
    386e:	25 91       	lpm	r18, Z+
    3870:	35 91       	lpm	r19, Z+
    3872:	45 91       	lpm	r20, Z+
    3874:	54 91       	lpm	r21, Z+
    3876:	c6 01       	movw	r24, r12
    3878:	b5 01       	movw	r22, r10
    387a:	0e 94 46 20 	call	0x408c	; 0x408c <__mulsf3>
    387e:	5b 01       	movw	r10, r22
    3880:	6c 01       	movw	r12, r24
    3882:	8c 1a       	sub	r8, r28
    3884:	9d 0a       	sbc	r9, r29
    3886:	8c 16       	cp	r8, r28
    3888:	9d 06       	cpc	r9, r29
    388a:	84 f7       	brge	.-32     	; 0x386c <strtod+0x236>
    388c:	d5 95       	asr	r29
    388e:	c7 95       	ror	r28
    3890:	0f 5f       	subi	r16, 0xFF	; 255
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	06 30       	cpi	r16, 0x06	; 6
    3896:	11 05       	cpc	r17, r1
    3898:	29 f0       	breq	.+10     	; 0x38a4 <strtod+0x26e>
    389a:	8c ef       	ldi	r24, 0xFC	; 252
    389c:	9f ef       	ldi	r25, 0xFF	; 255
    389e:	e8 0e       	add	r14, r24
    38a0:	f9 1e       	adc	r15, r25
    38a2:	f1 cf       	rjmp	.-30     	; 0x3886 <strtod+0x250>
    38a4:	c5 01       	movw	r24, r10
    38a6:	d6 01       	movw	r26, r12
    38a8:	7c 01       	movw	r14, r24
    38aa:	8d 01       	movw	r16, r26
    38ac:	8c 2d       	mov	r24, r12
    38ae:	88 0f       	add	r24, r24
    38b0:	8d 2d       	mov	r24, r13
    38b2:	88 1f       	adc	r24, r24
    38b4:	8f 3f       	cpi	r24, 0xFF	; 255
    38b6:	51 f0       	breq	.+20     	; 0x38cc <strtod+0x296>
    38b8:	c6 01       	movw	r24, r12
    38ba:	b5 01       	movw	r22, r10
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__cmpsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	31 f4       	brne	.+12     	; 0x38d8 <strtod+0x2a2>
    38cc:	82 e2       	ldi	r24, 0x22	; 34
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	90 93 00 07 	sts	0x0700, r25
    38d4:	80 93 ff 06 	sts	0x06FF, r24
    38d8:	7e 2d       	mov	r23, r14
    38da:	9f 2d       	mov	r25, r15
    38dc:	80 2f       	mov	r24, r16
    38de:	61 2f       	mov	r22, r17
    38e0:	27 2f       	mov	r18, r23
    38e2:	39 2f       	mov	r19, r25
    38e4:	48 2f       	mov	r20, r24
    38e6:	56 2f       	mov	r21, r22
    38e8:	b9 01       	movw	r22, r18
    38ea:	ca 01       	movw	r24, r20
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	ec e0       	ldi	r30, 0x0C	; 12
    38f2:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0xc>

000038f6 <exit>:
    38f6:	f8 94       	cli
    38f8:	0c 94 f4 21 	jmp	0x43e8	; 0x43e8 <_exit>

000038fc <isspace>:
    38fc:	91 11       	cpse	r25, r1
    38fe:	9f c4       	rjmp	.+2366   	; 0x423e <__ctype_isfalse>
    3900:	80 32       	cpi	r24, 0x20	; 32
    3902:	19 f0       	breq	.+6      	; 0x390a <isspace+0xe>
    3904:	89 50       	subi	r24, 0x09	; 9
    3906:	85 50       	subi	r24, 0x05	; 5
    3908:	d0 f7       	brcc	.-12     	; 0x38fe <isspace+0x2>
    390a:	08 95       	ret

0000390c <strncasecmp_P>:
    390c:	fb 01       	movw	r30, r22
    390e:	dc 01       	movw	r26, r24
    3910:	41 50       	subi	r20, 0x01	; 1
    3912:	50 40       	sbci	r21, 0x00	; 0
    3914:	88 f0       	brcs	.+34     	; 0x3938 <strncasecmp_P+0x2c>
    3916:	8d 91       	ld	r24, X+
    3918:	81 34       	cpi	r24, 0x41	; 65
    391a:	1c f0       	brlt	.+6      	; 0x3922 <strncasecmp_P+0x16>
    391c:	8b 35       	cpi	r24, 0x5B	; 91
    391e:	0c f4       	brge	.+2      	; 0x3922 <strncasecmp_P+0x16>
    3920:	80 5e       	subi	r24, 0xE0	; 224
    3922:	65 91       	lpm	r22, Z+
    3924:	61 34       	cpi	r22, 0x41	; 65
    3926:	1c f0       	brlt	.+6      	; 0x392e <strncasecmp_P+0x22>
    3928:	6b 35       	cpi	r22, 0x5B	; 91
    392a:	0c f4       	brge	.+2      	; 0x392e <strncasecmp_P+0x22>
    392c:	60 5e       	subi	r22, 0xE0	; 224
    392e:	86 1b       	sub	r24, r22
    3930:	61 11       	cpse	r22, r1
    3932:	71 f3       	breq	.-36     	; 0x3910 <strncasecmp_P+0x4>
    3934:	99 0b       	sbc	r25, r25
    3936:	08 95       	ret
    3938:	88 1b       	sub	r24, r24
    393a:	fc cf       	rjmp	.-8      	; 0x3934 <strncasecmp_P+0x28>

0000393c <__subsf3>:
    393c:	50 58       	subi	r21, 0x80	; 128

0000393e <__addsf3>:
    393e:	bb 27       	eor	r27, r27
    3940:	aa 27       	eor	r26, r26
    3942:	0e d0       	rcall	.+28     	; 0x3960 <__addsf3x>
    3944:	3c c2       	rjmp	.+1144   	; 0x3dbe <__fp_round>
    3946:	05 d2       	rcall	.+1034   	; 0x3d52 <__fp_pscA>
    3948:	30 f0       	brcs	.+12     	; 0x3956 <__addsf3+0x18>
    394a:	0a d2       	rcall	.+1044   	; 0x3d60 <__fp_pscB>
    394c:	20 f0       	brcs	.+8      	; 0x3956 <__addsf3+0x18>
    394e:	31 f4       	brne	.+12     	; 0x395c <__addsf3+0x1e>
    3950:	9f 3f       	cpi	r25, 0xFF	; 255
    3952:	11 f4       	brne	.+4      	; 0x3958 <__addsf3+0x1a>
    3954:	1e f4       	brtc	.+6      	; 0x395c <__addsf3+0x1e>
    3956:	d5 c1       	rjmp	.+938    	; 0x3d02 <__fp_nan>
    3958:	0e f4       	brtc	.+2      	; 0x395c <__addsf3+0x1e>
    395a:	e0 95       	com	r30
    395c:	e7 fb       	bst	r30, 7
    395e:	a2 c1       	rjmp	.+836    	; 0x3ca4 <__fp_inf>

00003960 <__addsf3x>:
    3960:	e9 2f       	mov	r30, r25
    3962:	4f d2       	rcall	.+1182   	; 0x3e02 <__fp_split3>
    3964:	80 f3       	brcs	.-32     	; 0x3946 <__addsf3+0x8>
    3966:	ba 17       	cp	r27, r26
    3968:	62 07       	cpc	r22, r18
    396a:	73 07       	cpc	r23, r19
    396c:	84 07       	cpc	r24, r20
    396e:	95 07       	cpc	r25, r21
    3970:	18 f0       	brcs	.+6      	; 0x3978 <__addsf3x+0x18>
    3972:	71 f4       	brne	.+28     	; 0x3990 <__addsf3x+0x30>
    3974:	9e f5       	brtc	.+102    	; 0x39dc <__addsf3x+0x7c>
    3976:	7e c2       	rjmp	.+1276   	; 0x3e74 <__fp_zero>
    3978:	0e f4       	brtc	.+2      	; 0x397c <__addsf3x+0x1c>
    397a:	e0 95       	com	r30
    397c:	0b 2e       	mov	r0, r27
    397e:	ba 2f       	mov	r27, r26
    3980:	a0 2d       	mov	r26, r0
    3982:	0b 01       	movw	r0, r22
    3984:	b9 01       	movw	r22, r18
    3986:	90 01       	movw	r18, r0
    3988:	0c 01       	movw	r0, r24
    398a:	ca 01       	movw	r24, r20
    398c:	a0 01       	movw	r20, r0
    398e:	11 24       	eor	r1, r1
    3990:	ff 27       	eor	r31, r31
    3992:	59 1b       	sub	r21, r25
    3994:	99 f0       	breq	.+38     	; 0x39bc <__addsf3x+0x5c>
    3996:	59 3f       	cpi	r21, 0xF9	; 249
    3998:	50 f4       	brcc	.+20     	; 0x39ae <__addsf3x+0x4e>
    399a:	50 3e       	cpi	r21, 0xE0	; 224
    399c:	68 f1       	brcs	.+90     	; 0x39f8 <__addsf3x+0x98>
    399e:	1a 16       	cp	r1, r26
    39a0:	f0 40       	sbci	r31, 0x00	; 0
    39a2:	a2 2f       	mov	r26, r18
    39a4:	23 2f       	mov	r18, r19
    39a6:	34 2f       	mov	r19, r20
    39a8:	44 27       	eor	r20, r20
    39aa:	58 5f       	subi	r21, 0xF8	; 248
    39ac:	f3 cf       	rjmp	.-26     	; 0x3994 <__addsf3x+0x34>
    39ae:	46 95       	lsr	r20
    39b0:	37 95       	ror	r19
    39b2:	27 95       	ror	r18
    39b4:	a7 95       	ror	r26
    39b6:	f0 40       	sbci	r31, 0x00	; 0
    39b8:	53 95       	inc	r21
    39ba:	c9 f7       	brne	.-14     	; 0x39ae <__addsf3x+0x4e>
    39bc:	7e f4       	brtc	.+30     	; 0x39dc <__addsf3x+0x7c>
    39be:	1f 16       	cp	r1, r31
    39c0:	ba 0b       	sbc	r27, r26
    39c2:	62 0b       	sbc	r22, r18
    39c4:	73 0b       	sbc	r23, r19
    39c6:	84 0b       	sbc	r24, r20
    39c8:	ba f0       	brmi	.+46     	; 0x39f8 <__addsf3x+0x98>
    39ca:	91 50       	subi	r25, 0x01	; 1
    39cc:	a1 f0       	breq	.+40     	; 0x39f6 <__addsf3x+0x96>
    39ce:	ff 0f       	add	r31, r31
    39d0:	bb 1f       	adc	r27, r27
    39d2:	66 1f       	adc	r22, r22
    39d4:	77 1f       	adc	r23, r23
    39d6:	88 1f       	adc	r24, r24
    39d8:	c2 f7       	brpl	.-16     	; 0x39ca <__addsf3x+0x6a>
    39da:	0e c0       	rjmp	.+28     	; 0x39f8 <__addsf3x+0x98>
    39dc:	ba 0f       	add	r27, r26
    39de:	62 1f       	adc	r22, r18
    39e0:	73 1f       	adc	r23, r19
    39e2:	84 1f       	adc	r24, r20
    39e4:	48 f4       	brcc	.+18     	; 0x39f8 <__addsf3x+0x98>
    39e6:	87 95       	ror	r24
    39e8:	77 95       	ror	r23
    39ea:	67 95       	ror	r22
    39ec:	b7 95       	ror	r27
    39ee:	f7 95       	ror	r31
    39f0:	9e 3f       	cpi	r25, 0xFE	; 254
    39f2:	08 f0       	brcs	.+2      	; 0x39f6 <__addsf3x+0x96>
    39f4:	b3 cf       	rjmp	.-154    	; 0x395c <__addsf3+0x1e>
    39f6:	93 95       	inc	r25
    39f8:	88 0f       	add	r24, r24
    39fa:	08 f0       	brcs	.+2      	; 0x39fe <__addsf3x+0x9e>
    39fc:	99 27       	eor	r25, r25
    39fe:	ee 0f       	add	r30, r30
    3a00:	97 95       	ror	r25
    3a02:	87 95       	ror	r24
    3a04:	08 95       	ret

00003a06 <atan>:
    3a06:	df 93       	push	r29
    3a08:	dd 27       	eor	r29, r29
    3a0a:	b9 2f       	mov	r27, r25
    3a0c:	bf 77       	andi	r27, 0x7F	; 127
    3a0e:	40 e8       	ldi	r20, 0x80	; 128
    3a10:	5f e3       	ldi	r21, 0x3F	; 63
    3a12:	16 16       	cp	r1, r22
    3a14:	17 06       	cpc	r1, r23
    3a16:	48 07       	cpc	r20, r24
    3a18:	5b 07       	cpc	r21, r27
    3a1a:	10 f4       	brcc	.+4      	; 0x3a20 <atan+0x1a>
    3a1c:	d9 2f       	mov	r29, r25
    3a1e:	96 d2       	rcall	.+1324   	; 0x3f4c <inverse>
    3a20:	9f 93       	push	r25
    3a22:	8f 93       	push	r24
    3a24:	7f 93       	push	r23
    3a26:	6f 93       	push	r22
    3a28:	fc d3       	rcall	.+2040   	; 0x4222 <square>
    3a2a:	e8 e6       	ldi	r30, 0x68	; 104
    3a2c:	f0 e0       	ldi	r31, 0x00	; 0
    3a2e:	6c d1       	rcall	.+728    	; 0x3d08 <__fp_powser>
    3a30:	c6 d1       	rcall	.+908    	; 0x3dbe <__fp_round>
    3a32:	2f 91       	pop	r18
    3a34:	3f 91       	pop	r19
    3a36:	4f 91       	pop	r20
    3a38:	5f 91       	pop	r21
    3a3a:	34 d3       	rcall	.+1640   	; 0x40a4 <__mulsf3x>
    3a3c:	dd 23       	and	r29, r29
    3a3e:	49 f0       	breq	.+18     	; 0x3a52 <atan+0x4c>
    3a40:	90 58       	subi	r25, 0x80	; 128
    3a42:	a2 ea       	ldi	r26, 0xA2	; 162
    3a44:	2a ed       	ldi	r18, 0xDA	; 218
    3a46:	3f e0       	ldi	r19, 0x0F	; 15
    3a48:	49 ec       	ldi	r20, 0xC9	; 201
    3a4a:	5f e3       	ldi	r21, 0x3F	; 63
    3a4c:	d0 78       	andi	r29, 0x80	; 128
    3a4e:	5d 27       	eor	r21, r29
    3a50:	87 df       	rcall	.-242    	; 0x3960 <__addsf3x>
    3a52:	df 91       	pop	r29
    3a54:	b4 c1       	rjmp	.+872    	; 0x3dbe <__fp_round>

00003a56 <ceil>:
    3a56:	f7 d1       	rcall	.+1006   	; 0x3e46 <__fp_trunc>
    3a58:	80 f0       	brcs	.+32     	; 0x3a7a <ceil+0x24>
    3a5a:	9f 37       	cpi	r25, 0x7F	; 127
    3a5c:	40 f4       	brcc	.+16     	; 0x3a6e <ceil+0x18>
    3a5e:	91 11       	cpse	r25, r1
    3a60:	0e f4       	brtc	.+2      	; 0x3a64 <ceil+0xe>
    3a62:	09 c2       	rjmp	.+1042   	; 0x3e76 <__fp_szero>
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	80 e8       	ldi	r24, 0x80	; 128
    3a6a:	9f e3       	ldi	r25, 0x3F	; 63
    3a6c:	08 95       	ret
    3a6e:	26 f0       	brts	.+8      	; 0x3a78 <ceil+0x22>
    3a70:	1b 16       	cp	r1, r27
    3a72:	61 1d       	adc	r22, r1
    3a74:	71 1d       	adc	r23, r1
    3a76:	81 1d       	adc	r24, r1
    3a78:	1b c1       	rjmp	.+566    	; 0x3cb0 <__fp_mintl>
    3a7a:	35 c1       	rjmp	.+618    	; 0x3ce6 <__fp_mpack>

00003a7c <__cmpsf2>:
    3a7c:	ef d0       	rcall	.+478    	; 0x3c5c <__fp_cmp>
    3a7e:	08 f4       	brcc	.+2      	; 0x3a82 <__cmpsf2+0x6>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	08 95       	ret

00003a84 <cos>:
    3a84:	75 d1       	rcall	.+746    	; 0x3d70 <__fp_rempio2>
    3a86:	e3 95       	inc	r30
    3a88:	ab c1       	rjmp	.+854    	; 0x3de0 <__fp_sinus>

00003a8a <__divsf3>:
    3a8a:	0c d0       	rcall	.+24     	; 0x3aa4 <__divsf3x>
    3a8c:	98 c1       	rjmp	.+816    	; 0x3dbe <__fp_round>
    3a8e:	68 d1       	rcall	.+720    	; 0x3d60 <__fp_pscB>
    3a90:	40 f0       	brcs	.+16     	; 0x3aa2 <__divsf3+0x18>
    3a92:	5f d1       	rcall	.+702    	; 0x3d52 <__fp_pscA>
    3a94:	30 f0       	brcs	.+12     	; 0x3aa2 <__divsf3+0x18>
    3a96:	21 f4       	brne	.+8      	; 0x3aa0 <__divsf3+0x16>
    3a98:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9a:	19 f0       	breq	.+6      	; 0x3aa2 <__divsf3+0x18>
    3a9c:	03 c1       	rjmp	.+518    	; 0x3ca4 <__fp_inf>
    3a9e:	51 11       	cpse	r21, r1
    3aa0:	ea c1       	rjmp	.+980    	; 0x3e76 <__fp_szero>
    3aa2:	2f c1       	rjmp	.+606    	; 0x3d02 <__fp_nan>

00003aa4 <__divsf3x>:
    3aa4:	ae d1       	rcall	.+860    	; 0x3e02 <__fp_split3>
    3aa6:	98 f3       	brcs	.-26     	; 0x3a8e <__divsf3+0x4>

00003aa8 <__divsf3_pse>:
    3aa8:	99 23       	and	r25, r25
    3aaa:	c9 f3       	breq	.-14     	; 0x3a9e <__divsf3+0x14>
    3aac:	55 23       	and	r21, r21
    3aae:	b1 f3       	breq	.-20     	; 0x3a9c <__divsf3+0x12>
    3ab0:	95 1b       	sub	r25, r21
    3ab2:	55 0b       	sbc	r21, r21
    3ab4:	bb 27       	eor	r27, r27
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	62 17       	cp	r22, r18
    3aba:	73 07       	cpc	r23, r19
    3abc:	84 07       	cpc	r24, r20
    3abe:	38 f0       	brcs	.+14     	; 0x3ace <__divsf3_pse+0x26>
    3ac0:	9f 5f       	subi	r25, 0xFF	; 255
    3ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac4:	22 0f       	add	r18, r18
    3ac6:	33 1f       	adc	r19, r19
    3ac8:	44 1f       	adc	r20, r20
    3aca:	aa 1f       	adc	r26, r26
    3acc:	a9 f3       	breq	.-22     	; 0x3ab8 <__divsf3_pse+0x10>
    3ace:	33 d0       	rcall	.+102    	; 0x3b36 <__divsf3_pse+0x8e>
    3ad0:	0e 2e       	mov	r0, r30
    3ad2:	3a f0       	brmi	.+14     	; 0x3ae2 <__divsf3_pse+0x3a>
    3ad4:	e0 e8       	ldi	r30, 0x80	; 128
    3ad6:	30 d0       	rcall	.+96     	; 0x3b38 <__divsf3_pse+0x90>
    3ad8:	91 50       	subi	r25, 0x01	; 1
    3ada:	50 40       	sbci	r21, 0x00	; 0
    3adc:	e6 95       	lsr	r30
    3ade:	00 1c       	adc	r0, r0
    3ae0:	ca f7       	brpl	.-14     	; 0x3ad4 <__divsf3_pse+0x2c>
    3ae2:	29 d0       	rcall	.+82     	; 0x3b36 <__divsf3_pse+0x8e>
    3ae4:	fe 2f       	mov	r31, r30
    3ae6:	27 d0       	rcall	.+78     	; 0x3b36 <__divsf3_pse+0x8e>
    3ae8:	66 0f       	add	r22, r22
    3aea:	77 1f       	adc	r23, r23
    3aec:	88 1f       	adc	r24, r24
    3aee:	bb 1f       	adc	r27, r27
    3af0:	26 17       	cp	r18, r22
    3af2:	37 07       	cpc	r19, r23
    3af4:	48 07       	cpc	r20, r24
    3af6:	ab 07       	cpc	r26, r27
    3af8:	b0 e8       	ldi	r27, 0x80	; 128
    3afa:	09 f0       	breq	.+2      	; 0x3afe <__divsf3_pse+0x56>
    3afc:	bb 0b       	sbc	r27, r27
    3afe:	80 2d       	mov	r24, r0
    3b00:	bf 01       	movw	r22, r30
    3b02:	ff 27       	eor	r31, r31
    3b04:	93 58       	subi	r25, 0x83	; 131
    3b06:	5f 4f       	sbci	r21, 0xFF	; 255
    3b08:	2a f0       	brmi	.+10     	; 0x3b14 <__divsf3_pse+0x6c>
    3b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	68 f0       	brcs	.+26     	; 0x3b2a <__divsf3_pse+0x82>
    3b10:	c9 c0       	rjmp	.+402    	; 0x3ca4 <__fp_inf>
    3b12:	b1 c1       	rjmp	.+866    	; 0x3e76 <__fp_szero>
    3b14:	5f 3f       	cpi	r21, 0xFF	; 255
    3b16:	ec f3       	brlt	.-6      	; 0x3b12 <__divsf3_pse+0x6a>
    3b18:	98 3e       	cpi	r25, 0xE8	; 232
    3b1a:	dc f3       	brlt	.-10     	; 0x3b12 <__divsf3_pse+0x6a>
    3b1c:	86 95       	lsr	r24
    3b1e:	77 95       	ror	r23
    3b20:	67 95       	ror	r22
    3b22:	b7 95       	ror	r27
    3b24:	f7 95       	ror	r31
    3b26:	9f 5f       	subi	r25, 0xFF	; 255
    3b28:	c9 f7       	brne	.-14     	; 0x3b1c <__divsf3_pse+0x74>
    3b2a:	88 0f       	add	r24, r24
    3b2c:	91 1d       	adc	r25, r1
    3b2e:	96 95       	lsr	r25
    3b30:	87 95       	ror	r24
    3b32:	97 f9       	bld	r25, 7
    3b34:	08 95       	ret
    3b36:	e1 e0       	ldi	r30, 0x01	; 1
    3b38:	66 0f       	add	r22, r22
    3b3a:	77 1f       	adc	r23, r23
    3b3c:	88 1f       	adc	r24, r24
    3b3e:	bb 1f       	adc	r27, r27
    3b40:	62 17       	cp	r22, r18
    3b42:	73 07       	cpc	r23, r19
    3b44:	84 07       	cpc	r24, r20
    3b46:	ba 07       	cpc	r27, r26
    3b48:	20 f0       	brcs	.+8      	; 0x3b52 <__divsf3_pse+0xaa>
    3b4a:	62 1b       	sub	r22, r18
    3b4c:	73 0b       	sbc	r23, r19
    3b4e:	84 0b       	sbc	r24, r20
    3b50:	ba 0b       	sbc	r27, r26
    3b52:	ee 1f       	adc	r30, r30
    3b54:	88 f7       	brcc	.-30     	; 0x3b38 <__divsf3_pse+0x90>
    3b56:	e0 95       	com	r30
    3b58:	08 95       	ret

00003b5a <__fixsfsi>:
    3b5a:	04 d0       	rcall	.+8      	; 0x3b64 <__fixunssfsi>
    3b5c:	68 94       	set
    3b5e:	b1 11       	cpse	r27, r1
    3b60:	8a c1       	rjmp	.+788    	; 0x3e76 <__fp_szero>
    3b62:	08 95       	ret

00003b64 <__fixunssfsi>:
    3b64:	56 d1       	rcall	.+684    	; 0x3e12 <__fp_splitA>
    3b66:	88 f0       	brcs	.+34     	; 0x3b8a <__fixunssfsi+0x26>
    3b68:	9f 57       	subi	r25, 0x7F	; 127
    3b6a:	90 f0       	brcs	.+36     	; 0x3b90 <__fixunssfsi+0x2c>
    3b6c:	b9 2f       	mov	r27, r25
    3b6e:	99 27       	eor	r25, r25
    3b70:	b7 51       	subi	r27, 0x17	; 23
    3b72:	a0 f0       	brcs	.+40     	; 0x3b9c <__fixunssfsi+0x38>
    3b74:	d1 f0       	breq	.+52     	; 0x3baa <__fixunssfsi+0x46>
    3b76:	66 0f       	add	r22, r22
    3b78:	77 1f       	adc	r23, r23
    3b7a:	88 1f       	adc	r24, r24
    3b7c:	99 1f       	adc	r25, r25
    3b7e:	1a f0       	brmi	.+6      	; 0x3b86 <__fixunssfsi+0x22>
    3b80:	ba 95       	dec	r27
    3b82:	c9 f7       	brne	.-14     	; 0x3b76 <__fixunssfsi+0x12>
    3b84:	12 c0       	rjmp	.+36     	; 0x3baa <__fixunssfsi+0x46>
    3b86:	b1 30       	cpi	r27, 0x01	; 1
    3b88:	81 f0       	breq	.+32     	; 0x3baa <__fixunssfsi+0x46>
    3b8a:	74 d1       	rcall	.+744    	; 0x3e74 <__fp_zero>
    3b8c:	b1 e0       	ldi	r27, 0x01	; 1
    3b8e:	08 95       	ret
    3b90:	71 c1       	rjmp	.+738    	; 0x3e74 <__fp_zero>
    3b92:	67 2f       	mov	r22, r23
    3b94:	78 2f       	mov	r23, r24
    3b96:	88 27       	eor	r24, r24
    3b98:	b8 5f       	subi	r27, 0xF8	; 248
    3b9a:	39 f0       	breq	.+14     	; 0x3baa <__fixunssfsi+0x46>
    3b9c:	b9 3f       	cpi	r27, 0xF9	; 249
    3b9e:	cc f3       	brlt	.-14     	; 0x3b92 <__fixunssfsi+0x2e>
    3ba0:	86 95       	lsr	r24
    3ba2:	77 95       	ror	r23
    3ba4:	67 95       	ror	r22
    3ba6:	b3 95       	inc	r27
    3ba8:	d9 f7       	brne	.-10     	; 0x3ba0 <__fixunssfsi+0x3c>
    3baa:	3e f4       	brtc	.+14     	; 0x3bba <__fixunssfsi+0x56>
    3bac:	90 95       	com	r25
    3bae:	80 95       	com	r24
    3bb0:	70 95       	com	r23
    3bb2:	61 95       	neg	r22
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bba:	08 95       	ret

00003bbc <__floatunsisf>:
    3bbc:	e8 94       	clt
    3bbe:	09 c0       	rjmp	.+18     	; 0x3bd2 <__floatsisf+0x12>

00003bc0 <__floatsisf>:
    3bc0:	97 fb       	bst	r25, 7
    3bc2:	3e f4       	brtc	.+14     	; 0x3bd2 <__floatsisf+0x12>
    3bc4:	90 95       	com	r25
    3bc6:	80 95       	com	r24
    3bc8:	70 95       	com	r23
    3bca:	61 95       	neg	r22
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bce:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd2:	99 23       	and	r25, r25
    3bd4:	a9 f0       	breq	.+42     	; 0x3c00 <__floatsisf+0x40>
    3bd6:	f9 2f       	mov	r31, r25
    3bd8:	96 e9       	ldi	r25, 0x96	; 150
    3bda:	bb 27       	eor	r27, r27
    3bdc:	93 95       	inc	r25
    3bde:	f6 95       	lsr	r31
    3be0:	87 95       	ror	r24
    3be2:	77 95       	ror	r23
    3be4:	67 95       	ror	r22
    3be6:	b7 95       	ror	r27
    3be8:	f1 11       	cpse	r31, r1
    3bea:	f8 cf       	rjmp	.-16     	; 0x3bdc <__floatsisf+0x1c>
    3bec:	fa f4       	brpl	.+62     	; 0x3c2c <__floatsisf+0x6c>
    3bee:	bb 0f       	add	r27, r27
    3bf0:	11 f4       	brne	.+4      	; 0x3bf6 <__floatsisf+0x36>
    3bf2:	60 ff       	sbrs	r22, 0
    3bf4:	1b c0       	rjmp	.+54     	; 0x3c2c <__floatsisf+0x6c>
    3bf6:	6f 5f       	subi	r22, 0xFF	; 255
    3bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfa:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfe:	16 c0       	rjmp	.+44     	; 0x3c2c <__floatsisf+0x6c>
    3c00:	88 23       	and	r24, r24
    3c02:	11 f0       	breq	.+4      	; 0x3c08 <__floatsisf+0x48>
    3c04:	96 e9       	ldi	r25, 0x96	; 150
    3c06:	11 c0       	rjmp	.+34     	; 0x3c2a <__floatsisf+0x6a>
    3c08:	77 23       	and	r23, r23
    3c0a:	21 f0       	breq	.+8      	; 0x3c14 <__floatsisf+0x54>
    3c0c:	9e e8       	ldi	r25, 0x8E	; 142
    3c0e:	87 2f       	mov	r24, r23
    3c10:	76 2f       	mov	r23, r22
    3c12:	05 c0       	rjmp	.+10     	; 0x3c1e <__floatsisf+0x5e>
    3c14:	66 23       	and	r22, r22
    3c16:	71 f0       	breq	.+28     	; 0x3c34 <__floatsisf+0x74>
    3c18:	96 e8       	ldi	r25, 0x86	; 134
    3c1a:	86 2f       	mov	r24, r22
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	2a f0       	brmi	.+10     	; 0x3c2c <__floatsisf+0x6c>
    3c22:	9a 95       	dec	r25
    3c24:	66 0f       	add	r22, r22
    3c26:	77 1f       	adc	r23, r23
    3c28:	88 1f       	adc	r24, r24
    3c2a:	da f7       	brpl	.-10     	; 0x3c22 <__floatsisf+0x62>
    3c2c:	88 0f       	add	r24, r24
    3c2e:	96 95       	lsr	r25
    3c30:	87 95       	ror	r24
    3c32:	97 f9       	bld	r25, 7
    3c34:	08 95       	ret

00003c36 <floor>:
    3c36:	07 d1       	rcall	.+526    	; 0x3e46 <__fp_trunc>
    3c38:	80 f0       	brcs	.+32     	; 0x3c5a <floor+0x24>
    3c3a:	9f 37       	cpi	r25, 0x7F	; 127
    3c3c:	40 f4       	brcc	.+16     	; 0x3c4e <floor+0x18>
    3c3e:	91 11       	cpse	r25, r1
    3c40:	0e f0       	brts	.+2      	; 0x3c44 <floor+0xe>
    3c42:	19 c1       	rjmp	.+562    	; 0x3e76 <__fp_szero>
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	80 e8       	ldi	r24, 0x80	; 128
    3c4a:	9f eb       	ldi	r25, 0xBF	; 191
    3c4c:	08 95       	ret
    3c4e:	26 f4       	brtc	.+8      	; 0x3c58 <floor+0x22>
    3c50:	1b 16       	cp	r1, r27
    3c52:	61 1d       	adc	r22, r1
    3c54:	71 1d       	adc	r23, r1
    3c56:	81 1d       	adc	r24, r1
    3c58:	2b c0       	rjmp	.+86     	; 0x3cb0 <__fp_mintl>
    3c5a:	45 c0       	rjmp	.+138    	; 0x3ce6 <__fp_mpack>

00003c5c <__fp_cmp>:
    3c5c:	99 0f       	add	r25, r25
    3c5e:	00 08       	sbc	r0, r0
    3c60:	55 0f       	add	r21, r21
    3c62:	aa 0b       	sbc	r26, r26
    3c64:	e0 e8       	ldi	r30, 0x80	; 128
    3c66:	fe ef       	ldi	r31, 0xFE	; 254
    3c68:	16 16       	cp	r1, r22
    3c6a:	17 06       	cpc	r1, r23
    3c6c:	e8 07       	cpc	r30, r24
    3c6e:	f9 07       	cpc	r31, r25
    3c70:	c0 f0       	brcs	.+48     	; 0x3ca2 <__fp_cmp+0x46>
    3c72:	12 16       	cp	r1, r18
    3c74:	13 06       	cpc	r1, r19
    3c76:	e4 07       	cpc	r30, r20
    3c78:	f5 07       	cpc	r31, r21
    3c7a:	98 f0       	brcs	.+38     	; 0x3ca2 <__fp_cmp+0x46>
    3c7c:	62 1b       	sub	r22, r18
    3c7e:	73 0b       	sbc	r23, r19
    3c80:	84 0b       	sbc	r24, r20
    3c82:	95 0b       	sbc	r25, r21
    3c84:	39 f4       	brne	.+14     	; 0x3c94 <__fp_cmp+0x38>
    3c86:	0a 26       	eor	r0, r26
    3c88:	61 f0       	breq	.+24     	; 0x3ca2 <__fp_cmp+0x46>
    3c8a:	23 2b       	or	r18, r19
    3c8c:	24 2b       	or	r18, r20
    3c8e:	25 2b       	or	r18, r21
    3c90:	21 f4       	brne	.+8      	; 0x3c9a <__fp_cmp+0x3e>
    3c92:	08 95       	ret
    3c94:	0a 26       	eor	r0, r26
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <__fp_cmp+0x3e>
    3c98:	a1 40       	sbci	r26, 0x01	; 1
    3c9a:	a6 95       	lsr	r26
    3c9c:	8f ef       	ldi	r24, 0xFF	; 255
    3c9e:	81 1d       	adc	r24, r1
    3ca0:	81 1d       	adc	r24, r1
    3ca2:	08 95       	ret

00003ca4 <__fp_inf>:
    3ca4:	97 f9       	bld	r25, 7
    3ca6:	9f 67       	ori	r25, 0x7F	; 127
    3ca8:	80 e8       	ldi	r24, 0x80	; 128
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	08 95       	ret

00003cb0 <__fp_mintl>:
    3cb0:	88 23       	and	r24, r24
    3cb2:	71 f4       	brne	.+28     	; 0x3cd0 <__fp_mintl+0x20>
    3cb4:	77 23       	and	r23, r23
    3cb6:	21 f0       	breq	.+8      	; 0x3cc0 <__fp_mintl+0x10>
    3cb8:	98 50       	subi	r25, 0x08	; 8
    3cba:	87 2b       	or	r24, r23
    3cbc:	76 2f       	mov	r23, r22
    3cbe:	07 c0       	rjmp	.+14     	; 0x3cce <__fp_mintl+0x1e>
    3cc0:	66 23       	and	r22, r22
    3cc2:	11 f4       	brne	.+4      	; 0x3cc8 <__fp_mintl+0x18>
    3cc4:	99 27       	eor	r25, r25
    3cc6:	0d c0       	rjmp	.+26     	; 0x3ce2 <__fp_mintl+0x32>
    3cc8:	90 51       	subi	r25, 0x10	; 16
    3cca:	86 2b       	or	r24, r22
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	2a f0       	brmi	.+10     	; 0x3cdc <__fp_mintl+0x2c>
    3cd2:	9a 95       	dec	r25
    3cd4:	66 0f       	add	r22, r22
    3cd6:	77 1f       	adc	r23, r23
    3cd8:	88 1f       	adc	r24, r24
    3cda:	da f7       	brpl	.-10     	; 0x3cd2 <__fp_mintl+0x22>
    3cdc:	88 0f       	add	r24, r24
    3cde:	96 95       	lsr	r25
    3ce0:	87 95       	ror	r24
    3ce2:	97 f9       	bld	r25, 7
    3ce4:	08 95       	ret

00003ce6 <__fp_mpack>:
    3ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce8:	31 f0       	breq	.+12     	; 0x3cf6 <__fp_mpack_finite+0xc>

00003cea <__fp_mpack_finite>:
    3cea:	91 50       	subi	r25, 0x01	; 1
    3cec:	20 f4       	brcc	.+8      	; 0x3cf6 <__fp_mpack_finite+0xc>
    3cee:	87 95       	ror	r24
    3cf0:	77 95       	ror	r23
    3cf2:	67 95       	ror	r22
    3cf4:	b7 95       	ror	r27
    3cf6:	88 0f       	add	r24, r24
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	96 95       	lsr	r25
    3cfc:	87 95       	ror	r24
    3cfe:	97 f9       	bld	r25, 7
    3d00:	08 95       	ret

00003d02 <__fp_nan>:
    3d02:	9f ef       	ldi	r25, 0xFF	; 255
    3d04:	80 ec       	ldi	r24, 0xC0	; 192
    3d06:	08 95       	ret

00003d08 <__fp_powser>:
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	1f 93       	push	r17
    3d0e:	0f 93       	push	r16
    3d10:	ff 92       	push	r15
    3d12:	ef 92       	push	r14
    3d14:	df 92       	push	r13
    3d16:	7b 01       	movw	r14, r22
    3d18:	8c 01       	movw	r16, r24
    3d1a:	68 94       	set
    3d1c:	05 c0       	rjmp	.+10     	; 0x3d28 <__fp_powser+0x20>
    3d1e:	da 2e       	mov	r13, r26
    3d20:	ef 01       	movw	r28, r30
    3d22:	c0 d1       	rcall	.+896    	; 0x40a4 <__mulsf3x>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e8 94       	clt
    3d28:	a5 91       	lpm	r26, Z+
    3d2a:	25 91       	lpm	r18, Z+
    3d2c:	35 91       	lpm	r19, Z+
    3d2e:	45 91       	lpm	r20, Z+
    3d30:	55 91       	lpm	r21, Z+
    3d32:	ae f3       	brts	.-22     	; 0x3d1e <__fp_powser+0x16>
    3d34:	ef 01       	movw	r28, r30
    3d36:	14 de       	rcall	.-984    	; 0x3960 <__addsf3x>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	97 01       	movw	r18, r14
    3d3c:	a8 01       	movw	r20, r16
    3d3e:	da 94       	dec	r13
    3d40:	79 f7       	brne	.-34     	; 0x3d20 <__fp_powser+0x18>
    3d42:	df 90       	pop	r13
    3d44:	ef 90       	pop	r14
    3d46:	ff 90       	pop	r15
    3d48:	0f 91       	pop	r16
    3d4a:	1f 91       	pop	r17
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	08 95       	ret

00003d52 <__fp_pscA>:
    3d52:	00 24       	eor	r0, r0
    3d54:	0a 94       	dec	r0
    3d56:	16 16       	cp	r1, r22
    3d58:	17 06       	cpc	r1, r23
    3d5a:	18 06       	cpc	r1, r24
    3d5c:	09 06       	cpc	r0, r25
    3d5e:	08 95       	ret

00003d60 <__fp_pscB>:
    3d60:	00 24       	eor	r0, r0
    3d62:	0a 94       	dec	r0
    3d64:	12 16       	cp	r1, r18
    3d66:	13 06       	cpc	r1, r19
    3d68:	14 06       	cpc	r1, r20
    3d6a:	05 06       	cpc	r0, r21
    3d6c:	08 95       	ret
    3d6e:	c9 cf       	rjmp	.-110    	; 0x3d02 <__fp_nan>

00003d70 <__fp_rempio2>:
    3d70:	50 d0       	rcall	.+160    	; 0x3e12 <__fp_splitA>
    3d72:	e8 f3       	brcs	.-6      	; 0x3d6e <__fp_pscB+0xe>
    3d74:	e8 94       	clt
    3d76:	e0 e0       	ldi	r30, 0x00	; 0
    3d78:	bb 27       	eor	r27, r27
    3d7a:	9f 57       	subi	r25, 0x7F	; 127
    3d7c:	f0 f0       	brcs	.+60     	; 0x3dba <__fp_rempio2+0x4a>
    3d7e:	2a ed       	ldi	r18, 0xDA	; 218
    3d80:	3f e0       	ldi	r19, 0x0F	; 15
    3d82:	49 ec       	ldi	r20, 0xC9	; 201
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <__fp_rempio2+0x22>
    3d86:	ee 0f       	add	r30, r30
    3d88:	bb 0f       	add	r27, r27
    3d8a:	66 1f       	adc	r22, r22
    3d8c:	77 1f       	adc	r23, r23
    3d8e:	88 1f       	adc	r24, r24
    3d90:	28 f0       	brcs	.+10     	; 0x3d9c <__fp_rempio2+0x2c>
    3d92:	b2 3a       	cpi	r27, 0xA2	; 162
    3d94:	62 07       	cpc	r22, r18
    3d96:	73 07       	cpc	r23, r19
    3d98:	84 07       	cpc	r24, r20
    3d9a:	28 f0       	brcs	.+10     	; 0x3da6 <__fp_rempio2+0x36>
    3d9c:	b2 5a       	subi	r27, 0xA2	; 162
    3d9e:	62 0b       	sbc	r22, r18
    3da0:	73 0b       	sbc	r23, r19
    3da2:	84 0b       	sbc	r24, r20
    3da4:	e3 95       	inc	r30
    3da6:	9a 95       	dec	r25
    3da8:	72 f7       	brpl	.-36     	; 0x3d86 <__fp_rempio2+0x16>
    3daa:	80 38       	cpi	r24, 0x80	; 128
    3dac:	30 f4       	brcc	.+12     	; 0x3dba <__fp_rempio2+0x4a>
    3dae:	9a 95       	dec	r25
    3db0:	bb 0f       	add	r27, r27
    3db2:	66 1f       	adc	r22, r22
    3db4:	77 1f       	adc	r23, r23
    3db6:	88 1f       	adc	r24, r24
    3db8:	d2 f7       	brpl	.-12     	; 0x3dae <__fp_rempio2+0x3e>
    3dba:	90 48       	sbci	r25, 0x80	; 128
    3dbc:	96 cf       	rjmp	.-212    	; 0x3cea <__fp_mpack_finite>

00003dbe <__fp_round>:
    3dbe:	09 2e       	mov	r0, r25
    3dc0:	03 94       	inc	r0
    3dc2:	00 0c       	add	r0, r0
    3dc4:	11 f4       	brne	.+4      	; 0x3dca <__fp_round+0xc>
    3dc6:	88 23       	and	r24, r24
    3dc8:	52 f0       	brmi	.+20     	; 0x3dde <__fp_round+0x20>
    3dca:	bb 0f       	add	r27, r27
    3dcc:	40 f4       	brcc	.+16     	; 0x3dde <__fp_round+0x20>
    3dce:	bf 2b       	or	r27, r31
    3dd0:	11 f4       	brne	.+4      	; 0x3dd6 <__fp_round+0x18>
    3dd2:	60 ff       	sbrs	r22, 0
    3dd4:	04 c0       	rjmp	.+8      	; 0x3dde <__fp_round+0x20>
    3dd6:	6f 5f       	subi	r22, 0xFF	; 255
    3dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dda:	8f 4f       	sbci	r24, 0xFF	; 255
    3ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dde:	08 95       	ret

00003de0 <__fp_sinus>:
    3de0:	ef 93       	push	r30
    3de2:	e0 ff       	sbrs	r30, 0
    3de4:	06 c0       	rjmp	.+12     	; 0x3df2 <__fp_sinus+0x12>
    3de6:	a2 ea       	ldi	r26, 0xA2	; 162
    3de8:	2a ed       	ldi	r18, 0xDA	; 218
    3dea:	3f e0       	ldi	r19, 0x0F	; 15
    3dec:	49 ec       	ldi	r20, 0xC9	; 201
    3dee:	5f eb       	ldi	r21, 0xBF	; 191
    3df0:	b7 dd       	rcall	.-1170   	; 0x3960 <__addsf3x>
    3df2:	e5 df       	rcall	.-54     	; 0x3dbe <__fp_round>
    3df4:	0f 90       	pop	r0
    3df6:	03 94       	inc	r0
    3df8:	01 fc       	sbrc	r0, 1
    3dfa:	90 58       	subi	r25, 0x80	; 128
    3dfc:	e5 e9       	ldi	r30, 0x95	; 149
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	28 c2       	rjmp	.+1104   	; 0x4252 <__fp_powsodd>

00003e02 <__fp_split3>:
    3e02:	57 fd       	sbrc	r21, 7
    3e04:	90 58       	subi	r25, 0x80	; 128
    3e06:	44 0f       	add	r20, r20
    3e08:	55 1f       	adc	r21, r21
    3e0a:	59 f0       	breq	.+22     	; 0x3e22 <__fp_splitA+0x10>
    3e0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e0e:	71 f0       	breq	.+28     	; 0x3e2c <__fp_splitA+0x1a>
    3e10:	47 95       	ror	r20

00003e12 <__fp_splitA>:
    3e12:	88 0f       	add	r24, r24
    3e14:	97 fb       	bst	r25, 7
    3e16:	99 1f       	adc	r25, r25
    3e18:	61 f0       	breq	.+24     	; 0x3e32 <__fp_splitA+0x20>
    3e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3e1c:	79 f0       	breq	.+30     	; 0x3e3c <__fp_splitA+0x2a>
    3e1e:	87 95       	ror	r24
    3e20:	08 95       	ret
    3e22:	12 16       	cp	r1, r18
    3e24:	13 06       	cpc	r1, r19
    3e26:	14 06       	cpc	r1, r20
    3e28:	55 1f       	adc	r21, r21
    3e2a:	f2 cf       	rjmp	.-28     	; 0x3e10 <__fp_split3+0xe>
    3e2c:	46 95       	lsr	r20
    3e2e:	f1 df       	rcall	.-30     	; 0x3e12 <__fp_splitA>
    3e30:	08 c0       	rjmp	.+16     	; 0x3e42 <__fp_splitA+0x30>
    3e32:	16 16       	cp	r1, r22
    3e34:	17 06       	cpc	r1, r23
    3e36:	18 06       	cpc	r1, r24
    3e38:	99 1f       	adc	r25, r25
    3e3a:	f1 cf       	rjmp	.-30     	; 0x3e1e <__fp_splitA+0xc>
    3e3c:	86 95       	lsr	r24
    3e3e:	71 05       	cpc	r23, r1
    3e40:	61 05       	cpc	r22, r1
    3e42:	08 94       	sec
    3e44:	08 95       	ret

00003e46 <__fp_trunc>:
    3e46:	e5 df       	rcall	.-54     	; 0x3e12 <__fp_splitA>
    3e48:	a0 f0       	brcs	.+40     	; 0x3e72 <__fp_trunc+0x2c>
    3e4a:	be e7       	ldi	r27, 0x7E	; 126
    3e4c:	b9 17       	cp	r27, r25
    3e4e:	88 f4       	brcc	.+34     	; 0x3e72 <__fp_trunc+0x2c>
    3e50:	bb 27       	eor	r27, r27
    3e52:	9f 38       	cpi	r25, 0x8F	; 143
    3e54:	60 f4       	brcc	.+24     	; 0x3e6e <__fp_trunc+0x28>
    3e56:	16 16       	cp	r1, r22
    3e58:	b1 1d       	adc	r27, r1
    3e5a:	67 2f       	mov	r22, r23
    3e5c:	78 2f       	mov	r23, r24
    3e5e:	88 27       	eor	r24, r24
    3e60:	98 5f       	subi	r25, 0xF8	; 248
    3e62:	f7 cf       	rjmp	.-18     	; 0x3e52 <__fp_trunc+0xc>
    3e64:	86 95       	lsr	r24
    3e66:	77 95       	ror	r23
    3e68:	67 95       	ror	r22
    3e6a:	b1 1d       	adc	r27, r1
    3e6c:	93 95       	inc	r25
    3e6e:	96 39       	cpi	r25, 0x96	; 150
    3e70:	c8 f3       	brcs	.-14     	; 0x3e64 <__fp_trunc+0x1e>
    3e72:	08 95       	ret

00003e74 <__fp_zero>:
    3e74:	e8 94       	clt

00003e76 <__fp_szero>:
    3e76:	bb 27       	eor	r27, r27
    3e78:	66 27       	eor	r22, r22
    3e7a:	77 27       	eor	r23, r23
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	97 f9       	bld	r25, 7
    3e80:	08 95       	ret

00003e82 <__gesf2>:
    3e82:	ec de       	rcall	.-552    	; 0x3c5c <__fp_cmp>
    3e84:	08 f4       	brcc	.+2      	; 0x3e88 <__gesf2+0x6>
    3e86:	8f ef       	ldi	r24, 0xFF	; 255
    3e88:	08 95       	ret
    3e8a:	63 df       	rcall	.-314    	; 0x3d52 <__fp_pscA>
    3e8c:	19 f0       	breq	.+6      	; 0x3e94 <__gesf2+0x12>
    3e8e:	68 df       	rcall	.-304    	; 0x3d60 <__fp_pscB>
    3e90:	09 f0       	breq	.+2      	; 0x3e94 <__gesf2+0x12>
    3e92:	37 cf       	rjmp	.-402    	; 0x3d02 <__fp_nan>
    3e94:	07 cf       	rjmp	.-498    	; 0x3ca4 <__fp_inf>
    3e96:	b9 01       	movw	r22, r18
    3e98:	ca 01       	movw	r24, r20
    3e9a:	25 cf       	rjmp	.-438    	; 0x3ce6 <__fp_mpack>

00003e9c <hypot>:
    3e9c:	9f 77       	andi	r25, 0x7F	; 127
    3e9e:	5f 77       	andi	r21, 0x7F	; 127
    3ea0:	b0 df       	rcall	.-160    	; 0x3e02 <__fp_split3>
    3ea2:	98 f3       	brcs	.-26     	; 0x3e8a <__gesf2+0x8>
    3ea4:	99 23       	and	r25, r25
    3ea6:	b9 f3       	breq	.-18     	; 0x3e96 <__gesf2+0x14>
    3ea8:	55 23       	and	r21, r21
    3eaa:	b9 f3       	breq	.-18     	; 0x3e9a <__gesf2+0x18>
    3eac:	ff 27       	eor	r31, r31
    3eae:	95 17       	cp	r25, r21
    3eb0:	58 f4       	brcc	.+22     	; 0x3ec8 <hypot+0x2c>
    3eb2:	e5 2f       	mov	r30, r21
    3eb4:	e9 1b       	sub	r30, r25
    3eb6:	ed 30       	cpi	r30, 0x0D	; 13
    3eb8:	70 f7       	brcc	.-36     	; 0x3e96 <__gesf2+0x14>
    3eba:	5e 3b       	cpi	r21, 0xBE	; 190
    3ebc:	10 f0       	brcs	.+4      	; 0x3ec2 <hypot+0x26>
    3ebe:	f1 e4       	ldi	r31, 0x41	; 65
    3ec0:	1c c0       	rjmp	.+56     	; 0x3efa <hypot+0x5e>
    3ec2:	90 34       	cpi	r25, 0x40	; 64
    3ec4:	e0 f4       	brcc	.+56     	; 0x3efe <hypot+0x62>
    3ec6:	0a c0       	rjmp	.+20     	; 0x3edc <hypot+0x40>
    3ec8:	e9 2f       	mov	r30, r25
    3eca:	e5 1b       	sub	r30, r21
    3ecc:	ed 30       	cpi	r30, 0x0D	; 13
    3ece:	28 f7       	brcc	.-54     	; 0x3e9a <__gesf2+0x18>
    3ed0:	9e 3b       	cpi	r25, 0xBE	; 190
    3ed2:	10 f0       	brcs	.+4      	; 0x3ed8 <hypot+0x3c>
    3ed4:	f1 e4       	ldi	r31, 0x41	; 65
    3ed6:	11 c0       	rjmp	.+34     	; 0x3efa <hypot+0x5e>
    3ed8:	50 34       	cpi	r21, 0x40	; 64
    3eda:	88 f4       	brcc	.+34     	; 0x3efe <hypot+0x62>
    3edc:	f9 ea       	ldi	r31, 0xA9	; 169
    3ede:	88 23       	and	r24, r24
    3ee0:	2a f0       	brmi	.+10     	; 0x3eec <hypot+0x50>
    3ee2:	9a 95       	dec	r25
    3ee4:	66 0f       	add	r22, r22
    3ee6:	77 1f       	adc	r23, r23
    3ee8:	88 1f       	adc	r24, r24
    3eea:	da f7       	brpl	.-10     	; 0x3ee2 <hypot+0x46>
    3eec:	44 23       	and	r20, r20
    3eee:	2a f0       	brmi	.+10     	; 0x3efa <hypot+0x5e>
    3ef0:	5a 95       	dec	r21
    3ef2:	22 0f       	add	r18, r18
    3ef4:	33 1f       	adc	r19, r19
    3ef6:	44 1f       	adc	r20, r20
    3ef8:	da f7       	brpl	.-10     	; 0x3ef0 <hypot+0x54>
    3efa:	9f 1b       	sub	r25, r31
    3efc:	5f 1b       	sub	r21, r31
    3efe:	ff 93       	push	r31
    3f00:	1f 93       	push	r17
    3f02:	0f 93       	push	r16
    3f04:	ff 92       	push	r15
    3f06:	ef 92       	push	r14
    3f08:	79 01       	movw	r14, r18
    3f0a:	8a 01       	movw	r16, r20
    3f0c:	bb 27       	eor	r27, r27
    3f0e:	ab 2f       	mov	r26, r27
    3f10:	9b 01       	movw	r18, r22
    3f12:	ac 01       	movw	r20, r24
    3f14:	c9 d0       	rcall	.+402    	; 0x40a8 <__mulsf3_pse>
    3f16:	97 01       	movw	r18, r14
    3f18:	a8 01       	movw	r20, r16
    3f1a:	bf 93       	push	r27
    3f1c:	7b 01       	movw	r14, r22
    3f1e:	8c 01       	movw	r16, r24
    3f20:	aa 27       	eor	r26, r26
    3f22:	ba 2f       	mov	r27, r26
    3f24:	b9 01       	movw	r22, r18
    3f26:	ca 01       	movw	r24, r20
    3f28:	bf d0       	rcall	.+382    	; 0x40a8 <__mulsf3_pse>
    3f2a:	af 91       	pop	r26
    3f2c:	97 01       	movw	r18, r14
    3f2e:	a8 01       	movw	r20, r16
    3f30:	ef 90       	pop	r14
    3f32:	ff 90       	pop	r15
    3f34:	0f 91       	pop	r16
    3f36:	1f 91       	pop	r17
    3f38:	13 dd       	rcall	.-1498   	; 0x3960 <__addsf3x>
    3f3a:	41 df       	rcall	.-382    	; 0x3dbe <__fp_round>
    3f3c:	34 d1       	rcall	.+616    	; 0x41a6 <sqrt>
    3f3e:	4f 91       	pop	r20
    3f40:	40 ff       	sbrs	r20, 0
    3f42:	08 95       	ret
    3f44:	55 27       	eor	r21, r21
    3f46:	47 fd       	sbrc	r20, 7
    3f48:	50 95       	com	r21
    3f4a:	09 c0       	rjmp	.+18     	; 0x3f5e <ldexp>

00003f4c <inverse>:
    3f4c:	9b 01       	movw	r18, r22
    3f4e:	ac 01       	movw	r20, r24
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	80 e8       	ldi	r24, 0x80	; 128
    3f56:	9f e3       	ldi	r25, 0x3F	; 63
    3f58:	98 cd       	rjmp	.-1232   	; 0x3a8a <__divsf3>
    3f5a:	a4 ce       	rjmp	.-696    	; 0x3ca4 <__fp_inf>
    3f5c:	c4 ce       	rjmp	.-632    	; 0x3ce6 <__fp_mpack>

00003f5e <ldexp>:
    3f5e:	59 df       	rcall	.-334    	; 0x3e12 <__fp_splitA>
    3f60:	e8 f3       	brcs	.-6      	; 0x3f5c <inverse+0x10>
    3f62:	99 23       	and	r25, r25
    3f64:	d9 f3       	breq	.-10     	; 0x3f5c <inverse+0x10>
    3f66:	94 0f       	add	r25, r20
    3f68:	51 1d       	adc	r21, r1
    3f6a:	bb f3       	brvs	.-18     	; 0x3f5a <inverse+0xe>
    3f6c:	91 50       	subi	r25, 0x01	; 1
    3f6e:	50 40       	sbci	r21, 0x00	; 0
    3f70:	94 f0       	brlt	.+36     	; 0x3f96 <ldexp+0x38>
    3f72:	59 f0       	breq	.+22     	; 0x3f8a <ldexp+0x2c>
    3f74:	88 23       	and	r24, r24
    3f76:	32 f0       	brmi	.+12     	; 0x3f84 <ldexp+0x26>
    3f78:	66 0f       	add	r22, r22
    3f7a:	77 1f       	adc	r23, r23
    3f7c:	88 1f       	adc	r24, r24
    3f7e:	91 50       	subi	r25, 0x01	; 1
    3f80:	50 40       	sbci	r21, 0x00	; 0
    3f82:	c1 f7       	brne	.-16     	; 0x3f74 <ldexp+0x16>
    3f84:	9e 3f       	cpi	r25, 0xFE	; 254
    3f86:	51 05       	cpc	r21, r1
    3f88:	44 f7       	brge	.-48     	; 0x3f5a <inverse+0xe>
    3f8a:	88 0f       	add	r24, r24
    3f8c:	91 1d       	adc	r25, r1
    3f8e:	96 95       	lsr	r25
    3f90:	87 95       	ror	r24
    3f92:	97 f9       	bld	r25, 7
    3f94:	08 95       	ret
    3f96:	5f 3f       	cpi	r21, 0xFF	; 255
    3f98:	ac f0       	brlt	.+42     	; 0x3fc4 <ldexp+0x66>
    3f9a:	98 3e       	cpi	r25, 0xE8	; 232
    3f9c:	9c f0       	brlt	.+38     	; 0x3fc4 <ldexp+0x66>
    3f9e:	bb 27       	eor	r27, r27
    3fa0:	86 95       	lsr	r24
    3fa2:	77 95       	ror	r23
    3fa4:	67 95       	ror	r22
    3fa6:	b7 95       	ror	r27
    3fa8:	08 f4       	brcc	.+2      	; 0x3fac <ldexp+0x4e>
    3faa:	b1 60       	ori	r27, 0x01	; 1
    3fac:	93 95       	inc	r25
    3fae:	c1 f7       	brne	.-16     	; 0x3fa0 <ldexp+0x42>
    3fb0:	bb 0f       	add	r27, r27
    3fb2:	58 f7       	brcc	.-42     	; 0x3f8a <ldexp+0x2c>
    3fb4:	11 f4       	brne	.+4      	; 0x3fba <ldexp+0x5c>
    3fb6:	60 ff       	sbrs	r22, 0
    3fb8:	e8 cf       	rjmp	.-48     	; 0x3f8a <ldexp+0x2c>
    3fba:	6f 5f       	subi	r22, 0xFF	; 255
    3fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	e3 cf       	rjmp	.-58     	; 0x3f8a <ldexp+0x2c>
    3fc4:	58 cf       	rjmp	.-336    	; 0x3e76 <__fp_szero>

00003fc6 <lround>:
    3fc6:	25 df       	rcall	.-438    	; 0x3e12 <__fp_splitA>
    3fc8:	58 f1       	brcs	.+86     	; 0x4020 <lround+0x5a>
    3fca:	9e 57       	subi	r25, 0x7E	; 126
    3fcc:	58 f1       	brcs	.+86     	; 0x4024 <lround+0x5e>
    3fce:	98 51       	subi	r25, 0x18	; 24
    3fd0:	a0 f0       	brcs	.+40     	; 0x3ffa <lround+0x34>
    3fd2:	e9 f0       	breq	.+58     	; 0x400e <lround+0x48>
    3fd4:	98 30       	cpi	r25, 0x08	; 8
    3fd6:	20 f5       	brcc	.+72     	; 0x4020 <lround+0x5a>
    3fd8:	09 2e       	mov	r0, r25
    3fda:	99 27       	eor	r25, r25
    3fdc:	66 0f       	add	r22, r22
    3fde:	77 1f       	adc	r23, r23
    3fe0:	88 1f       	adc	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	0a 94       	dec	r0
    3fe6:	d1 f7       	brne	.-12     	; 0x3fdc <lround+0x16>
    3fe8:	12 c0       	rjmp	.+36     	; 0x400e <lround+0x48>
    3fea:	06 2e       	mov	r0, r22
    3fec:	67 2f       	mov	r22, r23
    3fee:	78 2f       	mov	r23, r24
    3ff0:	88 27       	eor	r24, r24
    3ff2:	98 5f       	subi	r25, 0xF8	; 248
    3ff4:	11 f4       	brne	.+4      	; 0x3ffa <lround+0x34>
    3ff6:	00 0c       	add	r0, r0
    3ff8:	07 c0       	rjmp	.+14     	; 0x4008 <lround+0x42>
    3ffa:	99 3f       	cpi	r25, 0xF9	; 249
    3ffc:	b4 f3       	brlt	.-20     	; 0x3fea <lround+0x24>
    3ffe:	86 95       	lsr	r24
    4000:	77 95       	ror	r23
    4002:	67 95       	ror	r22
    4004:	93 95       	inc	r25
    4006:	d9 f7       	brne	.-10     	; 0x3ffe <lround+0x38>
    4008:	61 1d       	adc	r22, r1
    400a:	71 1d       	adc	r23, r1
    400c:	81 1d       	adc	r24, r1
    400e:	3e f4       	brtc	.+14     	; 0x401e <lround+0x58>
    4010:	90 95       	com	r25
    4012:	80 95       	com	r24
    4014:	70 95       	com	r23
    4016:	61 95       	neg	r22
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	8f 4f       	sbci	r24, 0xFF	; 255
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	08 95       	ret
    4020:	68 94       	set
    4022:	29 cf       	rjmp	.-430    	; 0x3e76 <__fp_szero>
    4024:	27 cf       	rjmp	.-434    	; 0x3e74 <__fp_zero>

00004026 <modf>:
    4026:	fa 01       	movw	r30, r20
    4028:	dc 01       	movw	r26, r24
    402a:	aa 0f       	add	r26, r26
    402c:	bb 1f       	adc	r27, r27
    402e:	9b 01       	movw	r18, r22
    4030:	ac 01       	movw	r20, r24
    4032:	bf 57       	subi	r27, 0x7F	; 127
    4034:	28 f4       	brcc	.+10     	; 0x4040 <modf+0x1a>
    4036:	22 27       	eor	r18, r18
    4038:	33 27       	eor	r19, r19
    403a:	44 27       	eor	r20, r20
    403c:	50 78       	andi	r21, 0x80	; 128
    403e:	1f c0       	rjmp	.+62     	; 0x407e <modf+0x58>
    4040:	b7 51       	subi	r27, 0x17	; 23
    4042:	88 f4       	brcc	.+34     	; 0x4066 <modf+0x40>
    4044:	ab 2f       	mov	r26, r27
    4046:	00 24       	eor	r0, r0
    4048:	46 95       	lsr	r20
    404a:	37 95       	ror	r19
    404c:	27 95       	ror	r18
    404e:	01 1c       	adc	r0, r1
    4050:	a3 95       	inc	r26
    4052:	d2 f3       	brmi	.-12     	; 0x4048 <modf+0x22>
    4054:	00 20       	and	r0, r0
    4056:	69 f0       	breq	.+26     	; 0x4072 <modf+0x4c>
    4058:	22 0f       	add	r18, r18
    405a:	33 1f       	adc	r19, r19
    405c:	44 1f       	adc	r20, r20
    405e:	b3 95       	inc	r27
    4060:	da f3       	brmi	.-10     	; 0x4058 <modf+0x32>
    4062:	0d d0       	rcall	.+26     	; 0x407e <modf+0x58>
    4064:	6b cc       	rjmp	.-1834   	; 0x393c <__subsf3>
    4066:	61 30       	cpi	r22, 0x01	; 1
    4068:	71 05       	cpc	r23, r1
    406a:	a0 e8       	ldi	r26, 0x80	; 128
    406c:	8a 07       	cpc	r24, r26
    406e:	b9 46       	sbci	r27, 0x69	; 105
    4070:	30 f4       	brcc	.+12     	; 0x407e <modf+0x58>
    4072:	9b 01       	movw	r18, r22
    4074:	ac 01       	movw	r20, r24
    4076:	66 27       	eor	r22, r22
    4078:	77 27       	eor	r23, r23
    407a:	88 27       	eor	r24, r24
    407c:	90 78       	andi	r25, 0x80	; 128
    407e:	30 96       	adiw	r30, 0x00	; 0
    4080:	21 f0       	breq	.+8      	; 0x408a <modf+0x64>
    4082:	20 83       	st	Z, r18
    4084:	31 83       	std	Z+1, r19	; 0x01
    4086:	42 83       	std	Z+2, r20	; 0x02
    4088:	53 83       	std	Z+3, r21	; 0x03
    408a:	08 95       	ret

0000408c <__mulsf3>:
    408c:	0b d0       	rcall	.+22     	; 0x40a4 <__mulsf3x>
    408e:	97 ce       	rjmp	.-722    	; 0x3dbe <__fp_round>
    4090:	60 de       	rcall	.-832    	; 0x3d52 <__fp_pscA>
    4092:	28 f0       	brcs	.+10     	; 0x409e <__mulsf3+0x12>
    4094:	65 de       	rcall	.-822    	; 0x3d60 <__fp_pscB>
    4096:	18 f0       	brcs	.+6      	; 0x409e <__mulsf3+0x12>
    4098:	95 23       	and	r25, r21
    409a:	09 f0       	breq	.+2      	; 0x409e <__mulsf3+0x12>
    409c:	03 ce       	rjmp	.-1018   	; 0x3ca4 <__fp_inf>
    409e:	31 ce       	rjmp	.-926    	; 0x3d02 <__fp_nan>
    40a0:	11 24       	eor	r1, r1
    40a2:	e9 ce       	rjmp	.-558    	; 0x3e76 <__fp_szero>

000040a4 <__mulsf3x>:
    40a4:	ae de       	rcall	.-676    	; 0x3e02 <__fp_split3>
    40a6:	a0 f3       	brcs	.-24     	; 0x4090 <__mulsf3+0x4>

000040a8 <__mulsf3_pse>:
    40a8:	95 9f       	mul	r25, r21
    40aa:	d1 f3       	breq	.-12     	; 0x40a0 <__mulsf3+0x14>
    40ac:	95 0f       	add	r25, r21
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	55 1f       	adc	r21, r21
    40b2:	62 9f       	mul	r22, r18
    40b4:	f0 01       	movw	r30, r0
    40b6:	72 9f       	mul	r23, r18
    40b8:	bb 27       	eor	r27, r27
    40ba:	f0 0d       	add	r31, r0
    40bc:	b1 1d       	adc	r27, r1
    40be:	63 9f       	mul	r22, r19
    40c0:	aa 27       	eor	r26, r26
    40c2:	f0 0d       	add	r31, r0
    40c4:	b1 1d       	adc	r27, r1
    40c6:	aa 1f       	adc	r26, r26
    40c8:	64 9f       	mul	r22, r20
    40ca:	66 27       	eor	r22, r22
    40cc:	b0 0d       	add	r27, r0
    40ce:	a1 1d       	adc	r26, r1
    40d0:	66 1f       	adc	r22, r22
    40d2:	82 9f       	mul	r24, r18
    40d4:	22 27       	eor	r18, r18
    40d6:	b0 0d       	add	r27, r0
    40d8:	a1 1d       	adc	r26, r1
    40da:	62 1f       	adc	r22, r18
    40dc:	73 9f       	mul	r23, r19
    40de:	b0 0d       	add	r27, r0
    40e0:	a1 1d       	adc	r26, r1
    40e2:	62 1f       	adc	r22, r18
    40e4:	83 9f       	mul	r24, r19
    40e6:	a0 0d       	add	r26, r0
    40e8:	61 1d       	adc	r22, r1
    40ea:	22 1f       	adc	r18, r18
    40ec:	74 9f       	mul	r23, r20
    40ee:	33 27       	eor	r19, r19
    40f0:	a0 0d       	add	r26, r0
    40f2:	61 1d       	adc	r22, r1
    40f4:	23 1f       	adc	r18, r19
    40f6:	84 9f       	mul	r24, r20
    40f8:	60 0d       	add	r22, r0
    40fa:	21 1d       	adc	r18, r1
    40fc:	82 2f       	mov	r24, r18
    40fe:	76 2f       	mov	r23, r22
    4100:	6a 2f       	mov	r22, r26
    4102:	11 24       	eor	r1, r1
    4104:	9f 57       	subi	r25, 0x7F	; 127
    4106:	50 40       	sbci	r21, 0x00	; 0
    4108:	8a f0       	brmi	.+34     	; 0x412c <__mulsf3_pse+0x84>
    410a:	e1 f0       	breq	.+56     	; 0x4144 <__mulsf3_pse+0x9c>
    410c:	88 23       	and	r24, r24
    410e:	4a f0       	brmi	.+18     	; 0x4122 <__mulsf3_pse+0x7a>
    4110:	ee 0f       	add	r30, r30
    4112:	ff 1f       	adc	r31, r31
    4114:	bb 1f       	adc	r27, r27
    4116:	66 1f       	adc	r22, r22
    4118:	77 1f       	adc	r23, r23
    411a:	88 1f       	adc	r24, r24
    411c:	91 50       	subi	r25, 0x01	; 1
    411e:	50 40       	sbci	r21, 0x00	; 0
    4120:	a9 f7       	brne	.-22     	; 0x410c <__mulsf3_pse+0x64>
    4122:	9e 3f       	cpi	r25, 0xFE	; 254
    4124:	51 05       	cpc	r21, r1
    4126:	70 f0       	brcs	.+28     	; 0x4144 <__mulsf3_pse+0x9c>
    4128:	bd cd       	rjmp	.-1158   	; 0x3ca4 <__fp_inf>
    412a:	a5 ce       	rjmp	.-694    	; 0x3e76 <__fp_szero>
    412c:	5f 3f       	cpi	r21, 0xFF	; 255
    412e:	ec f3       	brlt	.-6      	; 0x412a <__mulsf3_pse+0x82>
    4130:	98 3e       	cpi	r25, 0xE8	; 232
    4132:	dc f3       	brlt	.-10     	; 0x412a <__mulsf3_pse+0x82>
    4134:	86 95       	lsr	r24
    4136:	77 95       	ror	r23
    4138:	67 95       	ror	r22
    413a:	b7 95       	ror	r27
    413c:	f7 95       	ror	r31
    413e:	e7 95       	ror	r30
    4140:	9f 5f       	subi	r25, 0xFF	; 255
    4142:	c1 f7       	brne	.-16     	; 0x4134 <__mulsf3_pse+0x8c>
    4144:	fe 2b       	or	r31, r30
    4146:	88 0f       	add	r24, r24
    4148:	91 1d       	adc	r25, r1
    414a:	96 95       	lsr	r25
    414c:	87 95       	ror	r24
    414e:	97 f9       	bld	r25, 7
    4150:	08 95       	ret

00004152 <round>:
    4152:	5f de       	rcall	.-834    	; 0x3e12 <__fp_splitA>
    4154:	e0 f0       	brcs	.+56     	; 0x418e <round+0x3c>
    4156:	9e 37       	cpi	r25, 0x7E	; 126
    4158:	d8 f0       	brcs	.+54     	; 0x4190 <round+0x3e>
    415a:	96 39       	cpi	r25, 0x96	; 150
    415c:	b8 f4       	brcc	.+46     	; 0x418c <round+0x3a>
    415e:	9e 38       	cpi	r25, 0x8E	; 142
    4160:	48 f4       	brcc	.+18     	; 0x4174 <round+0x22>
    4162:	67 2f       	mov	r22, r23
    4164:	78 2f       	mov	r23, r24
    4166:	88 27       	eor	r24, r24
    4168:	98 5f       	subi	r25, 0xF8	; 248
    416a:	f9 cf       	rjmp	.-14     	; 0x415e <round+0xc>
    416c:	86 95       	lsr	r24
    416e:	77 95       	ror	r23
    4170:	67 95       	ror	r22
    4172:	93 95       	inc	r25
    4174:	95 39       	cpi	r25, 0x95	; 149
    4176:	d0 f3       	brcs	.-12     	; 0x416c <round+0x1a>
    4178:	b6 2f       	mov	r27, r22
    417a:	b1 70       	andi	r27, 0x01	; 1
    417c:	6b 0f       	add	r22, r27
    417e:	71 1d       	adc	r23, r1
    4180:	81 1d       	adc	r24, r1
    4182:	20 f4       	brcc	.+8      	; 0x418c <round+0x3a>
    4184:	87 95       	ror	r24
    4186:	77 95       	ror	r23
    4188:	67 95       	ror	r22
    418a:	93 95       	inc	r25
    418c:	91 cd       	rjmp	.-1246   	; 0x3cb0 <__fp_mintl>
    418e:	ab cd       	rjmp	.-1194   	; 0x3ce6 <__fp_mpack>
    4190:	72 ce       	rjmp	.-796    	; 0x3e76 <__fp_szero>

00004192 <sin>:
    4192:	9f 93       	push	r25
    4194:	ed dd       	rcall	.-1062   	; 0x3d70 <__fp_rempio2>
    4196:	0f 90       	pop	r0
    4198:	07 fc       	sbrc	r0, 7
    419a:	ee 5f       	subi	r30, 0xFE	; 254
    419c:	21 ce       	rjmp	.-958    	; 0x3de0 <__fp_sinus>
    419e:	11 f4       	brne	.+4      	; 0x41a4 <sin+0x12>
    41a0:	0e f4       	brtc	.+2      	; 0x41a4 <sin+0x12>
    41a2:	af cd       	rjmp	.-1186   	; 0x3d02 <__fp_nan>
    41a4:	a0 cd       	rjmp	.-1216   	; 0x3ce6 <__fp_mpack>

000041a6 <sqrt>:
    41a6:	35 de       	rcall	.-918    	; 0x3e12 <__fp_splitA>
    41a8:	d0 f3       	brcs	.-12     	; 0x419e <sin+0xc>
    41aa:	99 23       	and	r25, r25
    41ac:	d9 f3       	breq	.-10     	; 0x41a4 <sin+0x12>
    41ae:	ce f3       	brts	.-14     	; 0x41a2 <sin+0x10>
    41b0:	9f 57       	subi	r25, 0x7F	; 127
    41b2:	55 0b       	sbc	r21, r21
    41b4:	87 ff       	sbrs	r24, 7
    41b6:	46 d0       	rcall	.+140    	; 0x4244 <__fp_norm2>
    41b8:	00 24       	eor	r0, r0
    41ba:	a0 e6       	ldi	r26, 0x60	; 96
    41bc:	40 ea       	ldi	r20, 0xA0	; 160
    41be:	90 01       	movw	r18, r0
    41c0:	80 58       	subi	r24, 0x80	; 128
    41c2:	56 95       	lsr	r21
    41c4:	97 95       	ror	r25
    41c6:	28 f4       	brcc	.+10     	; 0x41d2 <sqrt+0x2c>
    41c8:	80 5c       	subi	r24, 0xC0	; 192
    41ca:	66 0f       	add	r22, r22
    41cc:	77 1f       	adc	r23, r23
    41ce:	88 1f       	adc	r24, r24
    41d0:	20 f0       	brcs	.+8      	; 0x41da <sqrt+0x34>
    41d2:	26 17       	cp	r18, r22
    41d4:	37 07       	cpc	r19, r23
    41d6:	48 07       	cpc	r20, r24
    41d8:	30 f4       	brcc	.+12     	; 0x41e6 <sqrt+0x40>
    41da:	62 1b       	sub	r22, r18
    41dc:	73 0b       	sbc	r23, r19
    41de:	84 0b       	sbc	r24, r20
    41e0:	20 29       	or	r18, r0
    41e2:	31 29       	or	r19, r1
    41e4:	4a 2b       	or	r20, r26
    41e6:	a6 95       	lsr	r26
    41e8:	17 94       	ror	r1
    41ea:	07 94       	ror	r0
    41ec:	20 25       	eor	r18, r0
    41ee:	31 25       	eor	r19, r1
    41f0:	4a 27       	eor	r20, r26
    41f2:	58 f7       	brcc	.-42     	; 0x41ca <sqrt+0x24>
    41f4:	66 0f       	add	r22, r22
    41f6:	77 1f       	adc	r23, r23
    41f8:	88 1f       	adc	r24, r24
    41fa:	20 f0       	brcs	.+8      	; 0x4204 <sqrt+0x5e>
    41fc:	26 17       	cp	r18, r22
    41fe:	37 07       	cpc	r19, r23
    4200:	48 07       	cpc	r20, r24
    4202:	30 f4       	brcc	.+12     	; 0x4210 <sqrt+0x6a>
    4204:	62 0b       	sbc	r22, r18
    4206:	73 0b       	sbc	r23, r19
    4208:	84 0b       	sbc	r24, r20
    420a:	20 0d       	add	r18, r0
    420c:	31 1d       	adc	r19, r1
    420e:	41 1d       	adc	r20, r1
    4210:	a0 95       	com	r26
    4212:	81 f7       	brne	.-32     	; 0x41f4 <sqrt+0x4e>
    4214:	b9 01       	movw	r22, r18
    4216:	84 2f       	mov	r24, r20
    4218:	91 58       	subi	r25, 0x81	; 129
    421a:	88 0f       	add	r24, r24
    421c:	96 95       	lsr	r25
    421e:	87 95       	ror	r24
    4220:	08 95       	ret

00004222 <square>:
    4222:	9b 01       	movw	r18, r22
    4224:	ac 01       	movw	r20, r24
    4226:	32 cf       	rjmp	.-412    	; 0x408c <__mulsf3>

00004228 <trunc>:
    4228:	0e de       	rcall	.-996    	; 0x3e46 <__fp_trunc>
    422a:	20 f0       	brcs	.+8      	; 0x4234 <trunc+0xc>
    422c:	9f 37       	cpi	r25, 0x7F	; 127
    422e:	08 f4       	brcc	.+2      	; 0x4232 <trunc+0xa>
    4230:	22 ce       	rjmp	.-956    	; 0x3e76 <__fp_szero>
    4232:	3e cd       	rjmp	.-1412   	; 0x3cb0 <__fp_mintl>
    4234:	58 cd       	rjmp	.-1360   	; 0x3ce6 <__fp_mpack>

00004236 <__unordsf2>:
    4236:	12 dd       	rcall	.-1500   	; 0x3c5c <__fp_cmp>
    4238:	88 0b       	sbc	r24, r24
    423a:	99 0b       	sbc	r25, r25
    423c:	08 95       	ret

0000423e <__ctype_isfalse>:
    423e:	99 27       	eor	r25, r25
    4240:	88 27       	eor	r24, r24

00004242 <__ctype_istrue>:
    4242:	08 95       	ret

00004244 <__fp_norm2>:
    4244:	91 50       	subi	r25, 0x01	; 1
    4246:	50 40       	sbci	r21, 0x00	; 0
    4248:	66 0f       	add	r22, r22
    424a:	77 1f       	adc	r23, r23
    424c:	88 1f       	adc	r24, r24
    424e:	d2 f7       	brpl	.-12     	; 0x4244 <__fp_norm2>
    4250:	08 95       	ret

00004252 <__fp_powsodd>:
    4252:	9f 93       	push	r25
    4254:	8f 93       	push	r24
    4256:	7f 93       	push	r23
    4258:	6f 93       	push	r22
    425a:	ff 93       	push	r31
    425c:	ef 93       	push	r30
    425e:	9b 01       	movw	r18, r22
    4260:	ac 01       	movw	r20, r24
    4262:	14 df       	rcall	.-472    	; 0x408c <__mulsf3>
    4264:	ef 91       	pop	r30
    4266:	ff 91       	pop	r31
    4268:	4f dd       	rcall	.-1378   	; 0x3d08 <__fp_powser>
    426a:	2f 91       	pop	r18
    426c:	3f 91       	pop	r19
    426e:	4f 91       	pop	r20
    4270:	5f 91       	pop	r21
    4272:	0c cf       	rjmp	.-488    	; 0x408c <__mulsf3>

00004274 <__mulsi3>:
    4274:	62 9f       	mul	r22, r18
    4276:	d0 01       	movw	r26, r0
    4278:	73 9f       	mul	r23, r19
    427a:	f0 01       	movw	r30, r0
    427c:	82 9f       	mul	r24, r18
    427e:	e0 0d       	add	r30, r0
    4280:	f1 1d       	adc	r31, r1
    4282:	64 9f       	mul	r22, r20
    4284:	e0 0d       	add	r30, r0
    4286:	f1 1d       	adc	r31, r1
    4288:	92 9f       	mul	r25, r18
    428a:	f0 0d       	add	r31, r0
    428c:	83 9f       	mul	r24, r19
    428e:	f0 0d       	add	r31, r0
    4290:	74 9f       	mul	r23, r20
    4292:	f0 0d       	add	r31, r0
    4294:	65 9f       	mul	r22, r21
    4296:	f0 0d       	add	r31, r0
    4298:	99 27       	eor	r25, r25
    429a:	72 9f       	mul	r23, r18
    429c:	b0 0d       	add	r27, r0
    429e:	e1 1d       	adc	r30, r1
    42a0:	f9 1f       	adc	r31, r25
    42a2:	63 9f       	mul	r22, r19
    42a4:	b0 0d       	add	r27, r0
    42a6:	e1 1d       	adc	r30, r1
    42a8:	f9 1f       	adc	r31, r25
    42aa:	bd 01       	movw	r22, r26
    42ac:	cf 01       	movw	r24, r30
    42ae:	11 24       	eor	r1, r1
    42b0:	08 95       	ret

000042b2 <__divmodhi4>:
    42b2:	97 fb       	bst	r25, 7
    42b4:	09 2e       	mov	r0, r25
    42b6:	07 26       	eor	r0, r23
    42b8:	0a d0       	rcall	.+20     	; 0x42ce <__divmodhi4_neg1>
    42ba:	77 fd       	sbrc	r23, 7
    42bc:	04 d0       	rcall	.+8      	; 0x42c6 <__divmodhi4_neg2>
    42be:	80 d0       	rcall	.+256    	; 0x43c0 <__udivmodhi4>
    42c0:	06 d0       	rcall	.+12     	; 0x42ce <__divmodhi4_neg1>
    42c2:	00 20       	and	r0, r0
    42c4:	1a f4       	brpl	.+6      	; 0x42cc <__divmodhi4_exit>

000042c6 <__divmodhi4_neg2>:
    42c6:	70 95       	com	r23
    42c8:	61 95       	neg	r22
    42ca:	7f 4f       	sbci	r23, 0xFF	; 255

000042cc <__divmodhi4_exit>:
    42cc:	08 95       	ret

000042ce <__divmodhi4_neg1>:
    42ce:	f6 f7       	brtc	.-4      	; 0x42cc <__divmodhi4_exit>
    42d0:	90 95       	com	r25
    42d2:	81 95       	neg	r24
    42d4:	9f 4f       	sbci	r25, 0xFF	; 255
    42d6:	08 95       	ret

000042d8 <__udivmodsi4>:
    42d8:	a1 e2       	ldi	r26, 0x21	; 33
    42da:	1a 2e       	mov	r1, r26
    42dc:	aa 1b       	sub	r26, r26
    42de:	bb 1b       	sub	r27, r27
    42e0:	fd 01       	movw	r30, r26
    42e2:	0d c0       	rjmp	.+26     	; 0x42fe <__udivmodsi4_ep>

000042e4 <__udivmodsi4_loop>:
    42e4:	aa 1f       	adc	r26, r26
    42e6:	bb 1f       	adc	r27, r27
    42e8:	ee 1f       	adc	r30, r30
    42ea:	ff 1f       	adc	r31, r31
    42ec:	a2 17       	cp	r26, r18
    42ee:	b3 07       	cpc	r27, r19
    42f0:	e4 07       	cpc	r30, r20
    42f2:	f5 07       	cpc	r31, r21
    42f4:	20 f0       	brcs	.+8      	; 0x42fe <__udivmodsi4_ep>
    42f6:	a2 1b       	sub	r26, r18
    42f8:	b3 0b       	sbc	r27, r19
    42fa:	e4 0b       	sbc	r30, r20
    42fc:	f5 0b       	sbc	r31, r21

000042fe <__udivmodsi4_ep>:
    42fe:	66 1f       	adc	r22, r22
    4300:	77 1f       	adc	r23, r23
    4302:	88 1f       	adc	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	1a 94       	dec	r1
    4308:	69 f7       	brne	.-38     	; 0x42e4 <__udivmodsi4_loop>
    430a:	60 95       	com	r22
    430c:	70 95       	com	r23
    430e:	80 95       	com	r24
    4310:	90 95       	com	r25
    4312:	9b 01       	movw	r18, r22
    4314:	ac 01       	movw	r20, r24
    4316:	bd 01       	movw	r22, r26
    4318:	cf 01       	movw	r24, r30
    431a:	08 95       	ret

0000431c <__divmodsi4>:
    431c:	97 fb       	bst	r25, 7
    431e:	09 2e       	mov	r0, r25
    4320:	05 26       	eor	r0, r21
    4322:	0e d0       	rcall	.+28     	; 0x4340 <__divmodsi4_neg1>
    4324:	57 fd       	sbrc	r21, 7
    4326:	04 d0       	rcall	.+8      	; 0x4330 <__divmodsi4_neg2>
    4328:	d7 df       	rcall	.-82     	; 0x42d8 <__udivmodsi4>
    432a:	0a d0       	rcall	.+20     	; 0x4340 <__divmodsi4_neg1>
    432c:	00 1c       	adc	r0, r0
    432e:	38 f4       	brcc	.+14     	; 0x433e <__divmodsi4_exit>

00004330 <__divmodsi4_neg2>:
    4330:	50 95       	com	r21
    4332:	40 95       	com	r20
    4334:	30 95       	com	r19
    4336:	21 95       	neg	r18
    4338:	3f 4f       	sbci	r19, 0xFF	; 255
    433a:	4f 4f       	sbci	r20, 0xFF	; 255
    433c:	5f 4f       	sbci	r21, 0xFF	; 255

0000433e <__divmodsi4_exit>:
    433e:	08 95       	ret

00004340 <__divmodsi4_neg1>:
    4340:	f6 f7       	brtc	.-4      	; 0x433e <__divmodsi4_exit>
    4342:	90 95       	com	r25
    4344:	80 95       	com	r24
    4346:	70 95       	com	r23
    4348:	61 95       	neg	r22
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	8f 4f       	sbci	r24, 0xFF	; 255
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	08 95       	ret

00004352 <__prologue_saves__>:
    4352:	2f 92       	push	r2
    4354:	3f 92       	push	r3
    4356:	4f 92       	push	r4
    4358:	5f 92       	push	r5
    435a:	6f 92       	push	r6
    435c:	7f 92       	push	r7
    435e:	8f 92       	push	r8
    4360:	9f 92       	push	r9
    4362:	af 92       	push	r10
    4364:	bf 92       	push	r11
    4366:	cf 92       	push	r12
    4368:	df 92       	push	r13
    436a:	ef 92       	push	r14
    436c:	ff 92       	push	r15
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	cf 93       	push	r28
    4374:	df 93       	push	r29
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	ca 1b       	sub	r28, r26
    437c:	db 0b       	sbc	r29, r27
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	09 94       	ijmp

0000438a <__epilogue_restores__>:
    438a:	2a 88       	ldd	r2, Y+18	; 0x12
    438c:	39 88       	ldd	r3, Y+17	; 0x11
    438e:	48 88       	ldd	r4, Y+16	; 0x10
    4390:	5f 84       	ldd	r5, Y+15	; 0x0f
    4392:	6e 84       	ldd	r6, Y+14	; 0x0e
    4394:	7d 84       	ldd	r7, Y+13	; 0x0d
    4396:	8c 84       	ldd	r8, Y+12	; 0x0c
    4398:	9b 84       	ldd	r9, Y+11	; 0x0b
    439a:	aa 84       	ldd	r10, Y+10	; 0x0a
    439c:	b9 84       	ldd	r11, Y+9	; 0x09
    439e:	c8 84       	ldd	r12, Y+8	; 0x08
    43a0:	df 80       	ldd	r13, Y+7	; 0x07
    43a2:	ee 80       	ldd	r14, Y+6	; 0x06
    43a4:	fd 80       	ldd	r15, Y+5	; 0x05
    43a6:	0c 81       	ldd	r16, Y+4	; 0x04
    43a8:	1b 81       	ldd	r17, Y+3	; 0x03
    43aa:	aa 81       	ldd	r26, Y+2	; 0x02
    43ac:	b9 81       	ldd	r27, Y+1	; 0x01
    43ae:	ce 0f       	add	r28, r30
    43b0:	d1 1d       	adc	r29, r1
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	ed 01       	movw	r28, r26
    43be:	08 95       	ret

000043c0 <__udivmodhi4>:
    43c0:	aa 1b       	sub	r26, r26
    43c2:	bb 1b       	sub	r27, r27
    43c4:	51 e1       	ldi	r21, 0x11	; 17
    43c6:	07 c0       	rjmp	.+14     	; 0x43d6 <__udivmodhi4_ep>

000043c8 <__udivmodhi4_loop>:
    43c8:	aa 1f       	adc	r26, r26
    43ca:	bb 1f       	adc	r27, r27
    43cc:	a6 17       	cp	r26, r22
    43ce:	b7 07       	cpc	r27, r23
    43d0:	10 f0       	brcs	.+4      	; 0x43d6 <__udivmodhi4_ep>
    43d2:	a6 1b       	sub	r26, r22
    43d4:	b7 0b       	sbc	r27, r23

000043d6 <__udivmodhi4_ep>:
    43d6:	88 1f       	adc	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	5a 95       	dec	r21
    43dc:	a9 f7       	brne	.-22     	; 0x43c8 <__udivmodhi4_loop>
    43de:	80 95       	com	r24
    43e0:	90 95       	com	r25
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	08 95       	ret

000043e8 <_exit>:
    43e8:	f8 94       	cli

000043ea <__stop_program>:
    43ea:	ff cf       	rjmp	.-2      	; 0x43ea <__stop_program>
