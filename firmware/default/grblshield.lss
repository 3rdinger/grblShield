
grblshield.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000440a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000005bd  00800100  00800100  0000447e  2**0
                  ALLOC
  2 .debug_aranges 000001a0  00000000  00000000  0000447e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000556  00000000  00000000  0000461e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002dc2  00000000  00000000  00004b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001097  00000000  00000000  00007936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000021f0  00000000  00000000  000089cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004a0  00000000  00000000  0000abc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e45  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001bce  00000000  00000000  0000bea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000da73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
       8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
       c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      10:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      14:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      18:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      1c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      20:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      24:	0c 94 17 18 	jmp	0x302e	; 0x302e <__vector_9>
      28:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      2c:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_11>
      30:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      38:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      3c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      40:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      44:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      48:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_18>
      4c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      50:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      54:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      58:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      5c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      60:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      64:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 0d       	add	r19, r15

000000b3 <__c.1632>:
      b3:	0d 0a 00                                            ...

000000b6 <__c.1629>:
      b6:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
      c6:	72 72 6f 72 0d 0a 00                                rror...

000000cd <__c.1626>:
      cd:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
      dd:	65 6d 65 6e 74 0d 0a 00                             ement...

000000e5 <__c.1623>:
      e5:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
      f5:	20 6c 65 74 74 65 72 0d 0a 00                        letter...

000000ff <__c.1619>:
      ff:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
     10f:	74 0d 0a 00                                         t...

00000113 <__c.1616>:
     113:	65 72 72 6f 72 3a 20 00                             error: .

0000011b <__c.1614>:
     11b:	6f 6b 0d 0a 00                                      ok...

00000120 <__c.1639>:
     120:	0d 0a 00                                            ...

00000123 <__c.1637>:
     123:	0d 0a 47 72 62 6c 20 30 2e 36 62 00                 ..Grbl 0.6b.

0000012f <__c.1734>:
     12f:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     13f:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     14f:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     15f:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

0000016a <__c.1732>:
     16a:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     17a:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

00000189 <__c.1722>:
     189:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     199:	6e 67 0d 0a 00                                      ng...

0000019e <__c.1720>:
     19e:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     1ae:	72 0d 0a 00                                         r...

000001b2 <__c.1709>:
     1b2:	53 74 65 70 73 2f 6d 6d 20 6d 75 73 74 20 62 65     Steps/mm must be
     1c2:	20 3e 20 30 2e 30 0d 0a 00                           > 0.0...

000001cb <__c.1657>:
     1cb:	0d 0a 27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20     ..'$x=value' to 
     1db:	73 65 74 20 70 61 72 61 6d 65 74 65 72 20 6f 72     set parameter or
     1eb:	20 6a 75 73 74 20 27 24 27 20 74 6f 20 64 75 6d      just '$' to dum
     1fb:	70 20 63 75 72 72 65 6e 74 20 73 65 74 74 69 6e     p current settin
     20b:	67 73 0d 0a 00                                      gs...

00000210 <__c.1655>:
     210:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     220:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     230:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     240:	2f 6d 69 6e 29 00                                   /min).

00000246 <__c.1653>:
     246:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     256:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 24 39 20     n mm/sec^2)..$9 
     266:	3d 20 00                                            = .

00000269 <__c.1651>:
     269:	29 0d 0a 24 38 20 3d 20 00                          )..$8 = .

00000272 <__c.1649>:
     272:	20 28 73 74 65 70 20 70 6f 72 74 20 69 6e 76 65      (step port inve
     282:	72 74 20 6d 61 73 6b 2e 20 62 69 6e 61 72 79 20     rt mask. binary 
     292:	3d 20 00                                            = .

00000295 <__c.1647>:
     295:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     2a5:	29 0d 0a 24 37 20 3d 20 00                          )..$7 = .

000002ae <__c.1645>:
     2ae:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     2be:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 24 36 20      seek rate)..$6 
     2ce:	3d 20 00                                            = .

000002d1 <__c.1643>:
     2d1:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     2e1:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 24 35 20      feed rate)..$5 
     2f1:	3d 20 00                                            = .

000002f4 <__c.1641>:
     2f4:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     304:	74 65 70 20 70 75 6c 73 65 29 0d 0a 24 34 20 3d     tep pulse)..$4 =
     314:	20 00                                                .

00000316 <__c.1639>:
     316:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 24      (steps/mm z)..$
     326:	33 20 3d 20 00                                      3 = .

0000032b <__c.1637>:
     32b:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 24      (steps/mm y)..$
     33b:	32 20 3d 20 00                                      2 = .

00000340 <__c.1635>:
     340:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 24      (steps/mm x)..$
     350:	31 20 3d 20 00                                      1 = .

00000355 <__c.1633>:
     355:	24 30 20 3d 20 00                                   $0 = .

0000035b <pstr_inf>:
     35b:	49 4e 46                                            INF

0000035e <pstr_inity>:
     35e:	49 4e 49 54 59                                      INITY

00000363 <pstr_nan>:
     363:	4e 41 4e                                            NAN

00000366 <pwr_m10>:
     366:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     376:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000037e <pwr_p10>:
     37e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     38e:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d8 e0       	ldi	r29, 0x08	; 8
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_clear_bss>:
     3a2:	16 e0       	ldi	r17, 0x06	; 6
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
     3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
     3ac:	ad 3b       	cpi	r26, 0xBD	; 189
     3ae:	b1 07       	cpc	r27, r17
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>
     3b2:	0e 94 98 0b 	call	0x1730	; 0x1730 <main>
     3b6:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <exit>

000003ba <__bad_interrupt>:
     3ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003be <beginSerial>:

uint8_t rx_buffer_head = 0;
uint8_t rx_buffer_tail = 0;

void beginSerial(long baud)
{
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	7b 01       	movw	r14, r22
     3c8:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
     3ca:	22 e0       	ldi	r18, 0x02	; 2
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	0e 94 9d 21 	call	0x433a	; 0x433a <__divmodsi4>
     3d6:	20 5c       	subi	r18, 0xC0	; 192
     3d8:	3d 4b       	sbci	r19, 0xBD	; 189
     3da:	40 4f       	sbci	r20, 0xF0	; 240
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
     3de:	ca 01       	movw	r24, r20
     3e0:	b9 01       	movw	r22, r18
     3e2:	a8 01       	movw	r20, r16
     3e4:	97 01       	movw	r18, r14
     3e6:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__udivmodsi4>
     3ea:	c9 01       	movw	r24, r18
     3ec:	da 01       	movw	r26, r20
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	29 2f       	mov	r18, r25
     3f6:	3a 2f       	mov	r19, r26
     3f8:	4b 2f       	mov	r20, r27
     3fa:	55 27       	eor	r21, r21
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	a1 1d       	adc	r26, r1
     400:	b1 1d       	adc	r27, r1
     402:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
     406:	81 50       	subi	r24, 0x01	; 1
     408:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
     40c:	e0 ec       	ldi	r30, 0xC0	; 192
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8d 7f       	andi	r24, 0xFD	; 253
     414:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
     416:	e1 ec       	ldi	r30, 0xC1	; 193
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	80 61       	ori	r24, 0x10	; 16
     41e:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
     420:	80 81       	ld	r24, Z
     422:	88 60       	ori	r24, 0x08	; 8
     424:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
     426:	80 81       	ld	r24, Z
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	08 95       	ret

00000436 <serialWrite>:

void serialWrite(unsigned char c)
{
     436:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
     438:	80 91 c0 00 	lds	r24, 0x00C0
     43c:	85 ff       	sbrs	r24, 5
     43e:	fc cf       	rjmp	.-8      	; 0x438 <serialWrite+0x2>
		;

	UDR0 = c;
     440:	90 93 c6 00 	sts	0x00C6, r25
}
     444:	08 95       	ret

00000446 <serialAvailable>:

int serialAvailable()
{
     446:	20 91 00 01 	lds	r18, 0x0100
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	20 50       	subi	r18, 0x00	; 0
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	80 91 01 01 	lds	r24, 0x0101
     454:	28 1b       	sub	r18, r24
     456:	31 09       	sbc	r19, r1
     458:	30 70       	andi	r19, 0x00	; 0
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
     45a:	c9 01       	movw	r24, r18
     45c:	08 95       	ret

0000045e <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
     45e:	90 91 01 01 	lds	r25, 0x0101
     462:	80 91 00 01 	lds	r24, 0x0100
     466:	89 17       	cp	r24, r25
     468:	19 f4       	brne	.+6      	; 0x470 <serialRead+0x12>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	3f ef       	ldi	r19, 0xFF	; 255
     46e:	0a c0       	rjmp	.+20     	; 0x484 <serialRead+0x26>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
     470:	89 2f       	mov	r24, r25
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	fc 01       	movw	r30, r24
     476:	e8 56       	subi	r30, 0x68	; 104
     478:	fa 4f       	sbci	r31, 0xFA	; 250
     47a:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	80 93 01 01 	sts	0x0101, r24
		return c;
     482:	30 e0       	ldi	r19, 0x00	; 0
	}
}
     484:	c9 01       	movw	r24, r18
     486:	08 95       	ret

00000488 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
     488:	80 91 01 01 	lds	r24, 0x0101
     48c:	80 93 00 01 	sts	0x0100, r24
}
     490:	08 95       	ret

00000492 <__vector_18>:

SIGNAL(USART_RX_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	ef 93       	push	r30
     4a8:	ff 93       	push	r31
	unsigned char c = UDR0;
     4aa:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
     4ae:	80 91 00 01 	lds	r24, 0x0100
     4b2:	e8 2f       	mov	r30, r24
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	31 96       	adiw	r30, 0x01	; 1
     4b8:	9f 01       	movw	r18, r30
     4ba:	30 70       	andi	r19, 0x00	; 0
     4bc:	31 97       	sbiw	r30, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
     4be:	80 91 01 01 	lds	r24, 0x0101
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	28 17       	cp	r18, r24
     4c6:	39 07       	cpc	r19, r25
     4c8:	29 f0       	breq	.+10     	; 0x4d4 <__vector_18+0x42>
		rx_buffer[rx_buffer_head] = c;
     4ca:	e8 56       	subi	r30, 0x68	; 104
     4cc:	fa 4f       	sbci	r31, 0xFA	; 250
     4ce:	40 83       	st	Z, r20
		rx_buffer_head = i;
     4d0:	20 93 00 01 	sts	0x0100, r18
	}
}
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	9f 91       	pop	r25
     4da:	8f 91       	pop	r24
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
     4ec:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     4ee:	80 91 c0 00 	lds	r24, 0x00C0
     4f2:	85 ff       	sbrs	r24, 5
     4f4:	fc cf       	rjmp	.-8      	; 0x4ee <printByte+0x2>
		;

	UDR0 = c;
     4f6:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
     4fa:	08 95       	ret

000004fc <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
     4fc:	fc 01       	movw	r30, r24
     4fe:	07 c0       	rjmp	.+14     	; 0x50e <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     500:	80 91 c0 00 	lds	r24, 0x00C0
     504:	85 ff       	sbrs	r24, 5
     506:	fc cf       	rjmp	.-8      	; 0x500 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
     508:	31 96       	adiw	r30, 0x01	; 1
void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;

	UDR0 = c;
     50a:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
     50e:	90 81       	ld	r25, Z
     510:	99 23       	and	r25, r25
     512:	b1 f7       	brne	.-20     	; 0x500 <printString+0x4>
		printByte(*s++);
}
     514:	08 95       	ret

00000516 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
     516:	9c 01       	movw	r18, r24
     518:	06 c0       	rjmp	.+12     	; 0x526 <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     51a:	80 91 c0 00 	lds	r24, 0x00C0
     51e:	85 ff       	sbrs	r24, 5
     520:	fc cf       	rjmp	.-8      	; 0x51a <printPgmString+0x4>
		;

	UDR0 = c;
     522:	90 93 c6 00 	sts	0x00C6, r25
     526:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	94 91       	lpm	r25, Z+
     52e:	99 23       	and	r25, r25
     530:	a1 f7       	brne	.-24     	; 0x51a <printPgmString+0x4>
		printByte(c);
}
     532:	08 95       	ret

00000534 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
     534:	2f 92       	push	r2
     536:	3f 92       	push	r3
     538:	4f 92       	push	r4
     53a:	5f 92       	push	r5
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	df 93       	push	r29
     556:	cf 93       	push	r28
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	a0 97       	sbiw	r28, 0x20	; 32
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	6b 01       	movw	r12, r22
     56a:	7c 01       	movw	r14, r24
     56c:	29 01       	movw	r4, r18
     56e:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
     570:	61 15       	cp	r22, r1
     572:	71 05       	cpc	r23, r1
     574:	81 05       	cpc	r24, r1
     576:	91 05       	cpc	r25, r1
     578:	41 f4       	brne	.+16     	; 0x58a <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     57a:	80 91 c0 00 	lds	r24, 0x00C0
     57e:	85 ff       	sbrs	r24, 5
     580:	fc cf       	rjmp	.-8      	; 0x57a <printIntegerInBase+0x46>
		;

	UDR0 = c;
     582:	80 e3       	ldi	r24, 0x30	; 48
     584:	80 93 c6 00 	sts	0x00C6, r24
     588:	49 c0       	rjmp	.+146    	; 0x61c <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
     58a:	88 24       	eor	r8, r8
     58c:	99 24       	eor	r9, r9
     58e:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
     590:	1e 01       	movw	r2, r28
     592:	08 94       	sec
     594:	21 1c       	adc	r2, r1
     596:	31 1c       	adc	r3, r1
     598:	81 01       	movw	r16, r2
     59a:	08 0d       	add	r16, r8
     59c:	19 1d       	adc	r17, r9
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	a3 01       	movw	r20, r6
     5a4:	92 01       	movw	r18, r4
     5a6:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__udivmodsi4>
     5aa:	f8 01       	movw	r30, r16
     5ac:	60 83       	st	Z, r22
     5ae:	08 94       	sec
     5b0:	81 1c       	adc	r8, r1
     5b2:	91 1c       	adc	r9, r1
     5b4:	a1 1c       	adc	r10, r1
     5b6:	b1 1c       	adc	r11, r1
		n /= base;
     5b8:	c7 01       	movw	r24, r14
     5ba:	b6 01       	movw	r22, r12
     5bc:	a3 01       	movw	r20, r6
     5be:	92 01       	movw	r18, r4
     5c0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__udivmodsi4>
     5c4:	c9 01       	movw	r24, r18
     5c6:	da 01       	movw	r26, r20
     5c8:	6c 01       	movw	r12, r24
     5ca:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
     5cc:	c1 14       	cp	r12, r1
     5ce:	d1 04       	cpc	r13, r1
     5d0:	e1 04       	cpc	r14, r1
     5d2:	f1 04       	cpc	r15, r1
     5d4:	09 f7       	brne	.-62     	; 0x598 <printIntegerInBase+0x64>
     5d6:	91 01       	movw	r18, r2
     5d8:	28 0d       	add	r18, r8
     5da:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
     5dc:	be 01       	movw	r22, r28
     5de:	6f 5f       	subi	r22, 0xFF	; 255
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
     5e2:	d5 01       	movw	r26, r10
     5e4:	c4 01       	movw	r24, r8
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	a1 09       	sbc	r26, r1
     5ea:	b1 09       	sbc	r27, r1
     5ec:	ac 01       	movw	r20, r24
     5ee:	48 19       	sub	r20, r8
     5f0:	59 09       	sbc	r21, r9
     5f2:	11 c0       	rjmp	.+34     	; 0x616 <printIntegerInBase+0xe2>
     5f4:	fa 01       	movw	r30, r20
     5f6:	e2 0f       	add	r30, r18
     5f8:	f3 1f       	adc	r31, r19
     5fa:	e0 81       	ld	r30, Z
     5fc:	ea 30       	cpi	r30, 0x0A	; 10
     5fe:	10 f4       	brcc	.+4      	; 0x604 <printIntegerInBase+0xd0>
     600:	e0 5d       	subi	r30, 0xD0	; 208
     602:	01 c0       	rjmp	.+2      	; 0x606 <printIntegerInBase+0xd2>
     604:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     606:	80 91 c0 00 	lds	r24, 0x00C0
     60a:	85 ff       	sbrs	r24, 5
     60c:	fc cf       	rjmp	.-8      	; 0x606 <printIntegerInBase+0xd2>
		;

	UDR0 = c;
     60e:	e0 93 c6 00 	sts	0x00C6, r30
     612:	21 50       	subi	r18, 0x01	; 1
     614:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
     616:	62 17       	cp	r22, r18
     618:	73 07       	cpc	r23, r19
     61a:	61 f7       	brne	.-40     	; 0x5f4 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
     61c:	a0 96       	adiw	r28, 0x20	; 32
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	cf 91       	pop	r28
     62a:	df 91       	pop	r29
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	7f 90       	pop	r7
     642:	6f 90       	pop	r6
     644:	5f 90       	pop	r5
     646:	4f 90       	pop	r4
     648:	3f 90       	pop	r3
     64a:	2f 90       	pop	r2
     64c:	08 95       	ret

0000064e <printInteger>:

void printInteger(long n)
{
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
	if (n < 0) {
     652:	97 ff       	sbrs	r25, 7
     654:	0e c0       	rjmp	.+28     	; 0x672 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     656:	80 91 c0 00 	lds	r24, 0x00C0
     65a:	85 ff       	sbrs	r24, 5
     65c:	fc cf       	rjmp	.-8      	; 0x656 <printInteger+0x8>
		;

	UDR0 = c;
     65e:	8d e2       	ldi	r24, 0x2D	; 45
     660:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
     664:	50 95       	com	r21
     666:	40 95       	com	r20
     668:	30 95       	com	r19
     66a:	21 95       	neg	r18
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	4f 4f       	sbci	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
     672:	ca 01       	movw	r24, r20
     674:	b9 01       	movw	r22, r18
     676:	2a e0       	ldi	r18, 0x0A	; 10
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	0e 94 9a 02 	call	0x534	; 0x534 <printIntegerInBase>
}
     682:	08 95       	ret

00000684 <printFloat>:

void printFloat(double n)
{
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <printFloat+0xe>
     692:	00 d0       	rcall	.+0      	; 0x694 <printFloat+0x10>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
     698:	ae 01       	movw	r20, r28
     69a:	4f 5f       	subi	r20, 0xFF	; 255
     69c:	5f 4f       	sbci	r21, 0xFF	; 255
     69e:	0e 94 22 20 	call	0x4044	; 0x4044 <modf>
     6a2:	7b 01       	movw	r14, r22
     6a4:	8c 01       	movw	r16, r24
  printInteger(integer_part);
     6a6:	69 81       	ldd	r22, Y+1	; 0x01
     6a8:	7a 81       	ldd	r23, Y+2	; 0x02
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
     6b2:	0e 94 27 03 	call	0x64e	; 0x64e <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
     6b6:	80 91 c0 00 	lds	r24, 0x00C0
     6ba:	85 ff       	sbrs	r24, 5
     6bc:	fc cf       	rjmp	.-8      	; 0x6b6 <printFloat+0x32>
		;

	UDR0 = c;
     6be:	8e e2       	ldi	r24, 0x2E	; 46
     6c0:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(round(fractional_part*1000));
     6c4:	c8 01       	movw	r24, r16
     6c6:	b7 01       	movw	r22, r14
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	4a e7       	ldi	r20, 0x7A	; 122
     6ce:	54 e4       	ldi	r21, 0x44	; 68
     6d0:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     6d4:	0e 94 b8 20 	call	0x4170	; 0x4170 <round>
     6d8:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
     6dc:	0e 94 27 03 	call	0x64e	; 0x64e <printInteger>
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6f6:	f9 99       	sbic	0x1f, 1	; 31
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     6fa:	92 bd       	out	0x22, r25	; 34
     6fc:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     702:	80 b5       	in	r24, 0x20	; 32
}
     704:	08 95       	ret

00000706 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     706:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     708:	f9 99       	sbic	0x1f, 1	; 31
     70a:	fe cf       	rjmp	.-4      	; 0x708 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     70c:	92 bd       	out	0x22, r25	; 34
     70e:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     714:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     716:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     718:	89 2f       	mov	r24, r25
     71a:	86 23       	and	r24, r22
     71c:	39 f0       	breq	.+14     	; 0x72c <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     71e:	6f 3f       	cpi	r22, 0xFF	; 255
     720:	19 f0       	breq	.+6      	; 0x728 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     722:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	06 c0       	rjmp	.+12     	; 0x734 <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     728:	84 e1       	ldi	r24, 0x14	; 20
     72a:	04 c0       	rjmp	.+8      	; 0x734 <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     72c:	99 23       	and	r25, r25
     72e:	21 f0       	breq	.+8      	; 0x738 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     730:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     732:	84 e2       	ldi	r24, 0x24	; 36
     734:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     736:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     738:	78 94       	sei
}
     73a:	08 95       	ret

0000073c <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	00 d0       	rcall	.+0      	; 0x754 <memcpy_to_eeprom_with_checksum+0x18>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	5c 01       	movw	r10, r24
     75a:	6b 01       	movw	r12, r22
     75c:	7a 01       	movw	r14, r20
     75e:	4a 01       	movw	r8, r20
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	1e c0       	rjmp	.+60     	; 0x7a0 <memcpy_to_eeprom_with_checksum+0x64>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     764:	00 23       	and	r16, r16
     766:	19 f0       	breq	.+6      	; 0x76e <memcpy_to_eeprom_with_checksum+0x32>
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	08 c0       	rjmp	.+16     	; 0x77e <memcpy_to_eeprom_with_checksum+0x42>
     76e:	20 2f       	mov	r18, r16
     770:	33 27       	eor	r19, r19
     772:	27 fd       	sbrc	r18, 7
     774:	30 95       	com	r19
     776:	22 27       	eor	r18, r18
     778:	33 0f       	add	r19, r19
     77a:	22 1f       	adc	r18, r18
     77c:	33 27       	eor	r19, r19
    checksum += *source;
     77e:	f6 01       	movw	r30, r12
     780:	61 91       	ld	r22, Z+
     782:	6f 01       	movw	r12, r30
     784:	06 2f       	mov	r16, r22
     786:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     788:	9c 01       	movw	r18, r24
     78a:	2f 5f       	subi	r18, 0xFF	; 255
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	3a 83       	std	Y+2, r19	; 0x02
     790:	29 83       	std	Y+1, r18	; 0x01
     792:	0e 94 83 03 	call	0x706	; 0x706 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     796:	08 94       	sec
     798:	81 08       	sbc	r8, r1
     79a:	91 08       	sbc	r9, r1
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	81 14       	cp	r8, r1
     7a2:	91 04       	cpc	r9, r1
     7a4:	f9 f6       	brne	.-66     	; 0x764 <memcpy_to_eeprom_with_checksum+0x28>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     7a6:	c7 01       	movw	r24, r14
     7a8:	8a 0d       	add	r24, r10
     7aa:	9b 1d       	adc	r25, r11
     7ac:	60 2f       	mov	r22, r16
     7ae:	0e 94 83 03 	call	0x706	; 0x706 <eeprom_put_char>
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	08 95       	ret

000007ce <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ec 01       	movw	r28, r24
     7d4:	fb 01       	movw	r30, r22
     7d6:	9a 01       	movw	r18, r20
     7d8:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     7da:	b1 e0       	ldi	r27, 0x01	; 1
     7dc:	19 c0       	rjmp	.+50     	; 0x810 <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7de:	f9 99       	sbic	0x1f, 1	; 31
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     7e2:	f2 bd       	out	0x22, r31	; 34
     7e4:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7e6:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     7e8:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     7ea:	99 23       	and	r25, r25
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <memcpy_from_eeprom_with_checksum+0x26>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <memcpy_from_eeprom_with_checksum+0x36>
     7f4:	89 2f       	mov	r24, r25
     7f6:	99 27       	eor	r25, r25
     7f8:	87 fd       	sbrc	r24, 7
     7fa:	90 95       	com	r25
     7fc:	88 27       	eor	r24, r24
     7fe:	99 0f       	add	r25, r25
     800:	88 1f       	adc	r24, r24
     802:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     804:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     806:	9a 2f       	mov	r25, r26
     808:	98 0f       	add	r25, r24
    *(destination++) = data; 
     80a:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	30 40       	sbci	r19, 0x00	; 0
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	21 f7       	brne	.-56     	; 0x7de <memcpy_from_eeprom_with_checksum+0x10>
     816:	46 0f       	add	r20, r22
     818:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     81a:	f9 99       	sbic	0x1f, 1	; 31
     81c:	fe cf       	rjmp	.-4      	; 0x81a <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     81e:	52 bd       	out	0x22, r21	; 34
     820:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     826:	80 b5       	in	r24, 0x20	; 32
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	98 17       	cp	r25, r24
     82e:	11 f4       	brne	.+4      	; 0x834 <memcpy_from_eeprom_with_checksum+0x66>
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     834:	c9 01       	movw	r24, r18
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     83c:	81 e2       	ldi	r24, 0x21	; 33
     83e:	e2 e0       	ldi	r30, 0x02	; 2
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	df 01       	movw	r26, r30
     844:	1d 92       	st	X+, r1
     846:	8a 95       	dec	r24
     848:	e9 f7       	brne	.-6      	; 0x844 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     84a:	60 91 a6 06 	lds	r22, 0x06A6
     84e:	70 91 a7 06 	lds	r23, 0x06A7
     852:	80 91 a8 06 	lds	r24, 0x06A8
     856:	90 91 a9 06 	lds	r25, 0x06A9
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e7       	ldi	r20, 0x70	; 112
     860:	52 e4       	ldi	r21, 0x42	; 66
     862:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
     866:	60 93 09 01 	sts	0x0109, r22
     86a:	70 93 0a 01 	sts	0x010A, r23
     86e:	80 93 0b 01 	sts	0x010B, r24
     872:	90 93 0c 01 	sts	0x010C, r25
  gc.seek_rate = settings.default_seek_rate/60;
     876:	60 91 aa 06 	lds	r22, 0x06AA
     87a:	70 91 ab 06 	lds	r23, 0x06AB
     87e:	80 91 ac 06 	lds	r24, 0x06AC
     882:	90 91 ad 06 	lds	r25, 0x06AD
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e7       	ldi	r20, 0x70	; 112
     88c:	52 e4       	ldi	r21, 0x42	; 66
     88e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
     892:	60 93 0d 01 	sts	0x010D, r22
     896:	70 93 0e 01 	sts	0x010E, r23
     89a:	80 93 0f 01 	sts	0x010F, r24
     89e:	90 93 10 01 	sts	0x0110, r25

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     8a2:	10 92 20 01 	sts	0x0120, r1
  gc.plane_axis_1 = axis_1;
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	90 93 21 01 	sts	0x0121, r25
  gc.plane_axis_2 = axis_2;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	80 93 22 01 	sts	0x0122, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = true;
     8b2:	90 93 06 01 	sts	0x0106, r25
}
     8b6:	08 95       	ret

000008b8 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter) {
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
     8c2:	8b 01       	movw	r16, r22
     8c4:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     8c6:	8c 91       	ld	r24, X
     8c8:	fa 01       	movw	r30, r20
     8ca:	e8 0f       	add	r30, r24
     8cc:	f1 1d       	adc	r31, r1
     8ce:	e0 81       	ld	r30, Z
     8d0:	ee 23       	and	r30, r30
     8d2:	b1 f0       	breq	.+44     	; 0x900 <__stack+0x1>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     8d4:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     8d6:	e1 54       	subi	r30, 0x41	; 65
     8d8:	ea 31       	cpi	r30, 0x1A	; 26
     8da:	10 f0       	brcs	.+4      	; 0x8e0 <next_statement+0x28>
    FAIL(STATUS_EXPECTED_COMMAND_LETTER);
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e c0       	rjmp	.+28     	; 0x8fc <next_statement+0x44>
    return(0);
  }
  (*char_counter)++;
     8e0:	8c 91       	ld	r24, X
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	8c 93       	st	X, r24
  if (!read_double(line, char_counter, double_ptr)) {
     8e6:	ca 01       	movw	r24, r20
     8e8:	b9 01       	movw	r22, r18
     8ea:	a8 01       	movw	r20, r16
     8ec:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <read_double>
     8f0:	89 2b       	or	r24, r25
     8f2:	19 f0       	breq	.+6      	; 0x8fa <next_statement+0x42>
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	05 c0       	rjmp	.+10     	; 0x904 <__stack+0x5>
    FAIL(STATUS_BAD_NUMBER_FORMAT); 
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 02 01 	sts	0x0102, r24
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
    return(0);
  };
  return(1);
}
     904:	c9 01       	movw	r24, r18
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	08 95       	ret

00000910 <theta>:

#ifdef __AVR_ATmega328P__        
// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
static double theta(double x, double y)
{
     910:	af 92       	push	r10
     912:	bf 92       	push	r11
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	79 01       	movw	r14, r18
     922:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
     924:	5f 77       	andi	r21, 0x7F	; 127
     926:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
     92a:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <atan>
     92e:	5b 01       	movw	r10, r22
     930:	6c 01       	movw	r12, r24
  if (y>0) {
     932:	c8 01       	movw	r24, r16
     934:	b7 01       	movw	r22, r14
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
     942:	18 16       	cp	r1, r24
     944:	cc f0       	brlt	.+50     	; 0x978 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
     946:	c6 01       	movw	r24, r12
     948:	b5 01       	movw	r22, r10
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
     956:	18 16       	cp	r1, r24
     958:	2c f4       	brge	.+10     	; 0x964 <theta+0x54>
    {
      return(M_PI-theta);
     95a:	6b ed       	ldi	r22, 0xDB	; 219
     95c:	7f e0       	ldi	r23, 0x0F	; 15
     95e:	89 e4       	ldi	r24, 0x49	; 73
     960:	90 e4       	ldi	r25, 0x40	; 64
     962:	04 c0       	rjmp	.+8      	; 0x96c <theta+0x5c>
    } else {
      return(-M_PI-theta);
     964:	6b ed       	ldi	r22, 0xDB	; 219
     966:	7f e0       	ldi	r23, 0x0F	; 15
     968:	89 e4       	ldi	r24, 0x49	; 73
     96a:	90 ec       	ldi	r25, 0xC0	; 192
     96c:	a6 01       	movw	r20, r12
     96e:	95 01       	movw	r18, r10
     970:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
     974:	5b 01       	movw	r10, r22
     976:	6c 01       	movw	r12, r24
    }
  }
}
     978:	b5 01       	movw	r22, r10
     97a:	c6 01       	movw	r24, r12
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	08 95       	ret

0000098e <gc_execute_line>:
#endif

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     98e:	2f 92       	push	r2
     990:	3f 92       	push	r3
     992:	4f 92       	push	r4
     994:	5f 92       	push	r5
     996:	6f 92       	push	r6
     998:	7f 92       	push	r7
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	ea 97       	sbiw	r28, 0x3a	; 58
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	2c 01       	movw	r4, r24
  uint8_t char_counter = 0;  
     9c4:	19 82       	std	Y+1, r1	; 0x01
  double target[3], offset[3];  
  
  double p = 0, r = 0;
  int int_value;
  
  clear_vector(target);
     9c6:	8c e0       	ldi	r24, 0x0C	; 12
     9c8:	fe 01       	movw	r30, r28
     9ca:	37 96       	adiw	r30, 0x07	; 7
     9cc:	df 01       	movw	r26, r30
     9ce:	28 2f       	mov	r18, r24
     9d0:	1d 92       	st	X+, r1
     9d2:	2a 95       	dec	r18
     9d4:	e9 f7       	brne	.-6      	; 0x9d0 <gc_execute_line+0x42>
  clear_vector(offset);
     9d6:	fe 01       	movw	r30, r28
     9d8:	73 96       	adiw	r30, 0x13	; 19
     9da:	df 01       	movw	r26, r30
     9dc:	1d 92       	st	X+, r1
     9de:	8a 95       	dec	r24
     9e0:	e9 f7       	brne	.-6      	; 0x9dc <gc_execute_line+0x4e>

  gc.status_code = STATUS_OK;
     9e2:	10 92 02 01 	sts	0x0102, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     9e6:	f2 01       	movw	r30, r4
     9e8:	80 81       	ld	r24, Z
     9ea:	88 32       	cpi	r24, 0x28	; 40
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <gc_execute_line+0x64>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	e6 c4       	rjmp	.+2508   	; 0x13be <gc_execute_line+0xa30>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     9f2:	8f 32       	cpi	r24, 0x2F	; 47
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <gc_execute_line+0x6a>
     9f6:	f5 c0       	rjmp	.+490    	; 0xbe2 <gc_execute_line+0x254>
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	f1 c0       	rjmp	.+482    	; 0xbe2 <gc_execute_line+0x254>
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     a00:	6b 81       	ldd	r22, Y+3	; 0x03
     a02:	7c 81       	ldd	r23, Y+4	; 0x04
     a04:	8d 81       	ldd	r24, Y+5	; 0x05
     a06:	9e 81       	ldd	r25, Y+6	; 0x06
     a08:	0e 94 23 21 	call	0x4246	; 0x4246 <trunc>
     a0c:	7b 01       	movw	r14, r22
     a0e:	8c 01       	movw	r16, r24
     a10:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    switch(letter) {
     a14:	4a 81       	ldd	r20, Y+2	; 0x02
     a16:	4d 34       	cpi	r20, 0x4D	; 77
     a18:	09 f4       	brne	.+2      	; 0xa1c <gc_execute_line+0x8e>
     a1a:	ac c0       	rjmp	.+344    	; 0xb74 <gc_execute_line+0x1e6>
     a1c:	44 35       	cpi	r20, 0x54	; 84
     a1e:	09 f4       	brne	.+2      	; 0xa22 <gc_execute_line+0x94>
     a20:	d5 c0       	rjmp	.+426    	; 0xbcc <gc_execute_line+0x23e>
     a22:	47 34       	cpi	r20, 0x47	; 71
     a24:	09 f0       	breq	.+2      	; 0xa28 <gc_execute_line+0x9a>
     a26:	d8 c0       	rjmp	.+432    	; 0xbd8 <gc_execute_line+0x24a>
      case 'G':
      switch(int_value) {
     a28:	65 31       	cpi	r22, 0x15	; 21
     a2a:	71 05       	cpc	r23, r1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <gc_execute_line+0xa2>
     a2e:	8a c0       	rjmp	.+276    	; 0xb44 <gc_execute_line+0x1b6>
     a30:	66 31       	cpi	r22, 0x16	; 22
     a32:	71 05       	cpc	r23, r1
     a34:	8c f5       	brge	.+98     	; 0xa98 <gc_execute_line+0x10a>
     a36:	64 30       	cpi	r22, 0x04	; 4
     a38:	71 05       	cpc	r23, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <gc_execute_line+0xb0>
     a3c:	5c c0       	rjmp	.+184    	; 0xaf6 <gc_execute_line+0x168>
     a3e:	65 30       	cpi	r22, 0x05	; 5
     a40:	71 05       	cpc	r23, r1
     a42:	ac f4       	brge	.+42     	; 0xa6e <gc_execute_line+0xe0>
     a44:	61 30       	cpi	r22, 0x01	; 1
     a46:	71 05       	cpc	r23, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <gc_execute_line+0xbe>
     a4a:	5b c0       	rjmp	.+182    	; 0xb02 <gc_execute_line+0x174>
     a4c:	62 30       	cpi	r22, 0x02	; 2
     a4e:	71 05       	cpc	r23, r1
     a50:	2c f4       	brge	.+10     	; 0xa5c <gc_execute_line+0xce>
     a52:	61 15       	cp	r22, r1
     a54:	71 05       	cpc	r23, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <gc_execute_line+0xcc>
     a58:	51 c0       	rjmp	.+162    	; 0xafc <gc_execute_line+0x16e>
     a5a:	b5 c0       	rjmp	.+362    	; 0xbc6 <gc_execute_line+0x238>
     a5c:	62 30       	cpi	r22, 0x02	; 2
     a5e:	71 05       	cpc	r23, r1
     a60:	09 f4       	brne	.+2      	; 0xa64 <gc_execute_line+0xd6>
     a62:	52 c0       	rjmp	.+164    	; 0xb08 <gc_execute_line+0x17a>
     a64:	63 30       	cpi	r22, 0x03	; 3
     a66:	71 05       	cpc	r23, r1
     a68:	09 f0       	breq	.+2      	; 0xa6c <gc_execute_line+0xde>
     a6a:	ad c0       	rjmp	.+346    	; 0xbc6 <gc_execute_line+0x238>
     a6c:	50 c0       	rjmp	.+160    	; 0xb0e <gc_execute_line+0x180>
     a6e:	62 31       	cpi	r22, 0x12	; 18
     a70:	71 05       	cpc	r23, r1
     a72:	09 f4       	brne	.+2      	; 0xa76 <gc_execute_line+0xe8>
     a74:	56 c0       	rjmp	.+172    	; 0xb22 <gc_execute_line+0x194>
     a76:	63 31       	cpi	r22, 0x13	; 19
     a78:	71 05       	cpc	r23, r1
     a7a:	2c f4       	brge	.+10     	; 0xa86 <gc_execute_line+0xf8>
     a7c:	61 31       	cpi	r22, 0x11	; 17
     a7e:	71 05       	cpc	r23, r1
     a80:	09 f0       	breq	.+2      	; 0xa84 <gc_execute_line+0xf6>
     a82:	a1 c0       	rjmp	.+322    	; 0xbc6 <gc_execute_line+0x238>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <gc_execute_line+0x186>
     a86:	63 31       	cpi	r22, 0x13	; 19
     a88:	71 05       	cpc	r23, r1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <gc_execute_line+0x100>
     a8c:	51 c0       	rjmp	.+162    	; 0xb30 <gc_execute_line+0x1a2>
     a8e:	64 31       	cpi	r22, 0x14	; 20
     a90:	71 05       	cpc	r23, r1
     a92:	09 f0       	breq	.+2      	; 0xa96 <gc_execute_line+0x108>
     a94:	98 c0       	rjmp	.+304    	; 0xbc6 <gc_execute_line+0x238>
     a96:	53 c0       	rjmp	.+166    	; 0xb3e <gc_execute_line+0x1b0>
     a98:	6a 35       	cpi	r22, 0x5A	; 90
     a9a:	71 05       	cpc	r23, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <gc_execute_line+0x112>
     a9e:	5b c0       	rjmp	.+182    	; 0xb56 <gc_execute_line+0x1c8>
     aa0:	6b 35       	cpi	r22, 0x5B	; 91
     aa2:	71 05       	cpc	r23, r1
     aa4:	a4 f4       	brge	.+40     	; 0xace <gc_execute_line+0x140>
     aa6:	6e 31       	cpi	r22, 0x1E	; 30
     aa8:	71 05       	cpc	r23, r1
     aaa:	11 f1       	breq	.+68     	; 0xaf0 <gc_execute_line+0x162>
     aac:	6f 31       	cpi	r22, 0x1F	; 31
     aae:	71 05       	cpc	r23, r1
     ab0:	2c f4       	brge	.+10     	; 0xabc <gc_execute_line+0x12e>
     ab2:	6c 31       	cpi	r22, 0x1C	; 28
     ab4:	71 05       	cpc	r23, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <gc_execute_line+0x12c>
     ab8:	86 c0       	rjmp	.+268    	; 0xbc6 <gc_execute_line+0x238>
     aba:	1a c0       	rjmp	.+52     	; 0xaf0 <gc_execute_line+0x162>
     abc:	65 33       	cpi	r22, 0x35	; 53
     abe:	71 05       	cpc	r23, r1
     ac0:	09 f4       	brne	.+2      	; 0xac4 <gc_execute_line+0x136>
     ac2:	43 c0       	rjmp	.+134    	; 0xb4a <gc_execute_line+0x1bc>
     ac4:	60 35       	cpi	r22, 0x50	; 80
     ac6:	71 05       	cpc	r23, r1
     ac8:	09 f0       	breq	.+2      	; 0xacc <gc_execute_line+0x13e>
     aca:	7d c0       	rjmp	.+250    	; 0xbc6 <gc_execute_line+0x238>
     acc:	41 c0       	rjmp	.+130    	; 0xb50 <gc_execute_line+0x1c2>
     ace:	6c 35       	cpi	r22, 0x5C	; 92
     ad0:	71 05       	cpc	r23, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <gc_execute_line+0x148>
     ad4:	46 c0       	rjmp	.+140    	; 0xb62 <gc_execute_line+0x1d4>
     ad6:	6c 35       	cpi	r22, 0x5C	; 92
     ad8:	71 05       	cpc	r23, r1
     ada:	0c f4       	brge	.+2      	; 0xade <gc_execute_line+0x150>
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <gc_execute_line+0x1ce>
     ade:	6d 35       	cpi	r22, 0x5D	; 93
     ae0:	71 05       	cpc	r23, r1
     ae2:	09 f4       	brne	.+2      	; 0xae6 <gc_execute_line+0x158>
     ae4:	41 c0       	rjmp	.+130    	; 0xb68 <gc_execute_line+0x1da>
     ae6:	6e 35       	cpi	r22, 0x5E	; 94
     ae8:	71 05       	cpc	r23, r1
     aea:	09 f0       	breq	.+2      	; 0xaee <gc_execute_line+0x160>
     aec:	6c c0       	rjmp	.+216    	; 0xbc6 <gc_execute_line+0x238>
     aee:	3f c0       	rjmp	.+126    	; 0xb6e <gc_execute_line+0x1e0>
     af0:	f2 e0       	ldi	r31, 0x02	; 2
     af2:	fc a7       	std	Y+44, r31	; 0x2c
     af4:	71 c0       	rjmp	.+226    	; 0xbd8 <gc_execute_line+0x24a>
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	2c a7       	std	Y+44, r18	; 0x2c
     afa:	6e c0       	rjmp	.+220    	; 0xbd8 <gc_execute_line+0x24a>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     afc:	10 92 03 01 	sts	0x0103, r1
     b00:	6b c0       	rjmp	.+214    	; 0xbd8 <gc_execute_line+0x24a>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     b02:	d0 92 03 01 	sts	0x0103, r13
     b06:	68 c0       	rjmp	.+208    	; 0xbd8 <gc_execute_line+0x24a>
#ifdef __AVR_ATmega328P__        
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     b08:	c0 92 03 01 	sts	0x0103, r12
     b0c:	65 c0       	rjmp	.+202    	; 0xbd8 <gc_execute_line+0x24a>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     b0e:	b0 92 03 01 	sts	0x0103, r11
     b12:	62 c0       	rjmp	.+196    	; 0xbd8 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b14:	10 92 20 01 	sts	0x0120, r1
  gc.plane_axis_1 = axis_1;
     b18:	d0 92 21 01 	sts	0x0121, r13
  gc.plane_axis_2 = axis_2;
     b1c:	c0 92 22 01 	sts	0x0122, r12
     b20:	5b c0       	rjmp	.+182    	; 0xbd8 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b22:	10 92 20 01 	sts	0x0120, r1
  gc.plane_axis_1 = axis_1;
     b26:	c0 92 21 01 	sts	0x0121, r12
  gc.plane_axis_2 = axis_2;
     b2a:	d0 92 22 01 	sts	0x0122, r13
     b2e:	54 c0       	rjmp	.+168    	; 0xbd8 <gc_execute_line+0x24a>

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b30:	d0 92 20 01 	sts	0x0120, r13
  gc.plane_axis_1 = axis_1;
     b34:	c0 92 21 01 	sts	0x0121, r12
  gc.plane_axis_2 = axis_2;
     b38:	10 92 22 01 	sts	0x0122, r1
     b3c:	4d c0       	rjmp	.+154    	; 0xbd8 <gc_execute_line+0x24a>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = true; break;
     b3e:	d0 92 05 01 	sts	0x0105, r13
     b42:	4a c0       	rjmp	.+148    	; 0xbd8 <gc_execute_line+0x24a>
        case 21: gc.inches_mode = false; break;
     b44:	10 92 05 01 	sts	0x0105, r1
     b48:	47 c0       	rjmp	.+142    	; 0xbd8 <gc_execute_line+0x24a>
     b4a:	31 e0       	ldi	r19, 0x01	; 1
     b4c:	3d a7       	std	Y+45, r19	; 0x2d
     b4e:	44 c0       	rjmp	.+136    	; 0xbd8 <gc_execute_line+0x24a>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = true; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;        
     b50:	a0 92 03 01 	sts	0x0103, r10
     b54:	41 c0       	rjmp	.+130    	; 0xbd8 <gc_execute_line+0x24a>
        case 90: gc.absolute_mode = true; break;
     b56:	d0 92 06 01 	sts	0x0106, r13
     b5a:	3e c0       	rjmp	.+124    	; 0xbd8 <gc_execute_line+0x24a>
        case 91: gc.absolute_mode = false; break;
     b5c:	10 92 06 01 	sts	0x0106, r1
     b60:	3b c0       	rjmp	.+118    	; 0xbd8 <gc_execute_line+0x24a>
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	6c a7       	std	Y+44, r22	; 0x2c
     b66:	38 c0       	rjmp	.+112    	; 0xbd8 <gc_execute_line+0x24a>
        case 92: next_action = NEXT_ACTION_SET_COORDINATE_OFFSET; break;        
        case 93: gc.inverse_feed_rate_mode = true; break;
     b68:	d0 92 04 01 	sts	0x0104, r13
     b6c:	35 c0       	rjmp	.+106    	; 0xbd8 <gc_execute_line+0x24a>
        case 94: gc.inverse_feed_rate_mode = false; break;
     b6e:	10 92 04 01 	sts	0x0104, r1
     b72:	32 c0       	rjmp	.+100    	; 0xbd8 <gc_execute_line+0x24a>
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     b74:	63 30       	cpi	r22, 0x03	; 3
     b76:	71 05       	cpc	r23, r1
     b78:	e1 f0       	breq	.+56     	; 0xbb2 <gc_execute_line+0x224>
     b7a:	64 30       	cpi	r22, 0x04	; 4
     b7c:	71 05       	cpc	r23, r1
     b7e:	34 f4       	brge	.+12     	; 0xb8c <gc_execute_line+0x1fe>
     b80:	77 fd       	sbrc	r23, 7
     b82:	21 c0       	rjmp	.+66     	; 0xbc6 <gc_execute_line+0x238>
     b84:	62 30       	cpi	r22, 0x02	; 2
     b86:	71 05       	cpc	r23, r1
     b88:	74 f0       	brlt	.+28     	; 0xba6 <gc_execute_line+0x218>
     b8a:	10 c0       	rjmp	.+32     	; 0xbac <gc_execute_line+0x21e>
     b8c:	65 30       	cpi	r22, 0x05	; 5
     b8e:	71 05       	cpc	r23, r1
     b90:	b9 f0       	breq	.+46     	; 0xbc0 <gc_execute_line+0x232>
     b92:	65 30       	cpi	r22, 0x05	; 5
     b94:	71 05       	cpc	r23, r1
     b96:	84 f0       	brlt	.+32     	; 0xbb8 <gc_execute_line+0x22a>
     b98:	6e 31       	cpi	r22, 0x1E	; 30
     b9a:	71 05       	cpc	r23, r1
     b9c:	39 f0       	breq	.+14     	; 0xbac <gc_execute_line+0x21e>
     b9e:	6c 33       	cpi	r22, 0x3C	; 60
     ba0:	71 05       	cpc	r23, r1
     ba2:	89 f4       	brne	.+34     	; 0xbc6 <gc_execute_line+0x238>
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <gc_execute_line+0x21e>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     ba6:	d0 92 07 01 	sts	0x0107, r13
     baa:	16 c0       	rjmp	.+44     	; 0xbd8 <gc_execute_line+0x24a>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     bac:	c0 92 07 01 	sts	0x0107, r12
     bb0:	13 c0       	rjmp	.+38     	; 0xbd8 <gc_execute_line+0x24a>
        case 3: gc.spindle_direction = 1; break;
     bb2:	d0 92 08 01 	sts	0x0108, r13
     bb6:	10 c0       	rjmp	.+32     	; 0xbd8 <gc_execute_line+0x24a>
        case 4: gc.spindle_direction = -1; break;
     bb8:	7f ef       	ldi	r23, 0xFF	; 255
     bba:	70 93 08 01 	sts	0x0108, r23
     bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <gc_execute_line+0x24a>
        case 5: gc.spindle_direction = 0; break;
     bc0:	10 92 08 01 	sts	0x0108, r1
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <gc_execute_line+0x24a>
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
     bc6:	b0 92 02 01 	sts	0x0102, r11
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <gc_execute_line+0x24a>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     bcc:	c8 01       	movw	r24, r16
     bce:	b7 01       	movw	r22, r14
     bd0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
     bd4:	60 93 1d 01 	sts	0x011D, r22
    }
    if(gc.status_code) { break; }
     bd8:	80 91 02 01 	lds	r24, 0x0102
     bdc:	88 23       	and	r24, r24
     bde:	c9 f0       	breq	.+50     	; 0xc12 <gc_execute_line+0x284>
     be0:	21 c0       	rjmp	.+66     	; 0xc24 <gc_execute_line+0x296>
     be2:	1d a6       	std	Y+45, r1	; 0x2d
     be4:	1c a6       	std	Y+44, r1	; 0x2c
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     be6:	12 e0       	ldi	r17, 0x02	; 2
     be8:	61 2e       	mov	r6, r17
     bea:	71 2c       	mov	r7, r1
     bec:	6c 0e       	add	r6, r28
     bee:	7d 1e       	adc	r7, r29
     bf0:	b3 e0       	ldi	r27, 0x03	; 3
     bf2:	2b 2e       	mov	r2, r27
     bf4:	31 2c       	mov	r3, r1
     bf6:	2c 0e       	add	r2, r28
     bf8:	3d 1e       	adc	r3, r29
     bfa:	4e 01       	movw	r8, r28
     bfc:	08 94       	sec
     bfe:	81 1c       	adc	r8, r1
     c00:	91 1c       	adc	r9, r1
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     c02:	dd 24       	eor	r13, r13
     c04:	d3 94       	inc	r13
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
     c06:	a3 e0       	ldi	r26, 0x03	; 3
     c08:	ba 2e       	mov	r11, r26
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     c0a:	f2 e0       	ldi	r31, 0x02	; 2
     c0c:	cf 2e       	mov	r12, r31
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = true; break;
        case 21: gc.inches_mode = false; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = true; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;        
     c0e:	e4 e0       	ldi	r30, 0x04	; 4
     c10:	ae 2e       	mov	r10, r30
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     c12:	c3 01       	movw	r24, r6
     c14:	b1 01       	movw	r22, r2
     c16:	a2 01       	movw	r20, r4
     c18:	94 01       	movw	r18, r8
     c1a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <next_statement>
     c1e:	89 2b       	or	r24, r25
     c20:	09 f0       	breq	.+2      	; 0xc24 <gc_execute_line+0x296>
     c22:	ee ce       	rjmp	.-548    	; 0xa00 <gc_execute_line+0x72>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     c24:	80 91 02 01 	lds	r24, 0x0102
     c28:	88 23       	and	r24, r24
     c2a:	09 f0       	breq	.+2      	; 0xc2e <gc_execute_line+0x2a0>
     c2c:	c8 c3       	rjmp	.+1936   	; 0x13be <gc_execute_line+0xa30>

  char_counter = 0;
     c2e:	19 82       	std	Y+1, r1	; 0x01
  clear_vector(offset);
     c30:	8c e0       	ldi	r24, 0x0C	; 12
     c32:	fe 01       	movw	r30, r28
     c34:	73 96       	adiw	r30, 0x13	; 19
     c36:	df 01       	movw	r26, r30
     c38:	1d 92       	st	X+, r1
     c3a:	8a 95       	dec	r24
     c3c:	e9 f7       	brne	.-6      	; 0xc38 <gc_execute_line+0x2aa>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     c3e:	de 01       	movw	r26, r28
     c40:	17 96       	adiw	r26, 0x07	; 7
     c42:	e1 e1       	ldi	r30, 0x11	; 17
     c44:	f1 e0       	ldi	r31, 0x01	; 1
     c46:	8c e0       	ldi	r24, 0x0C	; 12
     c48:	01 90       	ld	r0, Z+
     c4a:	0d 92       	st	X+, r0
     c4c:	81 50       	subi	r24, 0x01	; 1
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <gc_execute_line+0x2ba>
     c50:	1f aa       	std	Y+55, r1	; 0x37
     c52:	18 ae       	std	Y+56, r1	; 0x38
     c54:	b0 e8       	ldi	r27, 0x80	; 128
     c56:	b9 af       	std	Y+57, r27	; 0x39
     c58:	ef eb       	ldi	r30, 0xBF	; 191
     c5a:	ea af       	std	Y+58, r30	; 0x3a
     c5c:	22 24       	eor	r2, r2
     c5e:	33 24       	eor	r3, r3
     c60:	0f 2e       	mov	r0, r31
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	6f 2e       	mov	r6, r31
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	7f 2e       	mov	r7, r31
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	8f 2e       	mov	r8, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	9f 2e       	mov	r9, r31
     c72:	f0 2d       	mov	r31, r0
     c74:	68 a6       	std	Y+40, r6	; 0x28
     c76:	79 a6       	std	Y+41, r7	; 0x29
     c78:	8a a6       	std	Y+42, r8	; 0x2a
     c7a:	9b a6       	std	Y+43, r9	; 0x2b

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     c7c:	5e 01       	movw	r10, r28
     c7e:	08 94       	sec
     c80:	a1 1c       	adc	r10, r1
     c82:	b1 1c       	adc	r11, r1
     c84:	b4 c0       	rjmp	.+360    	; 0xdee <gc_execute_line+0x460>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     c86:	cb 80       	ldd	r12, Y+3	; 0x03
     c88:	dc 80       	ldd	r13, Y+4	; 0x04
     c8a:	ed 80       	ldd	r14, Y+5	; 0x05
     c8c:	fe 80       	ldd	r15, Y+6	; 0x06
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = true;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     c8e:	80 91 05 01 	lds	r24, 0x0105
     c92:	88 23       	and	r24, r24
     c94:	19 f4       	brne	.+6      	; 0xc9c <gc_execute_line+0x30e>
     c96:	a7 01       	movw	r20, r14
     c98:	96 01       	movw	r18, r12
     c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <gc_execute_line+0x322>
     c9c:	c7 01       	movw	r24, r14
     c9e:	b6 01       	movw	r22, r12
     ca0:	23 e3       	ldi	r18, 0x33	; 51
     ca2:	33 e3       	ldi	r19, 0x33	; 51
     ca4:	4b ec       	ldi	r20, 0xCB	; 203
     ca6:	51 e4       	ldi	r21, 0x41	; 65
     ca8:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     cb0:	0a 81       	ldd	r16, Y+2	; 0x02
     cb2:	00 35       	cpi	r16, 0x50	; 80
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <gc_execute_line+0x32a>
     cb6:	62 c0       	rjmp	.+196    	; 0xd7c <gc_execute_line+0x3ee>
     cb8:	01 35       	cpi	r16, 0x51	; 81
     cba:	58 f4       	brcc	.+22     	; 0xcd2 <gc_execute_line+0x344>
     cbc:	06 34       	cpi	r16, 0x46	; 70
     cbe:	01 f1       	breq	.+64     	; 0xd00 <gc_execute_line+0x372>
     cc0:	06 34       	cpi	r16, 0x46	; 70
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <gc_execute_line+0x338>
     cc4:	94 c0       	rjmp	.+296    	; 0xdee <gc_execute_line+0x460>
     cc6:	80 2f       	mov	r24, r16
     cc8:	89 54       	subi	r24, 0x49	; 73
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <gc_execute_line+0x342>
     cce:	8f c0       	rjmp	.+286    	; 0xdee <gc_execute_line+0x460>
     cd0:	46 c0       	rjmp	.+140    	; 0xd5e <gc_execute_line+0x3d0>
     cd2:	03 35       	cpi	r16, 0x53	; 83
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <gc_execute_line+0x34a>
     cd6:	55 c0       	rjmp	.+170    	; 0xd82 <gc_execute_line+0x3f4>
     cd8:	04 35       	cpi	r16, 0x54	; 84
     cda:	20 f4       	brcc	.+8      	; 0xce4 <gc_execute_line+0x356>
     cdc:	02 35       	cpi	r16, 0x52	; 82
     cde:	09 f0       	breq	.+2      	; 0xce2 <gc_execute_line+0x354>
     ce0:	86 c0       	rjmp	.+268    	; 0xdee <gc_execute_line+0x460>
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <gc_execute_line+0x362>
     ce4:	80 2f       	mov	r24, r16
     ce6:	88 55       	subi	r24, 0x58	; 88
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	08 f0       	brcs	.+2      	; 0xcee <gc_execute_line+0x360>
     cec:	80 c0       	rjmp	.+256    	; 0xdee <gc_execute_line+0x460>
     cee:	52 c0       	rjmp	.+164    	; 0xd94 <gc_execute_line+0x406>
     cf0:	28 a7       	std	Y+40, r18	; 0x28
     cf2:	39 a7       	std	Y+41, r19	; 0x29
     cf4:	4a a7       	std	Y+42, r20	; 0x2a
     cf6:	5b a7       	std	Y+43, r21	; 0x2b
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	27 2e       	mov	r2, r23
     cfc:	31 2c       	mov	r3, r1
     cfe:	77 c0       	rjmp	.+238    	; 0xdee <gc_execute_line+0x460>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     d00:	80 91 04 01 	lds	r24, 0x0104
     d04:	88 23       	and	r24, r24
     d06:	29 f0       	breq	.+10     	; 0xd12 <gc_execute_line+0x384>
     d08:	2f ab       	std	Y+55, r18	; 0x37
     d0a:	38 af       	std	Y+56, r19	; 0x38
     d0c:	49 af       	std	Y+57, r20	; 0x39
     d0e:	5a af       	std	Y+58, r21	; 0x3a
     d10:	6e c0       	rjmp	.+220    	; 0xdee <gc_execute_line+0x460>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     d12:	80 91 03 01 	lds	r24, 0x0103
     d16:	88 23       	and	r24, r24
     d18:	89 f4       	brne	.+34     	; 0xd3c <gc_execute_line+0x3ae>
          gc.seek_rate = unit_converted_value/60;
     d1a:	ca 01       	movw	r24, r20
     d1c:	b9 01       	movw	r22, r18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e7       	ldi	r20, 0x70	; 112
     d24:	52 e4       	ldi	r21, 0x42	; 66
     d26:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
     d2a:	60 93 0d 01 	sts	0x010D, r22
     d2e:	70 93 0e 01 	sts	0x010E, r23
     d32:	80 93 0f 01 	sts	0x010F, r24
     d36:	90 93 10 01 	sts	0x0110, r25
     d3a:	59 c0       	rjmp	.+178    	; 0xdee <gc_execute_line+0x460>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     d3c:	ca 01       	movw	r24, r20
     d3e:	b9 01       	movw	r22, r18
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e7       	ldi	r20, 0x70	; 112
     d46:	52 e4       	ldi	r21, 0x42	; 66
     d48:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
     d4c:	60 93 09 01 	sts	0x0109, r22
     d50:	70 93 0a 01 	sts	0x010A, r23
     d54:	80 93 0b 01 	sts	0x010B, r24
     d58:	90 93 0c 01 	sts	0x010C, r25
     d5c:	48 c0       	rjmp	.+144    	; 0xdee <gc_execute_line+0x460>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     d5e:	e0 2f       	mov	r30, r16
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	e9 54       	subi	r30, 0x49	; 73
     d64:	f0 40       	sbci	r31, 0x00	; 0
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	ea 0d       	add	r30, r10
     d70:	fb 1d       	adc	r31, r11
     d72:	22 8b       	std	Z+18, r18	; 0x12
     d74:	33 8b       	std	Z+19, r19	; 0x13
     d76:	44 8b       	std	Z+20, r20	; 0x14
     d78:	55 8b       	std	Z+21, r21	; 0x15
     d7a:	39 c0       	rjmp	.+114    	; 0xdee <gc_execute_line+0x460>
     d7c:	36 01       	movw	r6, r12
     d7e:	47 01       	movw	r8, r14
     d80:	36 c0       	rjmp	.+108    	; 0xdee <gc_execute_line+0x460>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = true; break;
      case 'S': gc.spindle_speed = value; break;
     d82:	c7 01       	movw	r24, r14
     d84:	b6 01       	movw	r22, r12
     d86:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
     d8a:	70 93 1f 01 	sts	0x011F, r23
     d8e:	60 93 1e 01 	sts	0x011E, r22
     d92:	2d c0       	rjmp	.+90     	; 0xdee <gc_execute_line+0x460>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     d94:	80 91 06 01 	lds	r24, 0x0106
     d98:	88 23       	and	r24, r24
     d9a:	19 f4       	brne	.+6      	; 0xda2 <gc_execute_line+0x414>
     d9c:	fd a5       	ldd	r31, Y+45	; 0x2d
     d9e:	ff 23       	and	r31, r31
     da0:	79 f0       	breq	.+30     	; 0xdc0 <gc_execute_line+0x432>
        target[letter - 'X'] = unit_converted_value;
     da2:	e0 2f       	mov	r30, r16
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e8 55       	subi	r30, 0x58	; 88
     da8:	f0 40       	sbci	r31, 0x00	; 0
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ea 0d       	add	r30, r10
     db4:	fb 1d       	adc	r31, r11
     db6:	26 83       	std	Z+6, r18	; 0x06
     db8:	37 83       	std	Z+7, r19	; 0x07
     dba:	40 87       	std	Z+8, r20	; 0x08
     dbc:	51 87       	std	Z+9, r21	; 0x09
     dbe:	17 c0       	rjmp	.+46     	; 0xdee <gc_execute_line+0x460>
      } else {
        target[letter - 'X'] += unit_converted_value;
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	08 55       	subi	r16, 0x58	; 88
     dc4:	10 40       	sbci	r17, 0x00	; 0
     dc6:	00 0f       	add	r16, r16
     dc8:	11 1f       	adc	r17, r17
     dca:	00 0f       	add	r16, r16
     dcc:	11 1f       	adc	r17, r17
     dce:	0a 0d       	add	r16, r10
     dd0:	1b 1d       	adc	r17, r11
     dd2:	d8 01       	movw	r26, r16
     dd4:	16 96       	adiw	r26, 0x06	; 6
     dd6:	6d 91       	ld	r22, X+
     dd8:	7d 91       	ld	r23, X+
     dda:	8d 91       	ld	r24, X+
     ddc:	9c 91       	ld	r25, X
     dde:	19 97       	sbiw	r26, 0x09	; 9
     de0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
     de4:	f8 01       	movw	r30, r16
     de6:	66 83       	std	Z+6, r22	; 0x06
     de8:	77 83       	std	Z+7, r23	; 0x07
     dea:	80 87       	std	Z+8, r24	; 0x08
     dec:	91 87       	std	Z+9, r25	; 0x09
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     dee:	ce 01       	movw	r24, r28
     df0:	02 96       	adiw	r24, 0x02	; 2
     df2:	be 01       	movw	r22, r28
     df4:	6d 5f       	subi	r22, 0xFD	; 253
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	a2 01       	movw	r20, r4
     dfa:	95 01       	movw	r18, r10
     dfc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <next_statement>
     e00:	89 2b       	or	r24, r25
     e02:	09 f0       	breq	.+2      	; 0xe06 <gc_execute_line+0x478>
     e04:	40 cf       	rjmp	.-384    	; 0xc86 <gc_execute_line+0x2f8>
      break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     e06:	80 91 02 01 	lds	r24, 0x0102
     e0a:	88 23       	and	r24, r24
     e0c:	09 f0       	breq	.+2      	; 0xe10 <gc_execute_line+0x482>
     e0e:	d7 c2       	rjmp	.+1454   	; 0x13be <gc_execute_line+0xa30>
    
  // Update spindle state
  spindle_run(gc.spindle_direction, gc.spindle_speed);
     e10:	80 91 08 01 	lds	r24, 0x0108
     e14:	40 91 1e 01 	lds	r20, 0x011E
     e18:	50 91 1f 01 	lds	r21, 0x011F
     e1c:	66 27       	eor	r22, r22
     e1e:	57 fd       	sbrc	r21, 7
     e20:	60 95       	com	r22
     e22:	76 2f       	mov	r23, r22
     e24:	99 27       	eor	r25, r25
     e26:	87 fd       	sbrc	r24, 7
     e28:	90 95       	com	r25
     e2a:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <spindle_run>
  
  // Perform any physical actions
  switch (next_action) {
     e2e:	fc a5       	ldd	r31, Y+44	; 0x2c
     e30:	f1 30       	cpi	r31, 0x01	; 1
     e32:	91 f0       	breq	.+36     	; 0xe58 <gc_execute_line+0x4ca>
     e34:	f1 30       	cpi	r31, 0x01	; 1
     e36:	60 f1       	brcs	.+88     	; 0xe90 <gc_execute_line+0x502>
     e38:	f2 30       	cpi	r31, 0x02	; 2
     e3a:	21 f0       	breq	.+8      	; 0xe44 <gc_execute_line+0x4b6>
     e3c:	f3 30       	cpi	r31, 0x03	; 3
     e3e:	09 f0       	breq	.+2      	; 0xe42 <gc_execute_line+0x4b4>
     e40:	b3 c2       	rjmp	.+1382   	; 0x13a8 <gc_execute_line+0xa1a>
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <gc_execute_line+0x4e4>
    case NEXT_ACTION_GO_HOME: mc_go_home(); clear_vector(gc.position); break;
     e44:	0e 94 b0 0b 	call	0x1760	; 0x1760 <mc_go_home>
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	e1 e1       	ldi	r30, 0x11	; 17
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	df 01       	movw	r26, r30
     e50:	1d 92       	st	X+, r1
     e52:	8a 95       	dec	r24
     e54:	e9 f7       	brne	.-6      	; 0xe50 <gc_execute_line+0x4c2>
     e56:	a8 c2       	rjmp	.+1360   	; 0x13a8 <gc_execute_line+0xa1a>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;   
     e58:	c4 01       	movw	r24, r8
     e5a:	b3 01       	movw	r22, r6
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4a e7       	ldi	r20, 0x7A	; 122
     e62:	54 e4       	ldi	r21, 0x44	; 68
     e64:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     e68:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
     e6c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <mc_dwell>
     e70:	9b c2       	rjmp	.+1334   	; 0x13a8 <gc_execute_line+0xa1a>
    case NEXT_ACTION_SET_COORDINATE_OFFSET: 
    mc_set_current_position(target[X_AXIS], target[Y_AXIS], target[Z_AXIS]);
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	2b 85       	ldd	r18, Y+11	; 0x0b
     e7c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e7e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e80:	5e 85       	ldd	r21, Y+14	; 0x0e
     e82:	ef 84       	ldd	r14, Y+15	; 0x0f
     e84:	f8 88       	ldd	r15, Y+16	; 0x10
     e86:	09 89       	ldd	r16, Y+17	; 0x11
     e88:	1a 89       	ldd	r17, Y+18	; 0x12
     e8a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <plan_set_current_position>
     e8e:	8c c2       	rjmp	.+1304   	; 0x13a8 <gc_execute_line+0xa1a>
    break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     e90:	b0 91 03 01 	lds	r27, 0x0103
     e94:	ba ab       	std	Y+50, r27	; 0x32
     e96:	b1 30       	cpi	r27, 0x01	; 1
     e98:	e9 f0       	breq	.+58     	; 0xed4 <gc_execute_line+0x546>
     e9a:	b1 30       	cpi	r27, 0x01	; 1
     e9c:	20 f0       	brcs	.+8      	; 0xea6 <gc_execute_line+0x518>
     e9e:	b4 30       	cpi	r27, 0x04	; 4
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <gc_execute_line+0x516>
     ea2:	82 c2       	rjmp	.+1284   	; 0x13a8 <gc_execute_line+0xa1a>
     ea4:	35 c0       	rjmp	.+106    	; 0xf10 <gc_execute_line+0x582>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], gc.seek_rate, false);
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	2b 85       	ldd	r18, Y+11	; 0x0b
     eb0:	3c 85       	ldd	r19, Y+12	; 0x0c
     eb2:	4d 85       	ldd	r20, Y+13	; 0x0d
     eb4:	5e 85       	ldd	r21, Y+14	; 0x0e
     eb6:	ef 84       	ldd	r14, Y+15	; 0x0f
     eb8:	f8 88       	ldd	r15, Y+16	; 0x10
     eba:	09 89       	ldd	r16, Y+17	; 0x11
     ebc:	1a 89       	ldd	r17, Y+18	; 0x12
     ebe:	a0 90 0d 01 	lds	r10, 0x010D
     ec2:	b0 90 0e 01 	lds	r11, 0x010E
     ec6:	c0 90 0f 01 	lds	r12, 0x010F
     eca:	d0 90 10 01 	lds	r13, 0x0110
     ece:	88 24       	eor	r8, r8
     ed0:	99 24       	eor	r9, r9
     ed2:	68 c2       	rjmp	.+1232   	; 0x13a4 <gc_execute_line+0xa16>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	2b 85       	ldd	r18, Y+11	; 0x0b
     ede:	3c 85       	ldd	r19, Y+12	; 0x0c
     ee0:	4d 85       	ldd	r20, Y+13	; 0x0d
     ee2:	5e 85       	ldd	r21, Y+14	; 0x0e
     ee4:	ef 84       	ldd	r14, Y+15	; 0x0f
     ee6:	f8 88       	ldd	r15, Y+16	; 0x10
     ee8:	09 89       	ldd	r16, Y+17	; 0x11
     eea:	1a 89       	ldd	r17, Y+18	; 0x12
     eec:	80 90 04 01 	lds	r8, 0x0104
     ef0:	88 20       	and	r8, r8
     ef2:	09 f0       	breq	.+2      	; 0xef6 <gc_execute_line+0x568>
     ef4:	50 c2       	rjmp	.+1184   	; 0x1396 <gc_execute_line+0xa08>
     ef6:	e0 91 09 01 	lds	r30, 0x0109
     efa:	ef ab       	std	Y+55, r30	; 0x37
     efc:	f0 91 0a 01 	lds	r31, 0x010A
     f00:	f8 af       	std	Y+56, r31	; 0x38
     f02:	a0 91 0b 01 	lds	r26, 0x010B
     f06:	a9 af       	std	Y+57, r26	; 0x39
     f08:	b0 91 0c 01 	lds	r27, 0x010C
     f0c:	ba af       	std	Y+58, r27	; 0x3a
     f0e:	43 c2       	rjmp	.+1158   	; 0x1396 <gc_execute_line+0xa08>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
#ifdef __AVR_ATmega328P__
      case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC:
      if (radius_mode) {
     f10:	23 28       	or	r2, r3
     f12:	09 f4       	brne	.+2      	; 0xf16 <gc_execute_line+0x588>
     f14:	e4 c0       	rjmp	.+456    	; 0x10de <gc_execute_line+0x750>
          j = (y + (x * h_x2_div_d))/2
          
        */
        
        // Calculate the change in position along each selected axis
        double x = target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
     f16:	e0 91 20 01 	lds	r30, 0x0120
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	d5 01       	movw	r26, r10
     f26:	ae 0f       	add	r26, r30
     f28:	bf 1f       	adc	r27, r31
     f2a:	ee 5f       	subi	r30, 0xFE	; 254
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	6d 91       	ld	r22, X+
     f32:	7d 91       	ld	r23, X+
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	19 97       	sbiw	r26, 0x09	; 9
     f3a:	27 85       	ldd	r18, Z+15	; 0x0f
     f3c:	30 89       	ldd	r19, Z+16	; 0x10
     f3e:	41 89       	ldd	r20, Z+17	; 0x11
     f40:	52 89       	ldd	r21, Z+18	; 0x12
     f42:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
     f46:	1b 01       	movw	r2, r22
     f48:	2c 01       	movw	r4, r24
        double y = target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
     f4a:	e0 91 21 01 	lds	r30, 0x0121
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ae 0e       	add	r10, r30
     f5a:	bf 1e       	adc	r11, r31
     f5c:	ee 5f       	subi	r30, 0xFE	; 254
     f5e:	fe 4f       	sbci	r31, 0xFE	; 254
     f60:	d5 01       	movw	r26, r10
     f62:	16 96       	adiw	r26, 0x06	; 6
     f64:	6d 91       	ld	r22, X+
     f66:	7d 91       	ld	r23, X+
     f68:	8d 91       	ld	r24, X+
     f6a:	9c 91       	ld	r25, X
     f6c:	19 97       	sbiw	r26, 0x09	; 9
     f6e:	27 85       	ldd	r18, Z+15	; 0x0f
     f70:	30 89       	ldd	r19, Z+16	; 0x10
     f72:	41 89       	ldd	r20, Z+17	; 0x11
     f74:	52 89       	ldd	r21, Z+18	; 0x12
     f76:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
     f7a:	3b 01       	movw	r6, r22
     f7c:	4c 01       	movw	r8, r24
        
        clear_vector(offset);
     f7e:	8c e0       	ldi	r24, 0x0C	; 12
     f80:	fe 01       	movw	r30, r28
     f82:	73 96       	adiw	r30, 0x13	; 19
     f84:	df 01       	movw	r26, r30
     f86:	1d 92       	st	X+, r1
     f88:	8a 95       	dec	r24
     f8a:	e9 f7       	brne	.-6      	; 0xf86 <gc_execute_line+0x5f8>
        double h_x2_div_d = -sqrt(4 * r*r - x*x - y*y)/hypot(x,y); // == -(h * 2 / d)
     f8c:	68 a5       	ldd	r22, Y+40	; 0x28
     f8e:	79 a5       	ldd	r23, Y+41	; 0x29
     f90:	8a a5       	ldd	r24, Y+42	; 0x2a
     f92:	9b a5       	ldd	r25, Y+43	; 0x2b
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	50 e4       	ldi	r21, 0x40	; 64
     f9c:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     fa0:	28 a5       	ldd	r18, Y+40	; 0x28
     fa2:	39 a5       	ldd	r19, Y+41	; 0x29
     fa4:	4a a5       	ldd	r20, Y+42	; 0x2a
     fa6:	5b a5       	ldd	r21, Y+43	; 0x2b
     fa8:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     fac:	7b 01       	movw	r14, r22
     fae:	8c 01       	movw	r16, r24
     fb0:	c2 01       	movw	r24, r4
     fb2:	b1 01       	movw	r22, r2
     fb4:	a2 01       	movw	r20, r4
     fb6:	91 01       	movw	r18, r2
     fb8:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     fbc:	9b 01       	movw	r18, r22
     fbe:	ac 01       	movw	r20, r24
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
     fc8:	7b 01       	movw	r14, r22
     fca:	8c 01       	movw	r16, r24
     fcc:	c4 01       	movw	r24, r8
     fce:	b3 01       	movw	r22, r6
     fd0:	a4 01       	movw	r20, r8
     fd2:	93 01       	movw	r18, r6
     fd4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	c8 01       	movw	r24, r16
     fde:	b7 01       	movw	r22, r14
     fe0:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
     fe4:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <sqrt>
     fe8:	7b 01       	movw	r14, r22
     fea:	8c 01       	movw	r16, r24
     fec:	c2 01       	movw	r24, r4
     fee:	b1 01       	movw	r22, r2
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <hypot>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	17 fb       	bst	r17, 7
     ffe:	10 95       	com	r17
    1000:	17 f9       	bld	r17, 7
    1002:	10 95       	com	r17
    1004:	c8 01       	movw	r24, r16
    1006:	b7 01       	movw	r22, r14
    1008:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    100c:	6b 01       	movw	r12, r22
    100e:	7c 01       	movw	r14, r24
        // If r is smaller than d, the arc is now traversing the complex plane beyond the reach of any
        // real CNC, and thus - for practical reasons - we will terminate promptly:
        if(isnan(h_x2_div_d)) { FAIL(STATUS_FLOATING_POINT_ERROR); return(gc.status_code); }
    1010:	a7 01       	movw	r20, r14
    1012:	96 01       	movw	r18, r12
    1014:	0e 94 2a 21 	call	0x4254	; 0x4254 <__unordsf2>
    1018:	88 23       	and	r24, r24
    101a:	21 f0       	breq	.+8      	; 0x1024 <gc_execute_line+0x696>
    101c:	84 e0       	ldi	r24, 0x04	; 4
    101e:	80 93 02 01 	sts	0x0102, r24
    1022:	cd c1       	rjmp	.+922    	; 0x13be <gc_execute_line+0xa30>
        // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
        if (gc.motion_mode == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
    1024:	ba a9       	ldd	r27, Y+50	; 0x32
    1026:	b3 30       	cpi	r27, 0x03	; 3
    1028:	21 f4       	brne	.+8      	; 0x1032 <gc_execute_line+0x6a4>
    102a:	f7 fa       	bst	r15, 7
    102c:	f0 94       	com	r15
    102e:	f7 f8       	bld	r15, 7
    1030:	f0 94       	com	r15

        // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go figure!), 
        // even though it is advised against ever generating such circles in a single line of g-code. By 
        // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side of the line of
        // travel and thus we get the unadvisably long arcs as prescribed.
        if (r < 0) { h_x2_div_d = -h_x2_div_d; }        
    1032:	68 a5       	ldd	r22, Y+40	; 0x28
    1034:	79 a5       	ldd	r23, Y+41	; 0x29
    1036:	8a a5       	ldd	r24, Y+42	; 0x2a
    1038:	9b a5       	ldd	r25, Y+43	; 0x2b
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1046:	88 23       	and	r24, r24
    1048:	24 f4       	brge	.+8      	; 0x1052 <gc_execute_line+0x6c4>
    104a:	f7 fa       	bst	r15, 7
    104c:	f0 94       	com	r15
    104e:	f7 f8       	bld	r15, 7
    1050:	f0 94       	com	r15
        // Complete the operation by calculating the actual center of the arc
        offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    1052:	00 91 20 01 	lds	r16, 0x0120
    1056:	a0 2e       	mov	r10, r16
    1058:	bb 24       	eor	r11, r11
    105a:	aa 0c       	add	r10, r10
    105c:	bb 1c       	adc	r11, r11
    105e:	aa 0c       	add	r10, r10
    1060:	bb 1c       	adc	r11, r11
    1062:	8e 01       	movw	r16, r28
    1064:	0f 5f       	subi	r16, 0xFF	; 255
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	a0 0e       	add	r10, r16
    106a:	b1 1e       	adc	r11, r17
    106c:	c4 01       	movw	r24, r8
    106e:	b3 01       	movw	r22, r6
    1070:	a7 01       	movw	r20, r14
    1072:	96 01       	movw	r18, r12
    1074:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c2 01       	movw	r24, r4
    107e:	b1 01       	movw	r22, r2
    1080:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1090:	f5 01       	movw	r30, r10
    1092:	62 8b       	std	Z+18, r22	; 0x12
    1094:	73 8b       	std	Z+19, r23	; 0x13
    1096:	84 8b       	std	Z+20, r24	; 0x14
    1098:	95 8b       	std	Z+21, r25	; 0x15
        offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    109a:	80 91 21 01 	lds	r24, 0x0121
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	08 0f       	add	r16, r24
    10aa:	19 1f       	adc	r17, r25
    10ac:	c2 01       	movw	r24, r4
    10ae:	b1 01       	movw	r22, r2
    10b0:	a7 01       	movw	r20, r14
    10b2:	96 01       	movw	r18, r12
    10b4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	c4 01       	movw	r24, r8
    10be:	b3 01       	movw	r22, r6
    10c0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    10d0:	d8 01       	movw	r26, r16
    10d2:	52 96       	adiw	r26, 0x12	; 18
    10d4:	6d 93       	st	X+, r22
    10d6:	7d 93       	st	X+, r23
    10d8:	8d 93       	st	X+, r24
    10da:	9c 93       	st	X, r25
    10dc:	55 97       	sbiw	r26, 0x15	; 21
                        C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))

      */
            
      // calculate the theta (angle) of the current point
      double theta_start = theta(-offset[gc.plane_axis_0], -offset[gc.plane_axis_1]);
    10de:	e0 91 20 01 	lds	r30, 0x0120
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	8e 01       	movw	r16, r28
    10ee:	0f 5f       	subi	r16, 0xFF	; 255
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	e0 0f       	add	r30, r16
    10f4:	f1 1f       	adc	r31, r17
    10f6:	62 89       	ldd	r22, Z+18	; 0x12
    10f8:	73 89       	ldd	r23, Z+19	; 0x13
    10fa:	84 89       	ldd	r24, Z+20	; 0x14
    10fc:	95 89       	ldd	r25, Z+21	; 0x15
    10fe:	90 58       	subi	r25, 0x80	; 128
    1100:	e0 91 21 01 	lds	r30, 0x0121
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	e0 0f       	add	r30, r16
    1110:	f1 1f       	adc	r31, r17
    1112:	22 89       	ldd	r18, Z+18	; 0x12
    1114:	33 89       	ldd	r19, Z+19	; 0x13
    1116:	44 89       	ldd	r20, Z+20	; 0x14
    1118:	55 89       	ldd	r21, Z+21	; 0x15
    111a:	50 58       	subi	r21, 0x80	; 128
    111c:	0e 94 88 04 	call	0x910	; 0x910 <theta>
    1120:	6c a3       	std	Y+36, r22	; 0x24
    1122:	7d a3       	std	Y+37, r23	; 0x25
    1124:	8e a3       	std	Y+38, r24	; 0x26
    1126:	9f a3       	std	Y+39, r25	; 0x27
      // calculate the theta (angle) of the target point
      double theta_end = theta(target[gc.plane_axis_0] - offset[gc.plane_axis_0] - gc.position[gc.plane_axis_0], 
         target[gc.plane_axis_1] - offset[gc.plane_axis_1] - gc.position[gc.plane_axis_1]);
    1128:	80 91 20 01 	lds	r24, 0x0120
    112c:	e8 2e       	mov	r14, r24
    112e:	ff 24       	eor	r15, r15
    1130:	80 91 21 01 	lds	r24, 0x0121
    1134:	a8 2e       	mov	r10, r24
    1136:	bb 24       	eor	r11, r11
    1138:	ee 0c       	add	r14, r14
    113a:	ff 1c       	adc	r15, r15
    113c:	ee 0c       	add	r14, r14
    113e:	ff 1c       	adc	r15, r15
    1140:	f8 01       	movw	r30, r16
    1142:	ee 0d       	add	r30, r14
    1144:	ff 1d       	adc	r31, r15
    1146:	66 81       	ldd	r22, Z+6	; 0x06
    1148:	77 81       	ldd	r23, Z+7	; 0x07
    114a:	80 85       	ldd	r24, Z+8	; 0x08
    114c:	91 85       	ldd	r25, Z+9	; 0x09
    114e:	22 89       	ldd	r18, Z+18	; 0x12
    1150:	33 89       	ldd	r19, Z+19	; 0x13
    1152:	44 89       	ldd	r20, Z+20	; 0x14
    1154:	55 89       	ldd	r21, Z+21	; 0x15
    1156:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    115a:	e2 e0       	ldi	r30, 0x02	; 2
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	ee 0e       	add	r14, r30
    1160:	ff 1e       	adc	r15, r31
    1162:	d7 01       	movw	r26, r14
    1164:	1f 96       	adiw	r26, 0x0f	; 15
    1166:	2d 91       	ld	r18, X+
    1168:	3d 91       	ld	r19, X+
    116a:	4d 91       	ld	r20, X+
    116c:	5c 91       	ld	r21, X
    116e:	52 97       	sbiw	r26, 0x12	; 18
    1170:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	aa 0c       	add	r10, r10
    117a:	bb 1c       	adc	r11, r11
    117c:	aa 0c       	add	r10, r10
    117e:	bb 1c       	adc	r11, r11
    1180:	0a 0d       	add	r16, r10
    1182:	1b 1d       	adc	r17, r11
    1184:	f8 01       	movw	r30, r16
    1186:	66 81       	ldd	r22, Z+6	; 0x06
    1188:	77 81       	ldd	r23, Z+7	; 0x07
    118a:	80 85       	ldd	r24, Z+8	; 0x08
    118c:	91 85       	ldd	r25, Z+9	; 0x09
    118e:	22 89       	ldd	r18, Z+18	; 0x12
    1190:	33 89       	ldd	r19, Z+19	; 0x13
    1192:	44 89       	ldd	r20, Z+20	; 0x14
    1194:	55 89       	ldd	r21, Z+21	; 0x15
    1196:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	31 e0       	ldi	r19, 0x01	; 1
    119e:	a2 0e       	add	r10, r18
    11a0:	b3 1e       	adc	r11, r19
    11a2:	d5 01       	movw	r26, r10
    11a4:	1f 96       	adiw	r26, 0x0f	; 15
    11a6:	2d 91       	ld	r18, X+
    11a8:	3d 91       	ld	r19, X+
    11aa:	4d 91       	ld	r20, X+
    11ac:	5c 91       	ld	r21, X
    11ae:	52 97       	sbiw	r26, 0x12	; 18
    11b0:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	c7 01       	movw	r24, r14
    11ba:	b6 01       	movw	r22, r12
    11bc:	0e 94 88 04 	call	0x910	; 0x910 <theta>
    11c0:	7b 01       	movw	r14, r22
    11c2:	8c 01       	movw	r16, r24
      // ensure that the difference is positive so that we have clockwise travel
      if (theta_end < theta_start) { theta_end += 2*M_PI; }
    11c4:	2c a1       	ldd	r18, Y+36	; 0x24
    11c6:	3d a1       	ldd	r19, Y+37	; 0x25
    11c8:	4e a1       	ldd	r20, Y+38	; 0x26
    11ca:	5f a1       	ldd	r21, Y+39	; 0x27
    11cc:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	54 f4       	brge	.+20     	; 0x11e8 <gc_execute_line+0x85a>
    11d4:	c8 01       	movw	r24, r16
    11d6:	b7 01       	movw	r22, r14
    11d8:	2b ed       	ldi	r18, 0xDB	; 219
    11da:	3f e0       	ldi	r19, 0x0F	; 15
    11dc:	49 ec       	ldi	r20, 0xC9	; 201
    11de:	50 e4       	ldi	r21, 0x40	; 64
    11e0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    11e4:	7b 01       	movw	r14, r22
    11e6:	8c 01       	movw	r16, r24
      double angular_travel = theta_end-theta_start;
    11e8:	c8 01       	movw	r24, r16
    11ea:	b7 01       	movw	r22, r14
    11ec:	2c a1       	ldd	r18, Y+36	; 0x24
    11ee:	3d a1       	ldd	r19, Y+37	; 0x25
    11f0:	4e a1       	ldd	r20, Y+38	; 0x26
    11f2:	5f a1       	ldd	r21, Y+39	; 0x27
    11f4:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    11f8:	2b 01       	movw	r4, r22
    11fa:	3c 01       	movw	r6, r24
      // Invert angular motion if the g-code wanted a counterclockwise arc
      if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    11fc:	80 91 03 01 	lds	r24, 0x0103
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	51 f4       	brne	.+20     	; 0x1218 <gc_execute_line+0x88a>
        angular_travel = angular_travel-2*M_PI;
    1204:	c3 01       	movw	r24, r6
    1206:	b2 01       	movw	r22, r4
    1208:	2b ed       	ldi	r18, 0xDB	; 219
    120a:	3f e0       	ldi	r19, 0x0F	; 15
    120c:	49 ec       	ldi	r20, 0xC9	; 201
    120e:	50 e4       	ldi	r21, 0x40	; 64
    1210:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    1214:	2b 01       	movw	r4, r22
    1216:	3c 01       	movw	r6, r24
      }
      // Find the radius
      double radius = hypot(offset[gc.plane_axis_0], offset[gc.plane_axis_1]);
    1218:	80 91 20 01 	lds	r24, 0x0120
    121c:	e8 2f       	mov	r30, r24
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	fb a3       	std	Y+35, r31	; 0x23
    1222:	ea a3       	std	Y+34, r30	; 0x22
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	de 01       	movw	r26, r28
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	ea 0f       	add	r30, r26
    1232:	fb 1f       	adc	r31, r27
    1234:	e2 88       	ldd	r14, Z+18	; 0x12
    1236:	f3 88       	ldd	r15, Z+19	; 0x13
    1238:	04 89       	ldd	r16, Z+20	; 0x14
    123a:	15 89       	ldd	r17, Z+21	; 0x15
    123c:	80 91 21 01 	lds	r24, 0x0121
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	39 a3       	std	Y+33, r19	; 0x21
    1246:	28 a3       	std	Y+32, r18	; 0x20
    1248:	f9 01       	movw	r30, r18
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	ea 0f       	add	r30, r26
    1254:	fb 1f       	adc	r31, r27
    1256:	22 89       	ldd	r18, Z+18	; 0x12
    1258:	33 89       	ldd	r19, Z+19	; 0x13
    125a:	44 89       	ldd	r20, Z+20	; 0x14
    125c:	55 89       	ldd	r21, Z+21	; 0x15
      // Calculate the motion along the depth axis of the helix
      double depth = target[gc.plane_axis_2]-gc.position[gc.plane_axis_2];
    125e:	80 91 22 01 	lds	r24, 0x0122
    1262:	28 2e       	mov	r2, r24
    1264:	33 24       	eor	r3, r3
    1266:	f1 01       	movw	r30, r2
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	ae 0f       	add	r26, r30
    1272:	bf 1f       	adc	r27, r31
    1274:	16 96       	adiw	r26, 0x06	; 6
    1276:	6d 91       	ld	r22, X+
    1278:	7d 91       	ld	r23, X+
    127a:	8d 91       	ld	r24, X+
    127c:	9c 91       	ld	r25, X
    127e:	19 97       	sbiw	r26, 0x09	; 9
    1280:	6e a7       	std	Y+46, r22	; 0x2e
    1282:	7f a7       	std	Y+47, r23	; 0x2f
    1284:	88 ab       	std	Y+48, r24	; 0x30
    1286:	99 ab       	std	Y+49, r25	; 0x31
    1288:	ee 5f       	subi	r30, 0xFE	; 254
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	a7 84       	ldd	r10, Z+15	; 0x0f
    128e:	b0 88       	ldd	r11, Z+16	; 0x10
    1290:	c1 88       	ldd	r12, Z+17	; 0x11
    1292:	d2 88       	ldd	r13, Z+18	; 0x12
      // Trace the arc
      mc_arc(theta_start, angular_travel, radius, depth, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2, 
    1294:	70 91 04 01 	lds	r23, 0x0104
    1298:	7f 8f       	std	Y+31, r23	; 0x1f
    129a:	77 23       	and	r23, r23
    129c:	49 f0       	breq	.+18     	; 0x12b0 <gc_execute_line+0x922>
    129e:	8f a9       	ldd	r24, Y+55	; 0x37
    12a0:	8b ab       	std	Y+51, r24	; 0x33
    12a2:	98 ad       	ldd	r25, Y+56	; 0x38
    12a4:	9c ab       	std	Y+52, r25	; 0x34
    12a6:	a9 ad       	ldd	r26, Y+57	; 0x39
    12a8:	ad ab       	std	Y+53, r26	; 0x35
    12aa:	ba ad       	ldd	r27, Y+58	; 0x3a
    12ac:	be ab       	std	Y+54, r27	; 0x36
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <gc_execute_line+0x93a>
    12b0:	e0 91 09 01 	lds	r30, 0x0109
    12b4:	eb ab       	std	Y+51, r30	; 0x33
    12b6:	f0 91 0a 01 	lds	r31, 0x010A
    12ba:	fc ab       	std	Y+52, r31	; 0x34
    12bc:	60 91 0b 01 	lds	r22, 0x010B
    12c0:	6d ab       	std	Y+53, r22	; 0x35
    12c2:	70 91 0c 01 	lds	r23, 0x010C
    12c6:	7e ab       	std	Y+54, r23	; 0x36
      // Invert angular motion if the g-code wanted a counterclockwise arc
      if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
        angular_travel = angular_travel-2*M_PI;
      }
      // Find the radius
      double radius = hypot(offset[gc.plane_axis_0], offset[gc.plane_axis_1]);
    12c8:	c8 01       	movw	r24, r16
    12ca:	b7 01       	movw	r22, r14
    12cc:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <hypot>
    12d0:	7b 01       	movw	r14, r22
    12d2:	8c 01       	movw	r16, r24
      // Calculate the motion along the depth axis of the helix
      double depth = target[gc.plane_axis_2]-gc.position[gc.plane_axis_2];
      // Trace the arc
      mc_arc(theta_start, angular_travel, radius, depth, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2, 
    12d4:	8d b7       	in	r24, 0x3d	; 61
    12d6:	9e b7       	in	r25, 0x3e	; 62
    12d8:	0c 97       	sbiw	r24, 0x0c	; 12
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	9e bf       	out	0x3e, r25	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	8d bf       	out	0x3d, r24	; 61
    12e4:	8d b6       	in	r8, 0x3d	; 61
    12e6:	9e b6       	in	r9, 0x3e	; 62
    12e8:	08 94       	sec
    12ea:	81 1c       	adc	r8, r1
    12ec:	91 1c       	adc	r9, r1
    12ee:	6e a5       	ldd	r22, Y+46	; 0x2e
    12f0:	7f a5       	ldd	r23, Y+47	; 0x2f
    12f2:	88 a9       	ldd	r24, Y+48	; 0x30
    12f4:	99 a9       	ldd	r25, Y+49	; 0x31
    12f6:	a6 01       	movw	r20, r12
    12f8:	95 01       	movw	r18, r10
    12fa:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    12fe:	5b 01       	movw	r10, r22
    1300:	6c 01       	movw	r12, r24
    1302:	e8 a1       	ldd	r30, Y+32	; 0x20
    1304:	f9 a1       	ldd	r31, Y+33	; 0x21
    1306:	d4 01       	movw	r26, r8
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	fc 93       	st	X, r31
    130c:	ee 93       	st	-X, r30
    130e:	13 96       	adiw	r26, 0x03	; 3
    1310:	3c 92       	st	X, r3
    1312:	2e 92       	st	-X, r2
    1314:	12 97       	sbiw	r26, 0x02	; 2
    1316:	2b a9       	ldd	r18, Y+51	; 0x33
    1318:	3c a9       	ldd	r19, Y+52	; 0x34
    131a:	4d a9       	ldd	r20, Y+53	; 0x35
    131c:	5e a9       	ldd	r21, Y+54	; 0x36
    131e:	c9 01       	movw	r24, r18
    1320:	da 01       	movw	r26, r20
    1322:	f4 01       	movw	r30, r8
    1324:	84 83       	std	Z+4, r24	; 0x04
    1326:	95 83       	std	Z+5, r25	; 0x05
    1328:	a6 83       	std	Z+6, r26	; 0x06
    132a:	b7 83       	std	Z+7, r27	; 0x07
    132c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    132e:	20 87       	std	Z+8, r18	; 0x08
    1330:	11 86       	std	Z+9, r1	; 0x09
    1332:	81 e1       	ldi	r24, 0x11	; 17
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	93 87       	std	Z+11, r25	; 0x0b
    1338:	82 87       	std	Z+10, r24	; 0x0a
    133a:	6c a1       	ldd	r22, Y+36	; 0x24
    133c:	7d a1       	ldd	r23, Y+37	; 0x25
    133e:	8e a1       	ldd	r24, Y+38	; 0x26
    1340:	9f a1       	ldd	r25, Y+39	; 0x27
    1342:	a3 01       	movw	r20, r6
    1344:	92 01       	movw	r18, r4
    1346:	8a a0       	ldd	r8, Y+34	; 0x22
    1348:	9b a0       	ldd	r9, Y+35	; 0x23
    134a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <mc_arc>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode,
        gc.position);
      // Finish off with a line to make sure we arrive exactly where we think we are
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	2b 85       	ldd	r18, Y+11	; 0x0b
    1358:	3c 85       	ldd	r19, Y+12	; 0x0c
    135a:	4d 85       	ldd	r20, Y+13	; 0x0d
    135c:	5e 85       	ldd	r21, Y+14	; 0x0e
    135e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1360:	f8 88       	ldd	r15, Y+16	; 0x10
    1362:	09 89       	ldd	r16, Y+17	; 0x11
    1364:	1a 89       	ldd	r17, Y+18	; 0x12
    1366:	80 90 04 01 	lds	r8, 0x0104
    136a:	ad b7       	in	r26, 0x3d	; 61
    136c:	be b7       	in	r27, 0x3e	; 62
    136e:	1c 96       	adiw	r26, 0x0c	; 12
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	be bf       	out	0x3e, r27	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	ad bf       	out	0x3d, r26	; 61
    137a:	88 20       	and	r8, r8
    137c:	61 f4       	brne	.+24     	; 0x1396 <gc_execute_line+0xa08>
    137e:	b0 91 09 01 	lds	r27, 0x0109
    1382:	bf ab       	std	Y+55, r27	; 0x37
    1384:	e0 91 0a 01 	lds	r30, 0x010A
    1388:	e8 af       	std	Y+56, r30	; 0x38
    138a:	f0 91 0b 01 	lds	r31, 0x010B
    138e:	f9 af       	std	Y+57, r31	; 0x39
    1390:	a0 91 0c 01 	lds	r26, 0x010C
    1394:	aa af       	std	Y+58, r26	; 0x3a
    1396:	ef a9       	ldd	r30, Y+55	; 0x37
    1398:	f8 ad       	ldd	r31, Y+56	; 0x38
    139a:	a9 ad       	ldd	r26, Y+57	; 0x39
    139c:	ba ad       	ldd	r27, Y+58	; 0x3a
    139e:	5f 01       	movw	r10, r30
    13a0:	6d 01       	movw	r12, r26
    13a2:	99 24       	eor	r9, r9
    13a4:	0e 94 85 11 	call	0x230a	; 0x230a <plan_buffer_line>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(double)*3); // gc.position[] = target[];
    13a8:	a1 e1       	ldi	r26, 0x11	; 17
    13aa:	b1 e0       	ldi	r27, 0x01	; 1
    13ac:	fe 01       	movw	r30, r28
    13ae:	37 96       	adiw	r30, 0x07	; 7
    13b0:	8c e0       	ldi	r24, 0x0C	; 12
    13b2:	01 90       	ld	r0, Z+
    13b4:	0d 92       	st	X+, r0
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <gc_execute_line+0xa24>
  return(gc.status_code);
    13ba:	80 91 02 01 	lds	r24, 0x0102
}
    13be:	ea 96       	adiw	r28, 0x3a	; 58
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	7f 90       	pop	r7
    13e4:	6f 90       	pop	r6
    13e6:	5f 90       	pop	r5
    13e8:	4f 90       	pop	r4
    13ea:	3f 90       	pop	r3
    13ec:	2f 90       	pop	r2
    13ee:	08 95       	ret

000013f0 <limits_init>:
#include "settings.h"
#include "nuts_bolts.h"
#include "config.h"

void limits_init() {
  LIMIT_DDR &= ~(LIMIT_MASK);
    13f0:	84 b1       	in	r24, 0x04	; 4
    13f2:	81 7f       	andi	r24, 0xF1	; 241
    13f4:	84 b9       	out	0x04, r24	; 4
}
    13f6:	08 95       	ret

000013f8 <homing_cycle>:

static void homing_cycle(bool x_axis, bool y_axis, bool z_axis, bool reverse_direction, uint32_t microseconds_per_pulse) {
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <homing_cycle+0x26>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <homing_cycle+0x28>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	26 2e       	mov	r2, r22
    142a:	34 2e       	mov	r3, r20
    142c:	27 01       	movw	r4, r14
    142e:	38 01       	movw	r6, r16
  // First home the Z axis
  uint32_t step_delay = microseconds_per_pulse - settings.pulse_microseconds;
    1430:	60 91 a5 06 	lds	r22, 0x06A5
    1434:	46 1a       	sub	r4, r22
    1436:	51 08       	sbc	r5, r1
    1438:	61 08       	sbc	r6, r1
    143a:	71 08       	sbc	r7, r1
  uint8_t out_bits = DIRECTION_MASK;
  uint8_t limit_bits;
  
  if (x_axis) { out_bits |= (1<<X_STEP_BIT); }
    143c:	88 23       	and	r24, r24
    143e:	11 f0       	breq	.+4      	; 0x1444 <homing_cycle+0x4c>
    1440:	94 ee       	ldi	r25, 0xE4	; 228
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <homing_cycle+0x4e>
    1444:	90 ee       	ldi	r25, 0xE0	; 224
  if (y_axis) { out_bits |= (1<<Y_STEP_BIT); }
    1446:	21 10       	cpse	r2, r1
    1448:	98 60       	ori	r25, 0x08	; 8
  if (z_axis) { out_bits |= (1<<Z_STEP_BIT); }
    144a:	31 10       	cpse	r3, r1
    144c:	90 61       	ori	r25, 0x10	; 16
  
  // Invert direction bits if this is a reverse homing_cycle
  if (reverse_direction) {
    144e:	22 23       	and	r18, r18
    1450:	11 f0       	breq	.+4      	; 0x1456 <homing_cycle+0x5e>
    out_bits ^= DIRECTION_MASK;
    1452:	80 ee       	ldi	r24, 0xE0	; 224
    1454:	98 27       	eor	r25, r24
  }
  
  // Apply the global invert mask
  out_bits ^= settings.invert_mask;
    1456:	90 90 ae 06 	lds	r9, 0x06AE
    145a:	99 26       	eor	r9, r25
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    145c:	8b b1       	in	r24, 0x0b	; 11
    145e:	99 2d       	mov	r25, r9
    1460:	90 7e       	andi	r25, 0xE0	; 224
    1462:	8f 71       	andi	r24, 0x1F	; 31
    1464:	98 2b       	or	r25, r24
    1466:	9b b9       	out	0x0b, r25	; 11
      out_bits ^= (1<<Z_STEP_BIT);
    }
    // Check if we are done
    if(!(x_axis || y_axis || z_axis)) { return; }
    STEPPING_PORT |= out_bits & STEP_MASK;
    _delay_us(settings.pulse_microseconds);
    1468:	86 2f       	mov	r24, r22
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	9b 83       	std	Y+3, r25	; 0x03
    1474:	ac 83       	std	Y+4, r26	; 0x04
    1476:	bd 83       	std	Y+5, r27	; 0x05
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
  
  for(;;) {
    limit_bits = LIMIT_PIN;
    1478:	83 b1       	in	r24, 0x03	; 3
    if (reverse_direction) {         
      // Invert limit_bits if this is a reverse homing_cycle
      limit_bits ^= LIMIT_MASK;
    }
    if (x_axis && !(LIMIT_PIN & (1<<X_LIMIT_BIT))) {
    147a:	99 81       	ldd	r25, Y+1	; 0x01
    147c:	99 23       	and	r25, r25
    147e:	29 f0       	breq	.+10     	; 0x148a <homing_cycle+0x92>
    1480:	19 99       	sbic	0x03, 1	; 3
    1482:	03 c0       	rjmp	.+6      	; 0x148a <homing_cycle+0x92>
      x_axis = false;
      out_bits ^= (1<<X_STEP_BIT);      
    1484:	a4 e0       	ldi	r26, 0x04	; 4
    1486:	9a 26       	eor	r9, r26
    1488:	19 82       	std	Y+1, r1	; 0x01
    }    
    if (y_axis && !(LIMIT_PIN & (1<<Y_LIMIT_BIT))) {
    148a:	22 20       	and	r2, r2
    148c:	29 f0       	breq	.+10     	; 0x1498 <homing_cycle+0xa0>
    148e:	1a 99       	sbic	0x03, 2	; 3
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <homing_cycle+0xa0>
      y_axis = false;
      out_bits ^= (1<<Y_STEP_BIT);
    1492:	b8 e0       	ldi	r27, 0x08	; 8
    1494:	9b 26       	eor	r9, r27
    1496:	22 24       	eor	r2, r2
    }    
    if (z_axis && !(LIMIT_PIN & (1<<Z_LIMIT_BIT))) {
    1498:	33 20       	and	r3, r3
    149a:	29 f0       	breq	.+10     	; 0x14a6 <homing_cycle+0xae>
    149c:	1b 99       	sbic	0x03, 3	; 3
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <homing_cycle+0xae>
      z_axis = false;
      out_bits ^= (1<<Z_STEP_BIT);
    14a0:	e0 e1       	ldi	r30, 0x10	; 16
    14a2:	9e 26       	eor	r9, r30
    14a4:	33 24       	eor	r3, r3
    }
    // Check if we are done
    if(!(x_axis || y_axis || z_axis)) { return; }
    14a6:	f9 81       	ldd	r31, Y+1	; 0x01
    14a8:	ff 23       	and	r31, r31
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <homing_cycle+0xbe>
    14ac:	22 20       	and	r2, r2
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <homing_cycle+0xbe>
    14b0:	33 20       	and	r3, r3
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <homing_cycle+0xbe>
    14b4:	e6 c0       	rjmp	.+460    	; 0x1682 <homing_cycle+0x28a>
    STEPPING_PORT |= out_bits & STEP_MASK;
    14b6:	8b b1       	in	r24, 0x0b	; 11
    14b8:	9c e1       	ldi	r25, 0x1C	; 28
    14ba:	89 2e       	mov	r8, r25
    14bc:	89 20       	and	r8, r9
    14be:	88 29       	or	r24, r8
    14c0:	8b b9       	out	0x0b, r24	; 11
    _delay_us(settings.pulse_microseconds);
    14c2:	6a 81       	ldd	r22, Y+2	; 0x02
    14c4:	7b 81       	ldd	r23, Y+3	; 0x03
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    14ce:	5b 01       	movw	r10, r22
    14d0:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14d2:	2b ea       	ldi	r18, 0xAB	; 171
    14d4:	3a ea       	ldi	r19, 0xAA	; 170
    14d6:	4a ea       	ldi	r20, 0xAA	; 170
    14d8:	50 e4       	ldi	r21, 0x40	; 64
    14da:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    14de:	7b 01       	movw	r14, r22
    14e0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	14 f4       	brge	.+4      	; 0x14f6 <homing_cycle+0xfe>
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	53 c0       	rjmp	.+166    	; 0x159c <homing_cycle+0x1a4>
		__ticks = 1;
	else if (__tmp > 255)
    14f6:	c8 01       	movw	r24, r16
    14f8:	b7 01       	movw	r22, r14
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	53 e4       	ldi	r21, 0x43	; 67
    1502:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    1506:	18 16       	cp	r1, r24
    1508:	0c f0       	brlt	.+2      	; 0x150c <homing_cycle+0x114>
    150a:	44 c0       	rjmp	.+136    	; 0x1594 <homing_cycle+0x19c>
	{
		_delay_ms(__us / 1000.0);
    150c:	c6 01       	movw	r24, r12
    150e:	b5 01       	movw	r22, r10
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a e7       	ldi	r20, 0x7A	; 122
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    151c:	5b 01       	movw	r10, r22
    151e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    152c:	7b 01       	movw	r14, r22
    152e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    153c:	88 23       	and	r24, r24
    153e:	1c f4       	brge	.+6      	; 0x1546 <homing_cycle+0x14e>
    1540:	61 e0       	ldi	r22, 0x01	; 1
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	23 c0       	rjmp	.+70     	; 0x158c <homing_cycle+0x194>
		__ticks = 1;
	else if (__tmp > 65535)
    1546:	c8 01       	movw	r24, r16
    1548:	b7 01       	movw	r22, r14
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    1556:	18 16       	cp	r1, r24
    1558:	ac f4       	brge	.+42     	; 0x1584 <homing_cycle+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	c6 01       	movw	r24, r12
    155c:	b5 01       	movw	r22, r10
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    156a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    156e:	06 c0       	rjmp	.+12     	; 0x157c <homing_cycle+0x184>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1570:	80 e9       	ldi	r24, 0x90	; 144
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <homing_cycle+0x17c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	61 50       	subi	r22, 0x01	; 1
    157a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	61 15       	cp	r22, r1
    157e:	71 05       	cpc	r23, r1
    1580:	b9 f7       	brne	.-18     	; 0x1570 <homing_cycle+0x178>
    1582:	0e c0       	rjmp	.+28     	; 0x15a0 <homing_cycle+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	c8 01       	movw	r24, r16
    1586:	b7 01       	movw	r22, r14
    1588:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    158c:	cb 01       	movw	r24, r22
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <homing_cycle+0x196>
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <homing_cycle+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1594:	c8 01       	movw	r24, r16
    1596:	b7 01       	movw	r22, r14
    1598:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    159c:	6a 95       	dec	r22
    159e:	f1 f7       	brne	.-4      	; 0x159c <homing_cycle+0x1a4>
    STEPPING_PORT ^= out_bits & STEP_MASK;
    15a0:	8b b1       	in	r24, 0x0b	; 11
    15a2:	88 26       	eor	r8, r24
    15a4:	8b b8       	out	0x0b, r8	; 11
    _delay_us(step_delay);
    15a6:	c3 01       	movw	r24, r6
    15a8:	b2 01       	movw	r22, r4
    15aa:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    15ae:	5b 01       	movw	r10, r22
    15b0:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15b2:	2b ea       	ldi	r18, 0xAB	; 171
    15b4:	3a ea       	ldi	r19, 0xAA	; 170
    15b6:	4a ea       	ldi	r20, 0xAA	; 170
    15b8:	50 e4       	ldi	r21, 0x40	; 64
    15ba:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    15be:	7b 01       	movw	r14, r22
    15c0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	14 f4       	brge	.+4      	; 0x15d6 <homing_cycle+0x1de>
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	53 c0       	rjmp	.+166    	; 0x167c <homing_cycle+0x284>
		__ticks = 1;
	else if (__tmp > 255)
    15d6:	c8 01       	movw	r24, r16
    15d8:	b7 01       	movw	r22, r14
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	53 e4       	ldi	r21, 0x43	; 67
    15e2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	0c f0       	brlt	.+2      	; 0x15ec <homing_cycle+0x1f4>
    15ea:	44 c0       	rjmp	.+136    	; 0x1674 <homing_cycle+0x27c>
	{
		_delay_ms(__us / 1000.0);
    15ec:	c6 01       	movw	r24, r12
    15ee:	b5 01       	movw	r22, r10
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	54 e4       	ldi	r21, 0x44	; 68
    15f8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    15fc:	5b 01       	movw	r10, r22
    15fe:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a e7       	ldi	r20, 0x7A	; 122
    1606:	55 e4       	ldi	r21, 0x45	; 69
    1608:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    160c:	7b 01       	movw	r14, r22
    160e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    161c:	88 23       	and	r24, r24
    161e:	1c f4       	brge	.+6      	; 0x1626 <homing_cycle+0x22e>
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	23 c0       	rjmp	.+70     	; 0x166c <homing_cycle+0x274>
		__ticks = 1;
	else if (__tmp > 65535)
    1626:	c8 01       	movw	r24, r16
    1628:	b7 01       	movw	r22, r14
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    1636:	18 16       	cp	r1, r24
    1638:	ac f4       	brge	.+42     	; 0x1664 <homing_cycle+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	c6 01       	movw	r24, r12
    163c:	b5 01       	movw	r22, r10
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    164a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    164e:	06 c0       	rjmp	.+12     	; 0x165c <homing_cycle+0x264>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1650:	80 e9       	ldi	r24, 0x90	; 144
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <homing_cycle+0x25c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	61 50       	subi	r22, 0x01	; 1
    165a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165c:	61 15       	cp	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	b9 f7       	brne	.-18     	; 0x1650 <homing_cycle+0x258>
    1662:	0a cf       	rjmp	.-492    	; 0x1478 <homing_cycle+0x80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    166c:	cb 01       	movw	r24, r22
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <homing_cycle+0x276>
    1672:	02 cf       	rjmp	.-508    	; 0x1478 <homing_cycle+0x80>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1674:	c8 01       	movw	r24, r16
    1676:	b7 01       	movw	r22, r14
    1678:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167c:	6a 95       	dec	r22
    167e:	f1 f7       	brne	.-4      	; 0x167c <homing_cycle+0x284>
    1680:	fb ce       	rjmp	.-522    	; 0x1478 <homing_cycle+0x80>
  }
  return;
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	af 90       	pop	r10
    16a0:	9f 90       	pop	r9
    16a2:	8f 90       	pop	r8
    16a4:	7f 90       	pop	r7
    16a6:	6f 90       	pop	r6
    16a8:	5f 90       	pop	r5
    16aa:	4f 90       	pop	r4
    16ac:	3f 90       	pop	r3
    16ae:	2f 90       	pop	r2
    16b0:	08 95       	ret

000016b2 <limits_go_home>:

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
}

void limits_go_home() {
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
  st_synchronize();
    16bc:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <st_synchronize>
  // Store the current limit switch state
  uint8_t original_limit_state = LIMIT_PIN;
    16c0:	d3 b0       	in	r13, 0x03	; 3
  }
  return;
}

static void approach_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, false, 100000);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	f0 ea       	ldi	r31, 0xA0	; 160
    16cc:	ef 2e       	mov	r14, r31
    16ce:	f6 e8       	ldi	r31, 0x86	; 134
    16d0:	ff 2e       	mov	r15, r31
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	0f 2f       	mov	r16, r31
    16d6:	11 2d       	mov	r17, r1
    16d8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <homing_cycle>
  uint8_t original_limit_state = LIMIT_PIN;
  approach_limit_switch(false, false, true); // First home the z axis
  approach_limit_switch(true, true, false);  // Then home the x and y axis
  // Xor previous and current limit switch state to determine which were high then but have become 
  // low now. These are the actual installed limit switches.
  uint8_t limit_switches_present = (original_limit_state ^ LIMIT_PIN) & LIMIT_MASK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <homing_cycle>
    16e8:	83 b1       	in	r24, 0x03	; 3
  // Now carefully leave the limit switches
  leave_limit_switch(
    16ea:	8d 25       	eor	r24, r13
    16ec:	8e 70       	andi	r24, 0x0E	; 14
    16ee:	90 e0       	ldi	r25, 0x00	; 0
static void approach_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, false, 100000);
}

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
    16f0:	bc 01       	movw	r22, r24
    16f2:	76 95       	lsr	r23
    16f4:	67 95       	ror	r22
    16f6:	76 95       	lsr	r23
    16f8:	67 95       	ror	r22
    16fa:	61 70       	andi	r22, 0x01	; 1
    16fc:	ac 01       	movw	r20, r24
    16fe:	73 e0       	ldi	r23, 0x03	; 3
    1700:	56 95       	lsr	r21
    1702:	47 95       	ror	r20
    1704:	7a 95       	dec	r23
    1706:	e1 f7       	brne	.-8      	; 0x1700 <limits_go_home+0x4e>
    1708:	41 70       	andi	r20, 0x01	; 1
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	81 70       	andi	r24, 0x01	; 1
    1710:	21 e0       	ldi	r18, 0x01	; 1
    1712:	30 e2       	ldi	r19, 0x20	; 32
    1714:	e3 2e       	mov	r14, r19
    1716:	31 ea       	ldi	r19, 0xA1	; 161
    1718:	f3 2e       	mov	r15, r19
    171a:	37 e0       	ldi	r19, 0x07	; 7
    171c:	03 2f       	mov	r16, r19
    171e:	11 2d       	mov	r17, r1
    1720:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <homing_cycle>
  // Now carefully leave the limit switches
  leave_limit_switch(
    limit_switches_present & (1<<X_LIMIT_BIT), 
    limit_switches_present & (1<<Y_LIMIT_BIT),
    limit_switches_present & (1<<Z_LIMIT_BIT));
}
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	08 95       	ret

00001730 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  protocol_init();        
    1730:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <protocol_init>
  settings_init();  
    1734:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <settings_init>
  plan_init();      
    1738:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <plan_init>
  st_init();        
    173c:	0e 94 97 18 	call	0x312e	; 0x312e <st_init>
  spindle_init();   
    1740:	0e 94 00 18 	call	0x3000	; 0x3000 <spindle_init>
  gc_init();
    1744:	0e 94 1e 04 	call	0x83c	; 0x83c <gc_init>
  limits_init();  
    1748:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <limits_init>
                    
  for(;;){
    sleep_mode(); // Wait for it ...
    174c:	83 b7       	in	r24, 0x33	; 51
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	83 bf       	out	0x33, r24	; 51
    1752:	88 95       	sleep
    1754:	83 b7       	in	r24, 0x33	; 51
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	83 bf       	out	0x33, r24	; 51
    protocol_process(); // ... process the serial protocol
    175a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <protocol_process>
    175e:	f6 cf       	rjmp	.-20     	; 0x174c <main+0x1c>

00001760 <mc_go_home>:
}
#endif

void mc_go_home()
{
  st_go_home();
    1760:	0e 94 d7 18 	call	0x31ae	; 0x31ae <st_go_home>
}
    1764:	08 95       	ret

00001766 <mc_arc>:
#ifdef __AVR_ATmega328P__
// The arc is approximated by generating a huge number of tiny, linear segments. The length of each 
// segment is configured in settings.mm_per_arc_segment.  
void mc_arc(double theta, double angular_travel, double radius, double linear_travel, int axis_1, int axis_2, 
  int axis_linear, double feed_rate, int invert_feed_rate, double *position)
{      
    1766:	2f 92       	push	r2
    1768:	3f 92       	push	r3
    176a:	4f 92       	push	r4
    176c:	5f 92       	push	r5
    176e:	6f 92       	push	r6
    1770:	7f 92       	push	r7
    1772:	8f 92       	push	r8
    1774:	9f 92       	push	r9
    1776:	af 92       	push	r10
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	ae 97       	sbiw	r28, 0x2e	; 46
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	2b 01       	movw	r4, r22
    179c:	3c 01       	movw	r6, r24
    179e:	29 a3       	std	Y+33, r18	; 0x21
    17a0:	3a a3       	std	Y+34, r19	; 0x22
    17a2:	4b a3       	std	Y+35, r20	; 0x23
    17a4:	5c a3       	std	Y+36, r21	; 0x24
    17a6:	ed a2       	std	Y+37, r14	; 0x25
    17a8:	fe a2       	std	Y+38, r15	; 0x26
    17aa:	0f a3       	std	Y+39, r16	; 0x27
    17ac:	18 a7       	std	Y+40, r17	; 0x28
    17ae:	2f 96       	adiw	r28, 0x0f	; 15
    17b0:	2e ac       	ldd	r2, Y+62	; 0x3e
    17b2:	3f ac       	ldd	r3, Y+63	; 0x3f
    17b4:	2f 97       	sbiw	r28, 0x0f	; 15
  int acceleration_manager_was_enabled = plan_is_acceleration_manager_enabled();
    17b6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <plan_is_acceleration_manager_enabled>
    17ba:	98 a3       	std	Y+32, r25	; 0x20
    17bc:	8f 8f       	std	Y+31, r24	; 0x1f
  plan_set_acceleration_manager_enabled(false); // disable acceleration management for the duration of the arc
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <plan_set_acceleration_manager_enabled>
  double millimeters_of_travel = hypot(angular_travel*radius, labs(linear_travel));
    17c6:	69 a1       	ldd	r22, Y+33	; 0x21
    17c8:	7a a1       	ldd	r23, Y+34	; 0x22
    17ca:	8b a1       	ldd	r24, Y+35	; 0x23
    17cc:	9c a1       	ldd	r25, Y+36	; 0x24
    17ce:	2d a1       	ldd	r18, Y+37	; 0x25
    17d0:	3e a1       	ldd	r19, Y+38	; 0x26
    17d2:	4f a1       	ldd	r20, Y+39	; 0x27
    17d4:	58 a5       	ldd	r21, Y+40	; 0x28
    17d6:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    17da:	7b 01       	movw	r14, r22
    17dc:	8c 01       	movw	r16, r24
    17de:	c6 01       	movw	r24, r12
    17e0:	b5 01       	movw	r22, r10
    17e2:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    17e6:	97 ff       	sbrs	r25, 7
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <mc_arc+0x92>
    17ea:	90 95       	com	r25
    17ec:	80 95       	com	r24
    17ee:	70 95       	com	r23
    17f0:	61 95       	neg	r22
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	8f 4f       	sbci	r24, 0xFF	; 255
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c8 01       	movw	r24, r16
    1802:	b7 01       	movw	r22, r14
    1804:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <hypot>
    1808:	7b 01       	movw	r14, r22
    180a:	8c 01       	movw	r16, r24
  if (millimeters_of_travel == 0.0) { return; }
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1818:	88 23       	and	r24, r24
    181a:	09 f4       	brne	.+2      	; 0x181e <mc_arc+0xb8>
    181c:	24 c1       	rjmp	.+584    	; 0x1a66 <mc_arc+0x300>
  uint16_t segments = round(millimeters_of_travel/settings.mm_per_arc_segment);
    181e:	c8 01       	movw	r24, r16
    1820:	b7 01       	movw	r22, r14
    1822:	20 91 af 06 	lds	r18, 0x06AF
    1826:	30 91 b0 06 	lds	r19, 0x06B0
    182a:	40 91 b1 06 	lds	r20, 0x06B1
    182e:	50 91 b2 06 	lds	r21, 0x06B2
    1832:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1836:	0e 94 b8 20 	call	0x4170	; 0x4170 <round>
    183a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    183e:	7e 8f       	std	Y+30, r23	; 0x1e
    1840:	6d 8f       	std	Y+29, r22	; 0x1d
  // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
  // by a number of discrete segments. The inverse feed_rate should be correct for the sum of 
  // all segments.
  if (invert_feed_rate) { feed_rate *= segments; }
    1842:	2d 96       	adiw	r28, 0x0d	; 13
    1844:	2e ad       	ldd	r18, Y+62	; 0x3e
    1846:	3f ad       	ldd	r19, Y+63	; 0x3f
    1848:	2d 97       	sbiw	r28, 0x0d	; 13
    184a:	23 2b       	or	r18, r19
    184c:	a1 f0       	breq	.+40     	; 0x1876 <mc_arc+0x110>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	2b 96       	adiw	r28, 0x0b	; 11
    185c:	6c ad       	ldd	r22, Y+60	; 0x3c
    185e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1860:	8e ad       	ldd	r24, Y+62	; 0x3e
    1862:	9f ad       	ldd	r25, Y+63	; 0x3f
    1864:	2b 97       	sbiw	r28, 0x0b	; 11
    1866:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    186a:	2b 96       	adiw	r28, 0x0b	; 11
    186c:	6c af       	std	Y+60, r22	; 0x3c
    186e:	7d af       	std	Y+61, r23	; 0x3d
    1870:	8e af       	std	Y+62, r24	; 0x3e
    1872:	9f af       	std	Y+63, r25	; 0x3f
    1874:	2b 97       	sbiw	r28, 0x0b	; 11
  // The angular motion for each segment
  double theta_per_segment = angular_travel/segments;
    1876:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1878:	fe 8d       	ldd	r31, Y+30	; 0x1e
    187a:	bf 01       	movw	r22, r30
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1884:	7b 01       	movw	r14, r22
    1886:	8c 01       	movw	r16, r24
    1888:	69 a1       	ldd	r22, Y+33	; 0x21
    188a:	7a a1       	ldd	r23, Y+34	; 0x22
    188c:	8b a1       	ldd	r24, Y+35	; 0x23
    188e:	9c a1       	ldd	r25, Y+36	; 0x24
    1890:	a8 01       	movw	r20, r16
    1892:	97 01       	movw	r18, r14
    1894:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1898:	69 8f       	std	Y+25, r22	; 0x19
    189a:	7a 8f       	std	Y+26, r23	; 0x1a
    189c:	8b 8f       	std	Y+27, r24	; 0x1b
    189e:	9c 8f       	std	Y+28, r25	; 0x1c
  // The linear motion for each segment
  double linear_per_segment = linear_travel/segments;
    18a0:	c6 01       	movw	r24, r12
    18a2:	b5 01       	movw	r22, r10
    18a4:	a8 01       	movw	r20, r16
    18a6:	97 01       	movw	r18, r14
    18a8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    18ac:	6d 8b       	std	Y+21, r22	; 0x15
    18ae:	7e 8b       	std	Y+22, r23	; 0x16
    18b0:	8f 8b       	std	Y+23, r24	; 0x17
    18b2:	98 8f       	std	Y+24, r25	; 0x18
  // Compute the center of this circle
  double center_x = position[axis_1]-sin(theta)*radius;
    18b4:	c3 01       	movw	r24, r6
    18b6:	b2 01       	movw	r22, r4
    18b8:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <sin>
    18bc:	64 01       	movw	r12, r8
    18be:	cc 0c       	add	r12, r12
    18c0:	dd 1c       	adc	r13, r13
    18c2:	cc 0c       	add	r12, r12
    18c4:	dd 1c       	adc	r13, r13
    18c6:	81 01       	movw	r16, r2
    18c8:	0c 0d       	add	r16, r12
    18ca:	1d 1d       	adc	r17, r13
    18cc:	2d a1       	ldd	r18, Y+37	; 0x25
    18ce:	3e a1       	ldd	r19, Y+38	; 0x26
    18d0:	4f a1       	ldd	r20, Y+39	; 0x27
    18d2:	58 a5       	ldd	r21, Y+40	; 0x28
    18d4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    18d8:	9b 01       	movw	r18, r22
    18da:	ac 01       	movw	r20, r24
    18dc:	d8 01       	movw	r26, r16
    18de:	6d 91       	ld	r22, X+
    18e0:	7d 91       	ld	r23, X+
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    18ea:	69 8b       	std	Y+17, r22	; 0x11
    18ec:	7a 8b       	std	Y+18, r23	; 0x12
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	9c 8b       	std	Y+20, r25	; 0x14
  double center_y = position[axis_2]-cos(theta)*radius;
    18f2:	c3 01       	movw	r24, r6
    18f4:	b2 01       	movw	r22, r4
    18f6:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <cos>
    18fa:	25 96       	adiw	r28, 0x05	; 5
    18fc:	0e ad       	ldd	r16, Y+62	; 0x3e
    18fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    1900:	25 97       	sbiw	r28, 0x05	; 5
    1902:	00 0f       	add	r16, r16
    1904:	11 1f       	adc	r17, r17
    1906:	00 0f       	add	r16, r16
    1908:	11 1f       	adc	r17, r17
    190a:	71 01       	movw	r14, r2
    190c:	e0 0e       	add	r14, r16
    190e:	f1 1e       	adc	r15, r17
    1910:	2d a1       	ldd	r18, Y+37	; 0x25
    1912:	3e a1       	ldd	r19, Y+38	; 0x26
    1914:	4f a1       	ldd	r20, Y+39	; 0x27
    1916:	58 a5       	ldd	r21, Y+40	; 0x28
    1918:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	f7 01       	movw	r30, r14
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    192e:	6d 87       	std	Y+13, r22	; 0x0d
    1930:	7e 87       	std	Y+14, r23	; 0x0e
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	98 8b       	std	Y+16, r25	; 0x10
  // a vector to track the end point of each segment
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
    1936:	27 96       	adiw	r28, 0x07	; 7
    1938:	8e ad       	ldd	r24, Y+62	; 0x3e
    193a:	9f ad       	ldd	r25, Y+63	; 0x3f
    193c:	27 97       	sbiw	r28, 0x07	; 7
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	9e 01       	movw	r18, r28
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	f9 01       	movw	r30, r18
    194e:	e8 0f       	add	r30, r24
    1950:	f9 1f       	adc	r31, r25
    1952:	28 0e       	add	r2, r24
    1954:	39 1e       	adc	r3, r25
    1956:	d1 01       	movw	r26, r2
    1958:	4d 91       	ld	r20, X+
    195a:	5d 91       	ld	r21, X+
    195c:	6d 91       	ld	r22, X+
    195e:	7c 91       	ld	r23, X
    1960:	40 83       	st	Z, r20
    1962:	51 83       	std	Z+1, r21	; 0x01
    1964:	62 83       	std	Z+2, r22	; 0x02
    1966:	73 83       	std	Z+3, r23	; 0x03
    1968:	22 24       	eor	r2, r2
    196a:	33 24       	eor	r3, r3
  for (i=0; i<segments; i++) {
    target[axis_linear] += linear_per_segment;
    196c:	fa a7       	std	Y+42, r31	; 0x2a
    196e:	e9 a7       	std	Y+41, r30	; 0x29
    theta += theta_per_segment;
    target[axis_1] = center_x+sin(theta)*radius;
    1970:	f9 01       	movw	r30, r18
    1972:	ec 0d       	add	r30, r12
    1974:	fd 1d       	adc	r31, r13
    1976:	fc a7       	std	Y+44, r31	; 0x2c
    1978:	eb a7       	std	Y+43, r30	; 0x2b
    target[axis_2] = center_y+cos(theta)*radius;
    197a:	c9 01       	movw	r24, r18
    197c:	80 0f       	add	r24, r16
    197e:	91 1f       	adc	r25, r17
    1980:	9e a7       	std	Y+46, r25	; 0x2e
    1982:	8d a7       	std	Y+45, r24	; 0x2d
    1984:	66 c0       	rjmp	.+204    	; 0x1a52 <mc_arc+0x2ec>
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
  for (i=0; i<segments; i++) {
    target[axis_linear] += linear_per_segment;
    1986:	a9 a5       	ldd	r26, Y+41	; 0x29
    1988:	ba a5       	ldd	r27, Y+42	; 0x2a
    198a:	6d 91       	ld	r22, X+
    198c:	7d 91       	ld	r23, X+
    198e:	8d 91       	ld	r24, X+
    1990:	9c 91       	ld	r25, X
    1992:	2d 89       	ldd	r18, Y+21	; 0x15
    1994:	3e 89       	ldd	r19, Y+22	; 0x16
    1996:	4f 89       	ldd	r20, Y+23	; 0x17
    1998:	58 8d       	ldd	r21, Y+24	; 0x18
    199a:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    199e:	e9 a5       	ldd	r30, Y+41	; 0x29
    19a0:	fa a5       	ldd	r31, Y+42	; 0x2a
    19a2:	60 83       	st	Z, r22
    19a4:	71 83       	std	Z+1, r23	; 0x01
    19a6:	82 83       	std	Z+2, r24	; 0x02
    19a8:	93 83       	std	Z+3, r25	; 0x03
    theta += theta_per_segment;
    19aa:	c3 01       	movw	r24, r6
    19ac:	b2 01       	movw	r22, r4
    19ae:	29 8d       	ldd	r18, Y+25	; 0x19
    19b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    19b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    19b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    19b6:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    19ba:	2b 01       	movw	r4, r22
    19bc:	3c 01       	movw	r6, r24
    target[axis_1] = center_x+sin(theta)*radius;
    19be:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <sin>
    19c2:	2d a1       	ldd	r18, Y+37	; 0x25
    19c4:	3e a1       	ldd	r19, Y+38	; 0x26
    19c6:	4f a1       	ldd	r20, Y+39	; 0x27
    19c8:	58 a5       	ldd	r21, Y+40	; 0x28
    19ca:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	69 89       	ldd	r22, Y+17	; 0x11
    19d4:	7a 89       	ldd	r23, Y+18	; 0x12
    19d6:	8b 89       	ldd	r24, Y+19	; 0x13
    19d8:	9c 89       	ldd	r25, Y+20	; 0x14
    19da:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    19de:	ab a5       	ldd	r26, Y+43	; 0x2b
    19e0:	bc a5       	ldd	r27, Y+44	; 0x2c
    19e2:	6d 93       	st	X+, r22
    19e4:	7d 93       	st	X+, r23
    19e6:	8d 93       	st	X+, r24
    19e8:	9c 93       	st	X, r25
    19ea:	13 97       	sbiw	r26, 0x03	; 3
    target[axis_2] = center_y+cos(theta)*radius;
    19ec:	c3 01       	movw	r24, r6
    19ee:	b2 01       	movw	r22, r4
    19f0:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <cos>
    19f4:	2d a1       	ldd	r18, Y+37	; 0x25
    19f6:	3e a1       	ldd	r19, Y+38	; 0x26
    19f8:	4f a1       	ldd	r20, Y+39	; 0x27
    19fa:	58 a5       	ldd	r21, Y+40	; 0x28
    19fc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a06:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0a:	98 89       	ldd	r25, Y+16	; 0x10
    1a0c:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    1a10:	ed a5       	ldd	r30, Y+45	; 0x2d
    1a12:	fe a5       	ldd	r31, Y+46	; 0x2e
    1a14:	60 83       	st	Z, r22
    1a16:	71 83       	std	Z+1, r23	; 0x01
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	93 83       	std	Z+3, r25	; 0x03
    plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], feed_rate, invert_feed_rate);
    1a1c:	69 81       	ldd	r22, Y+1	; 0x01
    1a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	2d 81       	ldd	r18, Y+5	; 0x05
    1a26:	3e 81       	ldd	r19, Y+6	; 0x06
    1a28:	4f 81       	ldd	r20, Y+7	; 0x07
    1a2a:	58 85       	ldd	r21, Y+8	; 0x08
    1a2c:	e9 84       	ldd	r14, Y+9	; 0x09
    1a2e:	fa 84       	ldd	r15, Y+10	; 0x0a
    1a30:	0b 85       	ldd	r16, Y+11	; 0x0b
    1a32:	1c 85       	ldd	r17, Y+12	; 0x0c
    1a34:	2b 96       	adiw	r28, 0x0b	; 11
    1a36:	ac ac       	ldd	r10, Y+60	; 0x3c
    1a38:	bd ac       	ldd	r11, Y+61	; 0x3d
    1a3a:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a3c:	df ac       	ldd	r13, Y+63	; 0x3f
    1a3e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a40:	2d 96       	adiw	r28, 0x0d	; 13
    1a42:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a44:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a46:	2d 97       	sbiw	r28, 0x0d	; 13
    1a48:	0e 94 85 11 	call	0x230a	; 0x230a <plan_buffer_line>
  // a vector to track the end point of each segment
  double target[3];
  int i;
  // Initialize the linear axis
  target[axis_linear] = position[axis_linear];
  for (i=0; i<segments; i++) {
    1a4c:	08 94       	sec
    1a4e:	21 1c       	adc	r2, r1
    1a50:	31 1c       	adc	r3, r1
    1a52:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1a54:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a56:	22 16       	cp	r2, r18
    1a58:	33 06       	cpc	r3, r19
    1a5a:	08 f4       	brcc	.+2      	; 0x1a5e <mc_arc+0x2f8>
    1a5c:	94 cf       	rjmp	.-216    	; 0x1986 <mc_arc+0x220>
    theta += theta_per_segment;
    target[axis_1] = center_x+sin(theta)*radius;
    target[axis_2] = center_y+cos(theta)*radius;
    plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], feed_rate, invert_feed_rate);
  }
  plan_set_acceleration_manager_enabled(acceleration_manager_was_enabled);
    1a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a60:	98 a1       	ldd	r25, Y+32	; 0x20
    1a62:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <plan_set_acceleration_manager_enabled>
}
    1a66:	ae 96       	adiw	r28, 0x2e	; 46
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	7f 90       	pop	r7
    1a8c:	6f 90       	pop	r6
    1a8e:	5f 90       	pop	r5
    1a90:	4f 90       	pop	r4
    1a92:	3f 90       	pop	r3
    1a94:	2f 90       	pop	r2
    1a96:	08 95       	ret

00001a98 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	7b 01       	movw	r14, r22
    1aaa:	8c 01       	movw	r16, r24
  st_synchronize();
    1aac:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <st_synchronize>
  _delay_ms(milliseconds);
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1ab8:	5b 01       	movw	r10, r22
    1aba:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	55 e4       	ldi	r21, 0x45	; 69
    1ac4:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1ac8:	7b 01       	movw	r14, r22
    1aca:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	1c f4       	brge	.+6      	; 0x1ae2 <mc_dwell+0x4a>
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	24 c0       	rjmp	.+72     	; 0x1b2a <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	b4 f4       	brge	.+44     	; 0x1b22 <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	c6 01       	movw	r24, r12
    1af8:	b5 01       	movw	r22, r10
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1b06:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0a:	80 e9       	ldi	r24, 0x90	; 144
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <mc_dwell+0x82>
    1b10:	fc 01       	movw	r30, r24
    1b12:	31 97       	sbiw	r30, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	61 50       	subi	r22, 0x01	; 1
    1b18:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	61 15       	cp	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	c1 f7       	brne	.-16     	; 0x1b10 <mc_dwell+0x78>
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	c8 01       	movw	r24, r16
    1b24:	b7 01       	movw	r22, r14
    1b26:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <mc_dwell+0x94>
}
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	cf 90       	pop	r12
    1b3c:	bf 90       	pop	r11
    1b3e:	af 90       	pop	r10
    1b40:	08 95       	ret

00001b42 <read_double>:
#include "nuts_bolts.h"
#include <stdint.h>
#include <stdlib.h>

int read_double(char *line, uint8_t *char_counter, double *double_ptr)                  
{
    1b42:	af 92       	push	r10
    1b44:	bf 92       	push	r11
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <read_double+0x16>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	6c 01       	movw	r12, r24
    1b5e:	5b 01       	movw	r10, r22
    1b60:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
    1b62:	fb 01       	movw	r30, r22
    1b64:	80 81       	ld	r24, Z
    1b66:	86 01       	movw	r16, r12
    1b68:	08 0f       	add	r16, r24
    1b6a:	11 1d       	adc	r17, r1
  char *end;
  
  *double_ptr = strtod(start, &end);
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	be 01       	movw	r22, r28
    1b70:	6f 5f       	subi	r22, 0xFF	; 255
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	0e 94 2a 1b 	call	0x3654	; 0x3654 <strtod>
    1b78:	f7 01       	movw	r30, r14
    1b7a:	60 83       	st	Z, r22
    1b7c:	71 83       	std	Z+1, r23	; 0x01
    1b7e:	82 83       	std	Z+2, r24	; 0x02
    1b80:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	80 17       	cp	r24, r16
    1b88:	91 07       	cpc	r25, r17
    1b8a:	19 f4       	brne	.+6      	; 0x1b92 <read_double+0x50>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <read_double+0x5a>
    return(false); 
  };

  *char_counter = end - line;
    1b92:	8c 19       	sub	r24, r12
    1b94:	f5 01       	movw	r30, r10
    1b96:	80 83       	st	Z, r24
    1b98:	21 e0       	ldi	r18, 0x01	; 1
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
  return(true);
}
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	08 95       	ret

00001bb8 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
static double factor_for_safe_speed(block_t *block) {
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
  if(settings.max_jerk < block->nominal_speed) {
    1bc8:	a0 90 b7 06 	lds	r10, 0x06B7
    1bcc:	b0 90 b8 06 	lds	r11, 0x06B8
    1bd0:	c0 90 b9 06 	lds	r12, 0x06B9
    1bd4:	d0 90 ba 06 	lds	r13, 0x06BA
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e1 a0       	ldd	r14, Z+33	; 0x21
    1bdc:	f2 a0       	ldd	r15, Z+34	; 0x22
    1bde:	03 a1       	ldd	r16, Z+35	; 0x23
    1be0:	14 a1       	ldd	r17, Z+36	; 0x24
    1be2:	c6 01       	movw	r24, r12
    1be4:	b5 01       	movw	r22, r10
    1be6:	a8 01       	movw	r20, r16
    1be8:	97 01       	movw	r18, r14
    1bea:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1bee:	87 fd       	sbrc	r24, 7
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <factor_for_safe_speed+0x44>
    1bf2:	e0 e0       	ldi	r30, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 e8       	ldi	r24, 0x80	; 128
    1bf8:	6f e3       	ldi	r22, 0x3F	; 63
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <factor_for_safe_speed+0x54>
    return(settings.max_jerk/block->nominal_speed);  
    1bfc:	c6 01       	movw	r24, r12
    1bfe:	b5 01       	movw	r22, r10
    1c00:	a8 01       	movw	r20, r16
    1c02:	97 01       	movw	r18, r14
    1c04:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1c08:	e6 2f       	mov	r30, r22
    1c0a:	69 2f       	mov	r22, r25
  } else {
    return(1.0);
  }
}
    1c0c:	2e 2f       	mov	r18, r30
    1c0e:	37 2f       	mov	r19, r23
    1c10:	48 2f       	mov	r20, r24
    1c12:	56 2f       	mov	r21, r22
    1c14:	b9 01       	movw	r22, r18
    1c16:	ca 01       	movw	r24, r20
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	08 95       	ret

00001c2a <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1c2a:	80 91 41 05 	lds	r24, 0x0541
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	08 95       	ret

00001c32 <plan_discard_current_block>:

void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1c32:	90 91 33 05 	lds	r25, 0x0533
    1c36:	80 91 34 05 	lds	r24, 0x0534
    1c3a:	98 17       	cp	r25, r24
    1c3c:	41 f0       	breq	.+16     	; 0x1c4e <plan_discard_current_block+0x1c>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1c3e:	80 91 34 05 	lds	r24, 0x0534
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	90 70       	andi	r25, 0x00	; 0
    1c4a:	80 93 34 05 	sts	0x0534, r24
    1c4e:	08 95       	ret

00001c50 <plan_get_current_block>:
  }
}

block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1c50:	90 91 33 05 	lds	r25, 0x0533
    1c54:	80 91 34 05 	lds	r24, 0x0534
    1c58:	98 17       	cp	r25, r24
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <plan_get_current_block+0x12>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	08 c0       	rjmp	.+16     	; 0x1c72 <plan_get_current_block+0x22>
  return(&block_buffer[block_buffer_tail]);
    1c62:	90 91 34 05 	lds	r25, 0x0534
    1c66:	81 e4       	ldi	r24, 0x41	; 65
    1c68:	98 9f       	mul	r25, r24
    1c6a:	90 01       	movw	r18, r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2d 5d       	subi	r18, 0xDD	; 221
    1c70:	3e 4f       	sbci	r19, 0xFE	; 254
}
    1c72:	c9 01       	movw	r24, r18
    1c74:	08 95       	ret

00001c76 <plan_set_current_position>:
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}

// Reset the planner position vector
void plan_set_current_position(double x, double y, double z) {
    1c76:	8f 92       	push	r8
    1c78:	9f 92       	push	r9
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	49 01       	movw	r8, r18
    1c8c:	5a 01       	movw	r10, r20
  position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1c8e:	20 91 98 06 	lds	r18, 0x0698
    1c92:	30 91 99 06 	lds	r19, 0x0699
    1c96:	40 91 9a 06 	lds	r20, 0x069A
    1c9a:	50 91 9b 06 	lds	r21, 0x069B
    1c9e:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1ca2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    1ca6:	25 e3       	ldi	r18, 0x35	; 53
    1ca8:	c2 2e       	mov	r12, r18
    1caa:	25 e0       	ldi	r18, 0x05	; 5
    1cac:	d2 2e       	mov	r13, r18
    1cae:	60 93 35 05 	sts	0x0535, r22
    1cb2:	70 93 36 05 	sts	0x0536, r23
    1cb6:	80 93 37 05 	sts	0x0537, r24
    1cba:	90 93 38 05 	sts	0x0538, r25
  position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1cbe:	c5 01       	movw	r24, r10
    1cc0:	b4 01       	movw	r22, r8
    1cc2:	20 91 9c 06 	lds	r18, 0x069C
    1cc6:	30 91 9d 06 	lds	r19, 0x069D
    1cca:	40 91 9e 06 	lds	r20, 0x069E
    1cce:	50 91 9f 06 	lds	r21, 0x069F
    1cd2:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1cd6:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    1cda:	f6 01       	movw	r30, r12
    1cdc:	34 96       	adiw	r30, 0x04	; 4
    1cde:	60 93 39 05 	sts	0x0539, r22
    1ce2:	71 83       	std	Z+1, r23	; 0x01
    1ce4:	82 83       	std	Z+2, r24	; 0x02
    1ce6:	93 83       	std	Z+3, r25	; 0x03
  position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b7 01       	movw	r22, r14
    1cec:	20 91 a0 06 	lds	r18, 0x06A0
    1cf0:	30 91 a1 06 	lds	r19, 0x06A1
    1cf4:	40 91 a2 06 	lds	r20, 0x06A2
    1cf8:	50 91 a3 06 	lds	r21, 0x06A3
    1cfc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1d00:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    1d04:	28 e0       	ldi	r18, 0x08	; 8
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	c2 0e       	add	r12, r18
    1d0a:	d3 1e       	adc	r13, r19
    1d0c:	60 93 3d 05 	sts	0x053D, r22
    1d10:	f6 01       	movw	r30, r12
    1d12:	71 83       	std	Z+1, r23	; 0x01
    1d14:	82 83       	std	Z+2, r24	; 0x02
    1d16:	93 83       	std	Z+3, r25	; 0x03
}
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	08 95       	ret

00001d2e <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
static void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	2c 01       	movw	r4, r24
    1d50:	eb 01       	movw	r28, r22
  if(!current) { return; }
    1d52:	61 15       	cp	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <planner_forward_pass_kernel+0x2c>
    1d58:	5a c0       	rjmp	.+180    	; 0x1e0e <planner_forward_pass_kernel+0xe0>
  // If the previous block is an acceleration block, but it is not long enough to 
  // complete the full speed change within the block, we need to adjust out entry
  // speed accordingly. Remember current->entry_factor equals the exit factor of 
  // the previous block.
  if(previous->entry_factor < current->entry_factor) {
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e1 a4       	ldd	r14, Z+41	; 0x29
    1d5e:	f2 a4       	ldd	r15, Z+42	; 0x2a
    1d60:	03 a5       	ldd	r16, Z+43	; 0x2b
    1d62:	14 a5       	ldd	r17, Z+44	; 0x2c
    1d64:	69 a4       	ldd	r6, Y+41	; 0x29
    1d66:	7a a4       	ldd	r7, Y+42	; 0x2a
    1d68:	8b a4       	ldd	r8, Y+43	; 0x2b
    1d6a:	9c a4       	ldd	r9, Y+44	; 0x2c
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	b7 01       	movw	r22, r14
    1d70:	a4 01       	movw	r20, r8
    1d72:	93 01       	movw	r18, r6
    1d74:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	0c f0       	brlt	.+2      	; 0x1d7e <planner_forward_pass_kernel+0x50>
    1d7c:	48 c0       	rjmp	.+144    	; 0x1e0e <planner_forward_pass_kernel+0xe0>
    double max_entry_speed = max_allowable_speed(-settings.acceleration,
      current->nominal_speed*previous->entry_factor, previous->millimeters);
    1d7e:	a9 a0       	ldd	r10, Y+33	; 0x21
    1d80:	ba a0       	ldd	r11, Y+34	; 0x22
    1d82:	cb a0       	ldd	r12, Y+35	; 0x23
    1d84:	dc a0       	ldd	r13, Y+36	; 0x24
    1d86:	c6 01       	movw	r24, r12
    1d88:	b5 01       	movw	r22, r10
    1d8a:	a8 01       	movw	r20, r16
    1d8c:	97 01       	movw	r18, r14
    1d8e:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
static double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1d96:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1d9a:	7b 01       	movw	r14, r22
    1d9c:	8c 01       	movw	r16, r24
    1d9e:	20 91 b3 06 	lds	r18, 0x06B3
    1da2:	30 91 b4 06 	lds	r19, 0x06B4
    1da6:	40 91 b5 06 	lds	r20, 0x06B5
    1daa:	50 91 b6 06 	lds	r21, 0x06B6
    1dae:	50 58       	subi	r21, 0x80	; 128
    1db0:	ca 01       	movw	r24, r20
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e7       	ldi	r20, 0x70	; 112
    1dbe:	52 e4       	ldi	r21, 0x42	; 66
    1dc0:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e7       	ldi	r20, 0x70	; 112
    1dca:	52 ec       	ldi	r21, 0xC2	; 194
    1dcc:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1dd0:	f2 01       	movw	r30, r4
    1dd2:	25 a1       	ldd	r18, Z+37	; 0x25
    1dd4:	36 a1       	ldd	r19, Z+38	; 0x26
    1dd6:	47 a1       	ldd	r20, Z+39	; 0x27
    1dd8:	50 a5       	ldd	r21, Z+40	; 0x28
    1dda:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1dde:	9b 01       	movw	r18, r22
    1de0:	ac 01       	movw	r20, r24
    1de2:	c8 01       	movw	r24, r16
    1de4:	b7 01       	movw	r22, r14
    1de6:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    1dea:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <sqrt>
  // speed accordingly. Remember current->entry_factor equals the exit factor of 
  // the previous block.
  if(previous->entry_factor < current->entry_factor) {
    double max_entry_speed = max_allowable_speed(-settings.acceleration,
      current->nominal_speed*previous->entry_factor, previous->millimeters);
    double max_entry_factor = max_entry_speed/current->nominal_speed;
    1dee:	a6 01       	movw	r20, r12
    1df0:	95 01       	movw	r18, r10
    1df2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1df6:	7b 01       	movw	r14, r22
    1df8:	8c 01       	movw	r16, r24
    if (max_entry_factor < current->entry_factor) {
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	93 01       	movw	r18, r6
    1dfe:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	24 f4       	brge	.+8      	; 0x1e0e <planner_forward_pass_kernel+0xe0>
      current->entry_factor = max_entry_factor;
    1e06:	e9 a6       	std	Y+41, r14	; 0x29
    1e08:	fa a6       	std	Y+42, r15	; 0x2a
    1e0a:	0b a7       	std	Y+43, r16	; 0x2b
    1e0c:	1c a7       	std	Y+44, r17	; 0x2c
    }
  }
}
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	bf 90       	pop	r11
    1e20:	af 90       	pop	r10
    1e22:	9f 90       	pop	r9
    1e24:	8f 90       	pop	r8
    1e26:	7f 90       	pop	r7
    1e28:	6f 90       	pop	r6
    1e2a:	5f 90       	pop	r5
    1e2c:	4f 90       	pop	r4
    1e2e:	08 95       	ret

00001e30 <calculate_trapezoid_for_block>:
*/                                                                              

// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
// The factors represent a factor of braking and must be in the range 0.0-1.0.

static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1e30:	2f 92       	push	r2
    1e32:	3f 92       	push	r3
    1e34:	4f 92       	push	r4
    1e36:	5f 92       	push	r5
    1e38:	6f 92       	push	r6
    1e3a:	7f 92       	push	r7
    1e3c:	8f 92       	push	r8
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	68 97       	sbiw	r28, 0x18	; 24
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	1c 01       	movw	r2, r24
    1e66:	6a 01       	movw	r12, r20
    1e68:	7b 01       	movw	r14, r22
    1e6a:	28 01       	movw	r4, r16
    1e6c:	39 01       	movw	r6, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1e6e:	dc 01       	movw	r26, r24
    1e70:	51 96       	adiw	r26, 0x11	; 17
    1e72:	6d 91       	ld	r22, X+
    1e74:	7d 91       	ld	r23, X+
    1e76:	8d 91       	ld	r24, X+
    1e78:	9c 91       	ld	r25, X
    1e7a:	54 97       	sbiw	r26, 0x14	; 20
    1e7c:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1e80:	4b 01       	movw	r8, r22
    1e82:	5c 01       	movw	r10, r24
    1e84:	a7 01       	movw	r20, r14
    1e86:	96 01       	movw	r18, r12
    1e88:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1e8c:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    1e90:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    1e94:	7b 01       	movw	r14, r22
    1e96:	8c 01       	movw	r16, r24
    1e98:	f1 01       	movw	r30, r2
    1e9a:	65 a7       	std	Z+45, r22	; 0x2d
    1e9c:	76 a7       	std	Z+46, r23	; 0x2e
    1e9e:	87 a7       	std	Z+47, r24	; 0x2f
    1ea0:	90 ab       	std	Z+48, r25	; 0x30
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1ea2:	c5 01       	movw	r24, r10
    1ea4:	b4 01       	movw	r22, r8
    1ea6:	a3 01       	movw	r20, r6
    1ea8:	92 01       	movw	r18, r4
    1eaa:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1eae:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    1eb2:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    1eb6:	69 87       	std	Y+9, r22	; 0x09
    1eb8:	7a 87       	std	Y+10, r23	; 0x0a
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	d1 01       	movw	r26, r2
    1ec0:	d1 96       	adiw	r26, 0x31	; 49
    1ec2:	6d 93       	st	X+, r22
    1ec4:	7d 93       	st	X+, r23
    1ec6:	8d 93       	st	X+, r24
    1ec8:	9c 93       	st	X, r25
    1eca:	d4 97       	sbiw	r26, 0x34	; 52
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1ecc:	d5 96       	adiw	r26, 0x35	; 53
    1ece:	6d 91       	ld	r22, X+
    1ed0:	7d 91       	ld	r23, X+
    1ed2:	8d 91       	ld	r24, X+
    1ed4:	9c 91       	ld	r25, X
    1ed6:	d8 97       	sbiw	r26, 0x38	; 56
    1ed8:	28 e2       	ldi	r18, 0x28	; 40
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	0e 94 49 21 	call	0x4292	; 0x4292 <__mulsi3>
    1ee4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e7       	ldi	r20, 0x70	; 112
    1eee:	52 e4       	ldi	r21, 0x42	; 66
    1ef0:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1ef4:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    1ef8:	2b 01       	movw	r4, r22
    1efa:	3c 01       	movw	r6, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1efc:	c8 01       	movw	r24, r16
    1efe:	b7 01       	movw	r22, r14
    1f00:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1f04:	7b 01       	movw	r14, r22
    1f06:	8c 01       	movw	r16, r24
    1f08:	c3 01       	movw	r24, r6
    1f0a:	b2 01       	movw	r22, r4
    1f0c:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    1f10:	6d 83       	std	Y+5, r22	; 0x05
    1f12:	7e 83       	std	Y+6, r23	; 0x06
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
static double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f18:	c5 01       	movw	r24, r10
    1f1a:	b4 01       	movw	r22, r8
    1f1c:	a5 01       	movw	r20, r10
    1f1e:	94 01       	movw	r18, r8
    1f20:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1f24:	5b 01       	movw	r10, r22
    1f26:	6c 01       	movw	r12, r24
    1f28:	c8 01       	movw	r24, r16
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	a8 01       	movw	r20, r16
    1f2e:	97 01       	movw	r18, r14
    1f30:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1f34:	6d 87       	std	Y+13, r22	; 0x0d
    1f36:	7e 87       	std	Y+14, r23	; 0x0e
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	98 8b       	std	Y+16, r25	; 0x10
    1f3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f40:	8f 81       	ldd	r24, Y+7	; 0x07
    1f42:	98 85       	ldd	r25, Y+8	; 0x08
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    1f4c:	69 8b       	std	Y+17, r22	; 0x11
    1f4e:	7a 8b       	std	Y+18, r23	; 0x12
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
    1f52:	9c 8b       	std	Y+20, r25	; 0x14
static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1f54:	c6 01       	movw	r24, r12
    1f56:	b5 01       	movw	r22, r10
    1f58:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f5a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f5c:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f5e:	58 89       	ldd	r21, Y+16	; 0x10
    1f60:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    1f64:	29 89       	ldd	r18, Y+17	; 0x11
    1f66:	3a 89       	ldd	r19, Y+18	; 0x12
    1f68:	4b 89       	ldd	r20, Y+19	; 0x13
    1f6a:	5c 89       	ldd	r21, Y+20	; 0x14
    1f6c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1f70:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    1f74:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    1f78:	69 83       	std	Y+1, r22	; 0x01
    1f7a:	7a 83       	std	Y+2, r23	; 0x02
    1f7c:	8b 83       	std	Y+3, r24	; 0x03
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f80:	69 85       	ldd	r22, Y+9	; 0x09
    1f82:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f88:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
static double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f90:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    1f94:	6d 8b       	std	Y+21, r22	; 0x15
    1f96:	7e 8b       	std	Y+22, r23	; 0x16
    1f98:	8f 8b       	std	Y+23, r24	; 0x17
    1f9a:	98 8f       	std	Y+24, r25	; 0x18
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	95 01       	movw	r18, r10
    1fa0:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    1fa4:	7b 01       	movw	r14, r22
    1fa6:	8c 01       	movw	r16, r24
    1fa8:	70 94       	com	r7
    1faa:	60 94       	com	r6
    1fac:	50 94       	com	r5
    1fae:	40 94       	com	r4
    1fb0:	41 1c       	adc	r4, r1
    1fb2:	51 1c       	adc	r5, r1
    1fb4:	61 1c       	adc	r6, r1
    1fb6:	71 1c       	adc	r7, r1
    1fb8:	c3 01       	movw	r24, r6
    1fba:	b2 01       	movw	r22, r4
    1fbc:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    1fc0:	9b 01       	movw	r18, r22
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    1fc8:	9b 01       	movw	r18, r22
    1fca:	ac 01       	movw	r20, r24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	b7 01       	movw	r22, r14
    1fd0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    1fd4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1fd8:	f1 01       	movw	r30, r2
    1fda:	a5 84       	ldd	r10, Z+13	; 0x0d
    1fdc:	b6 84       	ldd	r11, Z+14	; 0x0e
    1fde:	c7 84       	ldd	r12, Z+15	; 0x0f
    1fe0:	d0 88       	ldd	r13, Z+16	; 0x10
    1fe2:	86 01       	movw	r16, r12
    1fe4:	75 01       	movw	r14, r10
    1fe6:	29 81       	ldd	r18, Y+1	; 0x01
    1fe8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fea:	4b 81       	ldd	r20, Y+3	; 0x03
    1fec:	5c 81       	ldd	r21, Y+4	; 0x04
    1fee:	e2 1a       	sub	r14, r18
    1ff0:	f3 0a       	sbc	r15, r19
    1ff2:	04 0b       	sbc	r16, r20
    1ff4:	15 0b       	sbc	r17, r21
    1ff6:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    1ffa:	a8 01       	movw	r20, r16
    1ffc:	97 01       	movw	r18, r14
    1ffe:	26 1b       	sub	r18, r22
    2000:	37 0b       	sbc	r19, r23
    2002:	48 0b       	sbc	r20, r24
    2004:	59 0b       	sbc	r21, r25
    2006:	da 01       	movw	r26, r20
    2008:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    200a:	57 ff       	sbrs	r21, 7
    200c:	36 c0       	rjmp	.+108    	; 0x207a <calculate_trapezoid_for_block+0x24a>
    accelerate_steps = ceil(
    200e:	c6 01       	movw	r24, r12
    2010:	b5 01       	movw	r22, r10
    2012:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	69 89       	ldd	r22, Y+17	; 0x11
    201c:	7a 89       	ldd	r23, Y+18	; 0x12
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2026:	2d 85       	ldd	r18, Y+13	; 0x0d
    2028:	3e 85       	ldd	r19, Y+14	; 0x0e
    202a:	4f 85       	ldd	r20, Y+15	; 0x0f
    202c:	58 89       	ldd	r21, Y+16	; 0x10
    202e:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    2032:	2d 89       	ldd	r18, Y+21	; 0x15
    2034:	3e 89       	ldd	r19, Y+22	; 0x16
    2036:	4f 89       	ldd	r20, Y+23	; 0x17
    2038:	58 8d       	ldd	r21, Y+24	; 0x18
    203a:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    203e:	7b 01       	movw	r14, r22
    2040:	8c 01       	movw	r16, r24
    2042:	6d 81       	ldd	r22, Y+5	; 0x05
    2044:	7e 81       	ldd	r23, Y+6	; 0x06
    2046:	8f 81       	ldd	r24, Y+7	; 0x07
    2048:	98 85       	ldd	r25, Y+8	; 0x08
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	50 e4       	ldi	r21, 0x40	; 64
    2052:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2056:	9b 01       	movw	r18, r22
    2058:	ac 01       	movw	r20, r24
    205a:	c8 01       	movw	r24, r16
    205c:	b7 01       	movw	r22, r14
    205e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2062:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    2066:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    206a:	69 83       	std	Y+1, r22	; 0x01
    206c:	7a 83       	std	Y+2, r23	; 0x02
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	4b 81       	ldd	r20, Y+3	; 0x03
    2080:	5c 81       	ldd	r21, Y+4	; 0x04
    2082:	f1 01       	movw	r30, r2
    2084:	21 af       	std	Z+57, r18	; 0x39
    2086:	32 af       	std	Z+58, r19	; 0x3a
    2088:	43 af       	std	Z+59, r20	; 0x3b
    208a:	54 af       	std	Z+60, r21	; 0x3c
  block->decelerate_after = accelerate_steps+plateau_steps;
    208c:	2d e3       	ldi	r18, 0x3D	; 61
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	22 0e       	add	r2, r18
    2092:	33 1e       	adc	r3, r19
    2094:	29 81       	ldd	r18, Y+1	; 0x01
    2096:	3a 81       	ldd	r19, Y+2	; 0x02
    2098:	4b 81       	ldd	r20, Y+3	; 0x03
    209a:	5c 81       	ldd	r21, Y+4	; 0x04
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	a4 1f       	adc	r26, r20
    20a2:	b5 1f       	adc	r27, r21
    20a4:	f1 01       	movw	r30, r2
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
}                    
    20ae:	68 96       	adiw	r28, 0x18	; 24
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	df 90       	pop	r13
    20c8:	cf 90       	pop	r12
    20ca:	bf 90       	pop	r11
    20cc:	af 90       	pop	r10
    20ce:	9f 90       	pop	r9
    20d0:	8f 90       	pop	r8
    20d2:	7f 90       	pop	r7
    20d4:	6f 90       	pop	r6
    20d6:	5f 90       	pop	r5
    20d8:	4f 90       	pop	r4
    20da:	3f 90       	pop	r3
    20dc:	2f 90       	pop	r2
    20de:	08 95       	ret

000020e0 <planner_reverse_pass_kernel>:
    return(1.0);
  }
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
static void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    20e0:	4f 92       	push	r4
    20e2:	5f 92       	push	r5
    20e4:	6f 92       	push	r6
    20e6:	7f 92       	push	r7
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <planner_reverse_pass_kernel+0x22>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <planner_reverse_pass_kernel+0x24>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	8c 01       	movw	r16, r24
    210a:	2b 01       	movw	r4, r22
  if(!current) { return; }
    210c:	61 15       	cp	r22, r1
    210e:	71 05       	cpc	r23, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <planner_reverse_pass_kernel+0x34>
    2112:	e6 c0       	rjmp	.+460    	; 0x22e0 <planner_reverse_pass_kernel+0x200>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    2114:	41 15       	cp	r20, r1
    2116:	51 05       	cpc	r21, r1
    2118:	61 f0       	breq	.+24     	; 0x2132 <planner_reverse_pass_kernel+0x52>
    exit_factor = next->entry_factor;
    211a:	da 01       	movw	r26, r20
    211c:	99 96       	adiw	r26, 0x29	; 41
    211e:	8d 91       	ld	r24, X+
    2120:	9d 91       	ld	r25, X+
    2122:	0d 90       	ld	r0, X+
    2124:	bc 91       	ld	r27, X
    2126:	a0 2d       	mov	r26, r0
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	ab 83       	std	Y+3, r26	; 0x03
    212e:	bc 83       	std	Y+4, r27	; 0x04
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <planner_reverse_pass_kernel+0x60>
  } else {
    exit_factor = factor_for_safe_speed(current);
    2132:	cb 01       	movw	r24, r22
    2134:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <factor_for_safe_speed>
    2138:	69 83       	std	Y+1, r22	; 0x01
    213a:	7a 83       	std	Y+2, r23	; 0x02
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    2140:	01 15       	cp	r16, r1
    2142:	11 05       	cpc	r17, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <planner_reverse_pass_kernel+0x68>
    2146:	c2 c0       	rjmp	.+388    	; 0x22cc <planner_reverse_pass_kernel+0x1ec>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
static double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    2148:	f8 01       	movw	r30, r16
    214a:	65 89       	ldd	r22, Z+21	; 0x15
    214c:	76 89       	ldd	r23, Z+22	; 0x16
    214e:	87 89       	ldd	r24, Z+23	; 0x17
    2150:	90 8d       	ldd	r25, Z+24	; 0x18
    2152:	d2 01       	movw	r26, r4
    2154:	55 96       	adiw	r26, 0x15	; 21
    2156:	2d 91       	ld	r18, X+
    2158:	3d 91       	ld	r19, X+
    215a:	4d 91       	ld	r20, X+
    215c:	5c 91       	ld	r21, X
    215e:	58 97       	sbiw	r26, 0x18	; 24
    2160:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    216c:	3b 01       	movw	r6, r22
    216e:	4c 01       	movw	r8, r24
    2170:	f8 01       	movw	r30, r16
    2172:	61 8d       	ldd	r22, Z+25	; 0x19
    2174:	72 8d       	ldd	r23, Z+26	; 0x1a
    2176:	83 8d       	ldd	r24, Z+27	; 0x1b
    2178:	94 8d       	ldd	r25, Z+28	; 0x1c
    217a:	d2 01       	movw	r26, r4
    217c:	59 96       	adiw	r26, 0x19	; 25
    217e:	2d 91       	ld	r18, X+
    2180:	3d 91       	ld	r19, X+
    2182:	4d 91       	ld	r20, X+
    2184:	5c 91       	ld	r21, X
    2186:	5c 97       	sbiw	r26, 0x1c	; 28
    2188:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    218c:	9b 01       	movw	r18, r22
    218e:	ac 01       	movw	r20, r24
    2190:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2194:	5b 01       	movw	r10, r22
    2196:	6c 01       	movw	r12, r24
    2198:	f8 01       	movw	r30, r16
    219a:	65 8d       	ldd	r22, Z+29	; 0x1d
    219c:	76 8d       	ldd	r23, Z+30	; 0x1e
    219e:	87 8d       	ldd	r24, Z+31	; 0x1f
    21a0:	90 a1       	ldd	r25, Z+32	; 0x20
    21a2:	d2 01       	movw	r26, r4
    21a4:	5d 96       	adiw	r26, 0x1d	; 29
    21a6:	2d 91       	ld	r18, X+
    21a8:	3d 91       	ld	r19, X+
    21aa:	4d 91       	ld	r20, X+
    21ac:	5c 91       	ld	r21, X
    21ae:	90 97       	sbiw	r26, 0x20	; 32
    21b0:	0e 94 ad 1c 	call	0x395a	; 0x395a <__subsf3>
    21b4:	9b 01       	movw	r18, r22
    21b6:	ac 01       	movw	r20, r24
    21b8:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    21bc:	7b 01       	movw	r14, r22
    21be:	8c 01       	movw	r16, r24
    21c0:	c4 01       	movw	r24, r8
    21c2:	b3 01       	movw	r22, r6
    21c4:	a6 01       	movw	r20, r12
    21c6:	95 01       	movw	r18, r10
    21c8:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    21cc:	a8 01       	movw	r20, r16
    21ce:	97 01       	movw	r18, r14
    21d0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    21d4:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <sqrt>
    21d8:	5b 01       	movw	r10, r22
    21da:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    21dc:	e0 90 b7 06 	lds	r14, 0x06B7
    21e0:	f0 90 b8 06 	lds	r15, 0x06B8
    21e4:	00 91 b9 06 	lds	r16, 0x06B9
    21e8:	10 91 ba 06 	lds	r17, 0x06BA
    21ec:	a8 01       	movw	r20, r16
    21ee:	97 01       	movw	r18, r14
    21f0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	5c f0       	brlt	.+22     	; 0x220e <planner_reverse_pass_kernel+0x12e>
    21f8:	0f 2e       	mov	r0, r31
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	6f 2e       	mov	r6, r31
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	7f 2e       	mov	r7, r31
    2202:	f0 e8       	ldi	r31, 0x80	; 128
    2204:	8f 2e       	mov	r8, r31
    2206:	ff e3       	ldi	r31, 0x3F	; 63
    2208:	9f 2e       	mov	r9, r31
    220a:	f0 2d       	mov	r31, r0
    220c:	08 c0       	rjmp	.+16     	; 0x221e <planner_reverse_pass_kernel+0x13e>
      entry_factor = (settings.max_jerk/jerk);
    220e:	c8 01       	movw	r24, r16
    2210:	b7 01       	movw	r22, r14
    2212:	a6 01       	movw	r20, r12
    2214:	95 01       	movw	r18, r10
    2216:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    221a:	3b 01       	movw	r6, r22
    221c:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    221e:	c4 01       	movw	r24, r8
    2220:	b3 01       	movw	r22, r6
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	3a 81       	ldd	r19, Y+2	; 0x02
    2226:	4b 81       	ldd	r20, Y+3	; 0x03
    2228:	5c 81       	ldd	r21, Y+4	; 0x04
    222a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__gesf2>
    222e:	18 16       	cp	r1, r24
    2230:	0c f0       	brlt	.+2      	; 0x2234 <planner_reverse_pass_kernel+0x154>
    2232:	51 c0       	rjmp	.+162    	; 0x22d6 <planner_reverse_pass_kernel+0x1f6>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    2234:	f2 01       	movw	r30, r4
    2236:	a1 a0       	ldd	r10, Z+33	; 0x21
    2238:	b2 a0       	ldd	r11, Z+34	; 0x22
    223a:	c3 a0       	ldd	r12, Z+35	; 0x23
    223c:	d4 a0       	ldd	r13, Z+36	; 0x24
    223e:	c6 01       	movw	r24, r12
    2240:	b5 01       	movw	r22, r10
    2242:	29 81       	ldd	r18, Y+1	; 0x01
    2244:	3a 81       	ldd	r19, Y+2	; 0x02
    2246:	4b 81       	ldd	r20, Y+3	; 0x03
    2248:	5c 81       	ldd	r21, Y+4	; 0x04
    224a:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    224e:	9b 01       	movw	r18, r22
    2250:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
static double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    2252:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2256:	7b 01       	movw	r14, r22
    2258:	8c 01       	movw	r16, r24
    225a:	20 91 b3 06 	lds	r18, 0x06B3
    225e:	30 91 b4 06 	lds	r19, 0x06B4
    2262:	40 91 b5 06 	lds	r20, 0x06B5
    2266:	50 91 b6 06 	lds	r21, 0x06B6
    226a:	50 58       	subi	r21, 0x80	; 128
    226c:	ca 01       	movw	r24, r20
    226e:	b9 01       	movw	r22, r18
    2270:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e7       	ldi	r20, 0x70	; 112
    227a:	52 e4       	ldi	r21, 0x42	; 66
    227c:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e7       	ldi	r20, 0x70	; 112
    2286:	52 ec       	ldi	r21, 0xC2	; 194
    2288:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    228c:	d2 01       	movw	r26, r4
    228e:	95 96       	adiw	r26, 0x25	; 37
    2290:	2d 91       	ld	r18, X+
    2292:	3d 91       	ld	r19, X+
    2294:	4d 91       	ld	r20, X+
    2296:	5c 91       	ld	r21, X
    2298:	98 97       	sbiw	r26, 0x28	; 40
    229a:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    22aa:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    22ae:	a6 01       	movw	r20, r12
    22b0:	95 01       	movw	r18, r10
    22b2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    22b6:	7b 01       	movw	r14, r22
    22b8:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    22ba:	a4 01       	movw	r20, r8
    22bc:	93 01       	movw	r18, r6
    22be:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	44 f4       	brge	.+16     	; 0x22d6 <planner_reverse_pass_kernel+0x1f6>
    22c6:	37 01       	movw	r6, r14
    22c8:	48 01       	movw	r8, r16
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <planner_reverse_pass_kernel+0x1f6>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    22cc:	c2 01       	movw	r24, r4
    22ce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <factor_for_safe_speed>
    22d2:	3b 01       	movw	r6, r22
    22d4:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    22d6:	f2 01       	movw	r30, r4
    22d8:	61 a6       	std	Z+41, r6	; 0x29
    22da:	72 a6       	std	Z+42, r7	; 0x2a
    22dc:	83 a6       	std	Z+43, r8	; 0x2b
    22de:	94 a6       	std	Z+44, r9	; 0x2c
}
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	7f 90       	pop	r7
    2302:	6f 90       	pop	r6
    2304:	5f 90       	pop	r5
    2306:	4f 90       	pop	r4
    2308:	08 95       	ret

0000230a <plan_buffer_line>:
}

// Add a new linear movement to the buffer. steps_x, _y and _z is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double feed_rate, int invert_feed_rate) {
    230a:	2f 92       	push	r2
    230c:	3f 92       	push	r3
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	a6 97       	sbiw	r28, 0x26	; 38
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	29 8f       	std	Y+25, r18	; 0x19
    2340:	3a 8f       	std	Y+26, r19	; 0x1a
    2342:	4b 8f       	std	Y+27, r20	; 0x1b
    2344:	5c 8f       	std	Y+28, r21	; 0x1c
    2346:	ed 8e       	std	Y+29, r14	; 0x1d
    2348:	fe 8e       	std	Y+30, r15	; 0x1e
    234a:	0f 8f       	std	Y+31, r16	; 0x1f
    234c:	18 a3       	std	Y+32, r17	; 0x20
    234e:	a9 a2       	std	Y+33, r10	; 0x21
    2350:	ba a2       	std	Y+34, r11	; 0x22
    2352:	cb a2       	std	Y+35, r12	; 0x23
    2354:	dc a2       	std	Y+36, r13	; 0x24
    2356:	9e a2       	std	Y+38, r9	; 0x26
    2358:	8d a2       	std	Y+37, r8	; 0x25
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    235a:	20 91 98 06 	lds	r18, 0x0698
    235e:	30 91 99 06 	lds	r19, 0x0699
    2362:	40 91 9a 06 	lds	r20, 0x069A
    2366:	50 91 9b 06 	lds	r21, 0x069B
    236a:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    236e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    2372:	5b 01       	movw	r10, r22
    2374:	6c 01       	movw	r12, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2376:	60 90 9c 06 	lds	r6, 0x069C
    237a:	70 90 9d 06 	lds	r7, 0x069D
    237e:	80 90 9e 06 	lds	r8, 0x069E
    2382:	90 90 9f 06 	lds	r9, 0x069F
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2386:	20 91 a0 06 	lds	r18, 0x06A0
    238a:	30 91 a1 06 	lds	r19, 0x06A1
    238e:	40 91 a2 06 	lds	r20, 0x06A2
    2392:	50 91 a3 06 	lds	r21, 0x06A3
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    2396:	80 91 33 05 	lds	r24, 0x0533
    239a:	28 2e       	mov	r2, r24
    239c:	33 24       	eor	r3, r3
    239e:	08 94       	sec
    23a0:	21 1c       	adc	r2, r1
    23a2:	31 1c       	adc	r3, r1
    23a4:	8f e0       	ldi	r24, 0x0F	; 15
    23a6:	28 22       	and	r2, r24
    23a8:	33 24       	eor	r3, r3
    23aa:	07 c0       	rjmp	.+14     	; 0x23ba <plan_buffer_line+0xb0>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    23ac:	83 b7       	in	r24, 0x33	; 51
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	83 bf       	out	0x33, r24	; 51
    23b2:	88 95       	sleep
    23b4:	83 b7       	in	r24, 0x33	; 51
    23b6:	8e 7f       	andi	r24, 0xFE	; 254
    23b8:	83 bf       	out	0x33, r24	; 51
    23ba:	80 91 34 05 	lds	r24, 0x0534
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	82 15       	cp	r24, r2
    23c2:	93 05       	cpc	r25, r3
    23c4:	99 f3       	breq	.-26     	; 0x23ac <plan_buffer_line+0xa2>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    23c6:	90 91 33 05 	lds	r25, 0x0533
    23ca:	81 e4       	ldi	r24, 0x41	; 65
    23cc:	98 9f       	mul	r25, r24
    23ce:	20 01       	movw	r4, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	e3 e2       	ldi	r30, 0x23	; 35
    23d4:	f1 e0       	ldi	r31, 0x01	; 1
    23d6:	4e 0e       	add	r4, r30
    23d8:	5f 1e       	adc	r5, r31
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    23da:	80 91 35 05 	lds	r24, 0x0535
    23de:	90 91 36 05 	lds	r25, 0x0536
    23e2:	a0 91 37 05 	lds	r26, 0x0537
    23e6:	b0 91 38 05 	lds	r27, 0x0538
    23ea:	86 01       	movw	r16, r12
    23ec:	75 01       	movw	r14, r10
    23ee:	e8 1a       	sub	r14, r24
    23f0:	f9 0a       	sbc	r15, r25
    23f2:	0a 0b       	sbc	r16, r26
    23f4:	1b 0b       	sbc	r17, r27
    23f6:	17 ff       	sbrs	r17, 7
    23f8:	08 c0       	rjmp	.+16     	; 0x240a <plan_buffer_line+0x100>
    23fa:	10 95       	com	r17
    23fc:	00 95       	com	r16
    23fe:	f0 94       	com	r15
    2400:	e0 94       	com	r14
    2402:	e1 1c       	adc	r14, r1
    2404:	f1 1c       	adc	r15, r1
    2406:	01 1d       	adc	r16, r1
    2408:	11 1d       	adc	r17, r1
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    240a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    240c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    240e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2410:	98 a1       	ldd	r25, Y+32	; 0x20
    2412:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2416:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    241a:	69 87       	std	Y+9, r22	; 0x09
    241c:	7a 87       	std	Y+10, r23	; 0x0a
    241e:	8b 87       	std	Y+11, r24	; 0x0b
    2420:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	a4 01       	movw	r20, r8
    242c:	93 01       	movw	r18, r6
    242e:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2432:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    2436:	6d 83       	std	Y+5, r22	; 0x05
    2438:	7e 83       	std	Y+6, r23	; 0x06
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    243e:	a9 82       	std	Y+1, r10	; 0x01
    2440:	ba 82       	std	Y+2, r11	; 0x02
    2442:	cb 82       	std	Y+3, r12	; 0x03
    2444:	dc 82       	std	Y+4, r13	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2446:	f2 01       	movw	r30, r4
    2448:	e0 82       	st	Z, r14
    244a:	f1 82       	std	Z+1, r15	; 0x01
    244c:	02 83       	std	Z+2, r16	; 0x02
    244e:	13 83       	std	Z+3, r17	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2450:	2d 81       	ldd	r18, Y+5	; 0x05
    2452:	3e 81       	ldd	r19, Y+6	; 0x06
    2454:	4f 81       	ldd	r20, Y+7	; 0x07
    2456:	58 85       	ldd	r21, Y+8	; 0x08
    2458:	80 91 39 05 	lds	r24, 0x0539
    245c:	90 91 3a 05 	lds	r25, 0x053A
    2460:	a0 91 3b 05 	lds	r26, 0x053B
    2464:	b0 91 3c 05 	lds	r27, 0x053C
    2468:	28 1b       	sub	r18, r24
    246a:	39 0b       	sbc	r19, r25
    246c:	4a 0b       	sbc	r20, r26
    246e:	5b 0b       	sbc	r21, r27
    2470:	57 ff       	sbrs	r21, 7
    2472:	07 c0       	rjmp	.+14     	; 0x2482 <plan_buffer_line+0x178>
    2474:	50 95       	com	r21
    2476:	40 95       	com	r20
    2478:	30 95       	com	r19
    247a:	21 95       	neg	r18
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	4f 4f       	sbci	r20, 0xFF	; 255
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	f2 01       	movw	r30, r4
    2484:	24 83       	std	Z+4, r18	; 0x04
    2486:	35 83       	std	Z+5, r19	; 0x05
    2488:	46 83       	std	Z+6, r20	; 0x06
    248a:	57 83       	std	Z+7, r21	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    248c:	29 85       	ldd	r18, Y+9	; 0x09
    248e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2490:	4b 85       	ldd	r20, Y+11	; 0x0b
    2492:	5c 85       	ldd	r21, Y+12	; 0x0c
    2494:	80 91 3d 05 	lds	r24, 0x053D
    2498:	90 91 3e 05 	lds	r25, 0x053E
    249c:	a0 91 3f 05 	lds	r26, 0x053F
    24a0:	b0 91 40 05 	lds	r27, 0x0540
    24a4:	28 1b       	sub	r18, r24
    24a6:	39 0b       	sbc	r19, r25
    24a8:	4a 0b       	sbc	r20, r26
    24aa:	5b 0b       	sbc	r21, r27
    24ac:	57 ff       	sbrs	r21, 7
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <plan_buffer_line+0x1b4>
    24b0:	50 95       	com	r21
    24b2:	40 95       	com	r20
    24b4:	30 95       	com	r19
    24b6:	21 95       	neg	r18
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	4f 4f       	sbci	r20, 0xFF	; 255
    24bc:	5f 4f       	sbci	r21, 0xFF	; 255
    24be:	f2 01       	movw	r30, r4
    24c0:	20 87       	std	Z+8, r18	; 0x08
    24c2:	31 87       	std	Z+9, r19	; 0x09
    24c4:	42 87       	std	Z+10, r20	; 0x0a
    24c6:	53 87       	std	Z+11, r21	; 0x0b
  block->step_event_count = max(block->steps_x, max(block->steps_y, block->steps_z));
    24c8:	e4 80       	ldd	r14, Z+4	; 0x04
    24ca:	f5 80       	ldd	r15, Z+5	; 0x05
    24cc:	06 81       	ldd	r16, Z+6	; 0x06
    24ce:	17 81       	ldd	r17, Z+7	; 0x07
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	a2 81       	ldd	r26, Z+2	; 0x02
    24d6:	b3 81       	ldd	r27, Z+3	; 0x03
    24d8:	8e 15       	cp	r24, r14
    24da:	9f 05       	cpc	r25, r15
    24dc:	a0 07       	cpc	r26, r16
    24de:	b1 07       	cpc	r27, r17
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <plan_buffer_line+0x1dc>
    24e2:	d8 01       	movw	r26, r16
    24e4:	c7 01       	movw	r24, r14
    24e6:	82 17       	cp	r24, r18
    24e8:	93 07       	cpc	r25, r19
    24ea:	a4 07       	cpc	r26, r20
    24ec:	b5 07       	cpc	r27, r21
    24ee:	10 f4       	brcc	.+4      	; 0x24f4 <plan_buffer_line+0x1ea>
    24f0:	da 01       	movw	r26, r20
    24f2:	c9 01       	movw	r24, r18
    24f4:	f2 01       	movw	r30, r4
    24f6:	85 87       	std	Z+13, r24	; 0x0d
    24f8:	96 87       	std	Z+14, r25	; 0x0e
    24fa:	a7 87       	std	Z+15, r26	; 0x0f
    24fc:	b0 8b       	std	Z+16, r27	; 0x10
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	a1 05       	cpc	r26, r1
    2502:	b1 05       	cpc	r27, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <plan_buffer_line+0x1fe>
    2506:	45 c2       	rjmp	.+1162   	; 0x2992 <plan_buffer_line+0x688>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2508:	69 81       	ldd	r22, Y+1	; 0x01
    250a:	7a 81       	ldd	r23, Y+2	; 0x02
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	20 91 35 05 	lds	r18, 0x0535
    2514:	30 91 36 05 	lds	r19, 0x0536
    2518:	40 91 37 05 	lds	r20, 0x0537
    251c:	50 91 38 05 	lds	r21, 0x0538
    2520:	62 1b       	sub	r22, r18
    2522:	73 0b       	sbc	r23, r19
    2524:	84 0b       	sbc	r24, r20
    2526:	95 0b       	sbc	r25, r21
    2528:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    252c:	20 91 98 06 	lds	r18, 0x0698
    2530:	30 91 99 06 	lds	r19, 0x0699
    2534:	40 91 9a 06 	lds	r20, 0x069A
    2538:	50 91 9b 06 	lds	r21, 0x069B
    253c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2540:	6d 8b       	std	Y+21, r22	; 0x15
    2542:	7e 8b       	std	Y+22, r23	; 0x16
    2544:	8f 8b       	std	Y+23, r24	; 0x17
    2546:	98 8f       	std	Y+24, r25	; 0x18
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2548:	6d 81       	ldd	r22, Y+5	; 0x05
    254a:	7e 81       	ldd	r23, Y+6	; 0x06
    254c:	8f 81       	ldd	r24, Y+7	; 0x07
    254e:	98 85       	ldd	r25, Y+8	; 0x08
    2550:	20 91 39 05 	lds	r18, 0x0539
    2554:	30 91 3a 05 	lds	r19, 0x053A
    2558:	40 91 3b 05 	lds	r20, 0x053B
    255c:	50 91 3c 05 	lds	r21, 0x053C
    2560:	62 1b       	sub	r22, r18
    2562:	73 0b       	sbc	r23, r19
    2564:	84 0b       	sbc	r24, r20
    2566:	95 0b       	sbc	r25, r21
    2568:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    256c:	20 91 9c 06 	lds	r18, 0x069C
    2570:	30 91 9d 06 	lds	r19, 0x069D
    2574:	40 91 9e 06 	lds	r20, 0x069E
    2578:	50 91 9f 06 	lds	r21, 0x069F
    257c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2580:	69 8b       	std	Y+17, r22	; 0x11
    2582:	7a 8b       	std	Y+18, r23	; 0x12
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	9c 8b       	std	Y+20, r25	; 0x14
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2588:	69 85       	ldd	r22, Y+9	; 0x09
    258a:	7a 85       	ldd	r23, Y+10	; 0x0a
    258c:	8b 85       	ldd	r24, Y+11	; 0x0b
    258e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2590:	20 91 3d 05 	lds	r18, 0x053D
    2594:	30 91 3e 05 	lds	r19, 0x053E
    2598:	40 91 3f 05 	lds	r20, 0x053F
    259c:	50 91 40 05 	lds	r21, 0x0540
    25a0:	62 1b       	sub	r22, r18
    25a2:	73 0b       	sbc	r23, r19
    25a4:	84 0b       	sbc	r24, r20
    25a6:	95 0b       	sbc	r25, r21
    25a8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    25ac:	20 91 a0 06 	lds	r18, 0x06A0
    25b0:	30 91 a1 06 	lds	r19, 0x06A1
    25b4:	40 91 a2 06 	lds	r20, 0x06A2
    25b8:	50 91 a3 06 	lds	r21, 0x06A3
    25bc:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    25c0:	6d 87       	std	Y+13, r22	; 0x0d
    25c2:	7e 87       	std	Y+14, r23	; 0x0e
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
    25c6:	98 8b       	std	Y+16, r25	; 0x10
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm));
    25c8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ca:	7e 89       	ldd	r23, Y+22	; 0x16
    25cc:	8f 89       	ldd	r24, Y+23	; 0x17
    25ce:	98 8d       	ldd	r25, Y+24	; 0x18
    25d0:	0e 94 20 21 	call	0x4240	; 0x4240 <square>
    25d4:	3b 01       	movw	r6, r22
    25d6:	4c 01       	movw	r8, r24
    25d8:	69 89       	ldd	r22, Y+17	; 0x11
    25da:	7a 89       	ldd	r23, Y+18	; 0x12
    25dc:	8b 89       	ldd	r24, Y+19	; 0x13
    25de:	9c 89       	ldd	r25, Y+20	; 0x14
    25e0:	0e 94 20 21 	call	0x4240	; 0x4240 <square>
    25e4:	7b 01       	movw	r14, r22
    25e6:	8c 01       	movw	r16, r24
    25e8:	6d 85       	ldd	r22, Y+13	; 0x0d
    25ea:	7e 85       	ldd	r23, Y+14	; 0x0e
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ee:	98 89       	ldd	r25, Y+16	; 0x10
    25f0:	0e 94 20 21 	call	0x4240	; 0x4240 <square>
    25f4:	5b 01       	movw	r10, r22
    25f6:	6c 01       	movw	r12, r24
    25f8:	c4 01       	movw	r24, r8
    25fa:	b3 01       	movw	r22, r6
    25fc:	a8 01       	movw	r20, r16
    25fe:	97 01       	movw	r18, r14
    2600:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    2604:	a6 01       	movw	r20, r12
    2606:	95 01       	movw	r18, r10
    2608:	0e 94 ae 1c 	call	0x395c	; 0x395c <__addsf3>
    260c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <sqrt>
    2610:	f2 01       	movw	r30, r4
    2612:	65 a3       	std	Z+37, r22	; 0x25
    2614:	76 a3       	std	Z+38, r23	; 0x26
    2616:	87 a3       	std	Z+39, r24	; 0x27
    2618:	90 a7       	std	Z+40, r25	; 0x28
	
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    261a:	2d a1       	ldd	r18, Y+37	; 0x25
    261c:	3e a1       	ldd	r19, Y+38	; 0x26
    261e:	23 2b       	or	r18, r19
    2620:	69 f4       	brne	.+26     	; 0x263c <plan_buffer_line+0x332>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2622:	29 a1       	ldd	r18, Y+33	; 0x21
    2624:	3a a1       	ldd	r19, Y+34	; 0x22
    2626:	4b a1       	ldd	r20, Y+35	; 0x23
    2628:	5c a1       	ldd	r21, Y+36	; 0x24
    262a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	34 e2       	ldi	r19, 0x24	; 36
    2632:	44 e7       	ldi	r20, 0x74	; 116
    2634:	59 e4       	ldi	r21, 0x49	; 73
    2636:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    263a:	0a c0       	rjmp	.+20     	; 0x2650 <plan_buffer_line+0x346>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    263c:	60 ec       	ldi	r22, 0xC0	; 192
    263e:	71 ee       	ldi	r23, 0xE1	; 225
    2640:	84 e6       	ldi	r24, 0x64	; 100
    2642:	9c e4       	ldi	r25, 0x4C	; 76
    2644:	29 a1       	ldd	r18, Y+33	; 0x21
    2646:	3a a1       	ldd	r19, Y+34	; 0x22
    2648:	4b a1       	ldd	r20, Y+35	; 0x23
    264a:	5c a1       	ldd	r21, Y+36	; 0x24
    264c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2650:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <lround>
    2654:	ac 01       	movw	r20, r24
    2656:	cb 01       	movw	r24, r22
    2658:	da 01       	movw	r26, r20
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    265e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    2662:	9b 01       	movw	r18, r22
    2664:	ac 01       	movw	r20, r24
    2666:	60 ec       	ldi	r22, 0xC0	; 192
    2668:	71 ee       	ldi	r23, 0xE1	; 225
    266a:	84 e6       	ldi	r24, 0x64	; 100
    266c:	9c e4       	ldi	r25, 0x4C	; 76
    266e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2672:	7b 01       	movw	r14, r22
    2674:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2676:	6d 89       	ldd	r22, Y+21	; 0x15
    2678:	7e 89       	ldd	r23, Y+22	; 0x16
    267a:	8f 89       	ldd	r24, Y+23	; 0x17
    267c:	98 8d       	ldd	r25, Y+24	; 0x18
    267e:	a8 01       	movw	r20, r16
    2680:	97 01       	movw	r18, r14
    2682:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2686:	f2 01       	movw	r30, r4
    2688:	65 8b       	std	Z+21, r22	; 0x15
    268a:	76 8b       	std	Z+22, r23	; 0x16
    268c:	87 8b       	std	Z+23, r24	; 0x17
    268e:	90 8f       	std	Z+24, r25	; 0x18
  block->speed_y = delta_y_mm * multiplier;
    2690:	69 89       	ldd	r22, Y+17	; 0x11
    2692:	7a 89       	ldd	r23, Y+18	; 0x12
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	a8 01       	movw	r20, r16
    269a:	97 01       	movw	r18, r14
    269c:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    26a0:	f2 01       	movw	r30, r4
    26a2:	61 8f       	std	Z+25, r22	; 0x19
    26a4:	72 8f       	std	Z+26, r23	; 0x1a
    26a6:	83 8f       	std	Z+27, r24	; 0x1b
    26a8:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_z = delta_z_mm * multiplier; 
    26aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    26ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	98 89       	ldd	r25, Y+16	; 0x10
    26b2:	a8 01       	movw	r20, r16
    26b4:	97 01       	movw	r18, r14
    26b6:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    26ba:	f2 01       	movw	r30, r4
    26bc:	65 8f       	std	Z+29, r22	; 0x1d
    26be:	76 8f       	std	Z+30, r23	; 0x1e
    26c0:	87 8f       	std	Z+31, r24	; 0x1f
    26c2:	90 a3       	std	Z+32, r25	; 0x20
  block->nominal_speed = block->millimeters * multiplier;
    26c4:	65 a1       	ldd	r22, Z+37	; 0x25
    26c6:	76 a1       	ldd	r23, Z+38	; 0x26
    26c8:	87 a1       	ldd	r24, Z+39	; 0x27
    26ca:	90 a5       	ldd	r25, Z+40	; 0x28
    26cc:	a8 01       	movw	r20, r16
    26ce:	97 01       	movw	r18, r14
    26d0:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    26d4:	f2 01       	movw	r30, r4
    26d6:	61 a3       	std	Z+33, r22	; 0x21
    26d8:	72 a3       	std	Z+34, r23	; 0x22
    26da:	83 a3       	std	Z+35, r24	; 0x23
    26dc:	94 a3       	std	Z+36, r25	; 0x24
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    26de:	65 85       	ldd	r22, Z+13	; 0x0d
    26e0:	76 85       	ldd	r23, Z+14	; 0x0e
    26e2:	87 85       	ldd	r24, Z+15	; 0x0f
    26e4:	90 89       	ldd	r25, Z+16	; 0x10
    26e6:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__floatsisf>
    26ea:	5b 01       	movw	r10, r22
    26ec:	6c 01       	movw	r12, r24
    26ee:	a8 01       	movw	r20, r16
    26f0:	97 01       	movw	r18, r14
    26f2:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    26f6:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    26fa:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    26fe:	3b 01       	movw	r6, r22
    2700:	4c 01       	movw	r8, r24
    2702:	f2 01       	movw	r30, r4
    2704:	61 8b       	std	Z+17, r22	; 0x11
    2706:	72 8b       	std	Z+18, r23	; 0x12
    2708:	83 8b       	std	Z+19, r24	; 0x13
    270a:	94 8b       	std	Z+20, r25	; 0x14
  block->entry_factor = 0.0;
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a0 e0       	ldi	r26, 0x00	; 0
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	81 a7       	std	Z+41, r24	; 0x29
    2716:	92 a7       	std	Z+42, r25	; 0x2a
    2718:	a3 a7       	std	Z+43, r26	; 0x2b
    271a:	b4 a7       	std	Z+44, r27	; 0x2c
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    271c:	60 91 b3 06 	lds	r22, 0x06B3
    2720:	70 91 b4 06 	lds	r23, 0x06B4
    2724:	80 91 b5 06 	lds	r24, 0x06B5
    2728:	90 91 b6 06 	lds	r25, 0x06B6
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e7       	ldi	r20, 0x70	; 112
    2732:	52 e4       	ldi	r21, 0x42	; 66
    2734:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	52 e4       	ldi	r21, 0x42	; 66
    2740:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2744:	7b 01       	movw	r14, r22
    2746:	8c 01       	movw	r16, r24
    2748:	f2 01       	movw	r30, r4
    274a:	65 a1       	ldd	r22, Z+37	; 0x25
    274c:	76 a1       	ldd	r23, Z+38	; 0x26
    274e:	87 a1       	ldd	r24, Z+39	; 0x27
    2750:	90 a5       	ldd	r25, Z+40	; 0x28
    2752:	a6 01       	movw	r20, r12
    2754:	95 01       	movw	r18, r10
    2756:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    275a:	9b 01       	movw	r18, r22
    275c:	ac 01       	movw	r20, r24
    275e:	c8 01       	movw	r24, r16
    2760:	b7 01       	movw	r22, r14
    2762:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divsf3>
    2766:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <ceil>
    276a:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    276e:	f2 01       	movw	r30, r4
    2770:	65 ab       	std	Z+53, r22	; 0x35
    2772:	76 ab       	std	Z+54, r23	; 0x36
    2774:	87 ab       	std	Z+55, r24	; 0x37
    2776:	90 af       	std	Z+56, r25	; 0x38
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2778:	80 91 41 05 	lds	r24, 0x0541
    277c:	88 23       	and	r24, r24
    277e:	59 f0       	breq	.+22     	; 0x2796 <plan_buffer_line+0x48c>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2780:	c2 01       	movw	r24, r4
    2782:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <factor_for_safe_speed>
    2786:	8b 01       	movw	r16, r22
    2788:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    278a:	c2 01       	movw	r24, r4
    278c:	b9 01       	movw	r22, r18
    278e:	a8 01       	movw	r20, r16
    2790:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <calculate_trapezoid_for_block>
    2794:	1e c0       	rjmp	.+60     	; 0x27d2 <plan_buffer_line+0x4c8>
  } else {
    block->initial_rate = block->nominal_rate;
    2796:	f2 01       	movw	r30, r4
    2798:	65 a6       	std	Z+45, r6	; 0x2d
    279a:	76 a6       	std	Z+46, r7	; 0x2e
    279c:	87 a6       	std	Z+47, r8	; 0x2f
    279e:	90 aa       	std	Z+48, r9	; 0x30
    block->final_rate = block->nominal_rate;
    27a0:	61 aa       	std	Z+49, r6	; 0x31
    27a2:	72 aa       	std	Z+50, r7	; 0x32
    27a4:	83 aa       	std	Z+51, r8	; 0x33
    27a6:	94 aa       	std	Z+52, r9	; 0x34
    block->accelerate_until = 0;
    27a8:	11 ae       	std	Z+57, r1	; 0x39
    27aa:	12 ae       	std	Z+58, r1	; 0x3a
    27ac:	13 ae       	std	Z+59, r1	; 0x3b
    27ae:	14 ae       	std	Z+60, r1	; 0x3c
    block->decelerate_after = block->step_event_count;
    27b0:	92 01       	movw	r18, r4
    27b2:	23 5c       	subi	r18, 0xC3	; 195
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	85 85       	ldd	r24, Z+13	; 0x0d
    27b8:	96 85       	ldd	r25, Z+14	; 0x0e
    27ba:	a7 85       	ldd	r26, Z+15	; 0x0f
    27bc:	b0 89       	ldd	r27, Z+16	; 0x10
    27be:	f9 01       	movw	r30, r18
    27c0:	80 83       	st	Z, r24
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	a2 83       	std	Z+2, r26	; 0x02
    27c6:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    27c8:	f2 01       	movw	r30, r4
    27ca:	15 aa       	std	Z+53, r1	; 0x35
    27cc:	16 aa       	std	Z+54, r1	; 0x36
    27ce:	17 aa       	std	Z+55, r1	; 0x37
    27d0:	10 ae       	std	Z+56, r1	; 0x38
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    27d2:	f2 01       	movw	r30, r4
    27d4:	14 86       	std	Z+12, r1	; 0x0c
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    27d6:	29 81       	ldd	r18, Y+1	; 0x01
    27d8:	3a 81       	ldd	r19, Y+2	; 0x02
    27da:	4b 81       	ldd	r20, Y+3	; 0x03
    27dc:	5c 81       	ldd	r21, Y+4	; 0x04
    27de:	80 91 35 05 	lds	r24, 0x0535
    27e2:	90 91 36 05 	lds	r25, 0x0536
    27e6:	a0 91 37 05 	lds	r26, 0x0537
    27ea:	b0 91 38 05 	lds	r27, 0x0538
    27ee:	28 17       	cp	r18, r24
    27f0:	39 07       	cpc	r19, r25
    27f2:	4a 07       	cpc	r20, r26
    27f4:	5b 07       	cpc	r21, r27
    27f6:	14 f4       	brge	.+4      	; 0x27fc <plan_buffer_line+0x4f2>
    27f8:	80 e2       	ldi	r24, 0x20	; 32
    27fa:	84 87       	std	Z+12, r24	; 0x0c
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    27fc:	2d 81       	ldd	r18, Y+5	; 0x05
    27fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2800:	4f 81       	ldd	r20, Y+7	; 0x07
    2802:	58 85       	ldd	r21, Y+8	; 0x08
    2804:	80 91 39 05 	lds	r24, 0x0539
    2808:	90 91 3a 05 	lds	r25, 0x053A
    280c:	a0 91 3b 05 	lds	r26, 0x053B
    2810:	b0 91 3c 05 	lds	r27, 0x053C
    2814:	28 17       	cp	r18, r24
    2816:	39 07       	cpc	r19, r25
    2818:	4a 07       	cpc	r20, r26
    281a:	5b 07       	cpc	r21, r27
    281c:	24 f4       	brge	.+8      	; 0x2826 <plan_buffer_line+0x51c>
    281e:	f2 01       	movw	r30, r4
    2820:	84 85       	ldd	r24, Z+12	; 0x0c
    2822:	80 64       	ori	r24, 0x40	; 64
    2824:	84 87       	std	Z+12, r24	; 0x0c
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2826:	29 85       	ldd	r18, Y+9	; 0x09
    2828:	3a 85       	ldd	r19, Y+10	; 0x0a
    282a:	4b 85       	ldd	r20, Y+11	; 0x0b
    282c:	5c 85       	ldd	r21, Y+12	; 0x0c
    282e:	80 91 3d 05 	lds	r24, 0x053D
    2832:	90 91 3e 05 	lds	r25, 0x053E
    2836:	a0 91 3f 05 	lds	r26, 0x053F
    283a:	b0 91 40 05 	lds	r27, 0x0540
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	4a 07       	cpc	r20, r26
    2844:	5b 07       	cpc	r21, r27
    2846:	24 f4       	brge	.+8      	; 0x2850 <plan_buffer_line+0x546>
    2848:	f2 01       	movw	r30, r4
    284a:	84 85       	ldd	r24, Z+12	; 0x0c
    284c:	80 68       	ori	r24, 0x80	; 128
    284e:	84 87       	std	Z+12, r24	; 0x0c
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2850:	20 92 33 05 	sts	0x0533, r2
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2854:	a5 e3       	ldi	r26, 0x35	; 53
    2856:	b5 e0       	ldi	r27, 0x05	; 5
    2858:	fe 01       	movw	r30, r28
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	8c e0       	ldi	r24, 0x0C	; 12
    285e:	01 90       	ld	r0, Z+
    2860:	0d 92       	st	X+, r0
    2862:	81 50       	subi	r24, 0x01	; 1
    2864:	e1 f7       	brne	.-8      	; 0x285e <plan_buffer_line+0x554>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2866:	80 91 41 05 	lds	r24, 0x0541
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <plan_buffer_line+0x566>
    286e:	8f c0       	rjmp	.+286    	; 0x298e <plan_buffer_line+0x684>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
static void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
    2870:	d0 90 33 05 	lds	r13, 0x0533
    2874:	ee 24       	eor	r14, r14
    2876:	ff 24       	eor	r15, r15
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	12 c0       	rjmp	.+36     	; 0x28a2 <plan_buffer_line+0x598>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    287e:	da 94       	dec	r13
    if(block_index < 0) {
    2880:	d7 fe       	sbrs	r13, 7
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <plan_buffer_line+0x57e>
    2884:	3f e0       	ldi	r19, 0x0F	; 15
    2886:	d3 2e       	mov	r13, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    2888:	fd 2d       	mov	r31, r13
    288a:	21 e4       	ldi	r18, 0x41	; 65
    288c:	f2 02       	muls	r31, r18
    288e:	80 01       	movw	r16, r0
    2890:	11 24       	eor	r1, r1
    2892:	0d 5d       	subi	r16, 0xDD	; 221
    2894:	1e 4f       	sbci	r17, 0xFE	; 254
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <planner_reverse_pass_kernel>
    289e:	a7 01       	movw	r20, r14
    28a0:	78 01       	movw	r14, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
static void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    28a2:	80 91 34 05 	lds	r24, 0x0534
    28a6:	2d 2d       	mov	r18, r13
    28a8:	33 27       	eor	r19, r19
    28aa:	27 fd       	sbrc	r18, 7
    28ac:	30 95       	com	r19
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	28 17       	cp	r18, r24
    28b2:	39 07       	cpc	r19, r25
    28b4:	21 f7       	brne	.-56     	; 0x287e <plan_buffer_line+0x574>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	b7 01       	movw	r22, r14
    28bc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <planner_reverse_pass_kernel>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
static void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
    28c0:	40 91 34 05 	lds	r20, 0x0534
    28c4:	ee 24       	eor	r14, r14
    28c6:	ff 24       	eor	r15, r15
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <plan_buffer_line+0x5ec>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    28ce:	81 e4       	ldi	r24, 0x41	; 65
    28d0:	48 02       	muls	r20, r24
    28d2:	80 01       	movw	r16, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	0d 5d       	subi	r16, 0xDD	; 221
    28d8:	1e 4f       	sbci	r17, 0xFE	; 254
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    28da:	c9 01       	movw	r24, r18
    28dc:	b7 01       	movw	r22, r14
    28de:	a8 01       	movw	r20, r16
    28e0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    28e4:	c6 01       	movw	r24, r12
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	60 e1       	ldi	r22, 0x10	; 16
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    28f0:	48 2f       	mov	r20, r24
    28f2:	97 01       	movw	r18, r14
    28f4:	78 01       	movw	r14, r16
// implements the forward pass.
static void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    28f6:	c4 2e       	mov	r12, r20
    28f8:	dd 24       	eor	r13, r13
    28fa:	c7 fc       	sbrc	r12, 7
    28fc:	d0 94       	com	r13
    28fe:	80 91 33 05 	lds	r24, 0x0533
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	c8 16       	cp	r12, r24
    2906:	d9 06       	cpc	r13, r25
    2908:	11 f7       	brne	.-60     	; 0x28ce <plan_buffer_line+0x5c4>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    290a:	c9 01       	movw	r24, r18
    290c:	b7 01       	movw	r22, r14
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <planner_forward_pass_kernel>

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
static void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
    2916:	20 91 34 05 	lds	r18, 0x0534
    291a:	ee 24       	eor	r14, r14
    291c:	ff 24       	eor	r15, r15
    291e:	20 c0       	rjmp	.+64     	; 0x2960 <plan_buffer_line+0x656>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    2920:	91 e4       	ldi	r25, 0x41	; 65
    2922:	29 02       	muls	r18, r25
    2924:	60 01       	movw	r12, r0
    2926:	11 24       	eor	r1, r1
    2928:	e3 e2       	ldi	r30, 0x23	; 35
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	ce 0e       	add	r12, r30
    292e:	df 1e       	adc	r13, r31
    if (current) {
    2930:	e1 14       	cp	r14, r1
    2932:	f1 04       	cpc	r15, r1
    2934:	69 f0       	breq	.+26     	; 0x2950 <plan_buffer_line+0x646>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2936:	f7 01       	movw	r30, r14
    2938:	41 a5       	ldd	r20, Z+41	; 0x29
    293a:	52 a5       	ldd	r21, Z+42	; 0x2a
    293c:	63 a5       	ldd	r22, Z+43	; 0x2b
    293e:	74 a5       	ldd	r23, Z+44	; 0x2c
    2940:	f6 01       	movw	r30, r12
    2942:	01 a5       	ldd	r16, Z+41	; 0x29
    2944:	12 a5       	ldd	r17, Z+42	; 0x2a
    2946:	23 a5       	ldd	r18, Z+43	; 0x2b
    2948:	34 a5       	ldd	r19, Z+44	; 0x2c
    294a:	c7 01       	movw	r24, r14
    294c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    2950:	c5 01       	movw	r24, r10
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	60 e1       	ldi	r22, 0x10	; 16
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    295c:	28 2f       	mov	r18, r24
    295e:	76 01       	movw	r14, r12
static void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2960:	a2 2e       	mov	r10, r18
    2962:	bb 24       	eor	r11, r11
    2964:	a7 fc       	sbrc	r10, 7
    2966:	b0 94       	com	r11
    2968:	80 91 33 05 	lds	r24, 0x0533
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a8 16       	cp	r10, r24
    2970:	b9 06       	cpc	r11, r25
    2972:	b1 f6       	brne	.-84     	; 0x2920 <plan_buffer_line+0x616>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2974:	c7 01       	movw	r24, r14
    2976:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <factor_for_safe_speed>
    297a:	8b 01       	movw	r16, r22
    297c:	9c 01       	movw	r18, r24
    297e:	f7 01       	movw	r30, r14
    2980:	41 a5       	ldd	r20, Z+41	; 0x29
    2982:	52 a5       	ldd	r21, Z+42	; 0x2a
    2984:	63 a5       	ldd	r22, Z+43	; 0x2b
    2986:	74 a5       	ldd	r23, Z+44	; 0x2c
    2988:	c7 01       	movw	r24, r14
    298a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <calculate_trapezoid_for_block>
  block_buffer_head = next_buffer_head;     
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
    298e:	0e 94 09 18 	call	0x3012	; 0x3012 <st_wake_up>
}
    2992:	a6 96       	adiw	r28, 0x26	; 38
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	bf 90       	pop	r11
    29b0:	af 90       	pop	r10
    29b2:	9f 90       	pop	r9
    29b4:	8f 90       	pop	r8
    29b6:	7f 90       	pop	r7
    29b8:	6f 90       	pop	r6
    29ba:	5f 90       	pop	r5
    29bc:	4f 90       	pop	r4
    29be:	3f 90       	pop	r3
    29c0:	2f 90       	pop	r2
    29c2:	08 95       	ret

000029c4 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(true);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	80 91 41 05 	lds	r24, 0x0541
    29d0:	81 11       	cpse	r24, r1
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	20 97       	sbiw	r28, 0x00	; 0
    29d8:	09 f0       	breq	.+2      	; 0x29dc <plan_set_acceleration_manager_enabled+0x18>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	98 17       	cp	r25, r24
    29de:	49 f0       	breq	.+18     	; 0x29f2 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    29e0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    29e4:	10 92 41 05 	sts	0x0541, r1
    29e8:	cd 2b       	or	r28, r29
    29ea:	19 f0       	breq	.+6      	; 0x29f2 <plan_set_acceleration_manager_enabled+0x2e>
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	80 93 41 05 	sts	0x0541, r24
  }
}
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	08 95       	ret

000029f8 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    29f8:	10 92 33 05 	sts	0x0533, r1
  block_buffer_tail = 0;
    29fc:	10 92 34 05 	sts	0x0534, r1
  plan_set_acceleration_manager_enabled(true);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	e5 e3       	ldi	r30, 0x35	; 53
    2a0c:	f5 e0       	ldi	r31, 0x05	; 5
    2a0e:	df 01       	movw	r26, r30
    2a10:	1d 92       	st	X+, r1
    2a12:	8a 95       	dec	r24
    2a14:	e9 f7       	brne	.-6      	; 0x2a10 <plan_init+0x18>
}
    2a16:	08 95       	ret

00002a18 <protocol_execute_line>:
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

// Executes one line of input according to protocol
uint8_t protocol_execute_line(char *line) {
    2a18:	fc 01       	movw	r30, r24
  if(line[0] == '$') {
    2a1a:	80 81       	ld	r24, Z
    2a1c:	84 32       	cpi	r24, 0x24	; 36
    2a1e:	21 f4       	brne	.+8      	; 0x2a28 <protocol_execute_line+0x10>
    return(settings_execute_line(line)); // Delegate lines starting with '$' to the settings module
    2a20:	cf 01       	movw	r24, r30
    2a22:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <settings_execute_line>
    2a26:	08 95       	ret
  } else {
    return(gc_execute_line(line));    // Everything else is gcode
    2a28:	cf 01       	movw	r24, r30
    2a2a:	0e 94 c7 04 	call	0x98e	; 0x98e <gc_execute_line>
  }
}
    2a2e:	08 95       	ret

00002a30 <protocol_process>:

void protocol_process()
{							// fix char read bug /@grblshield@/
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	54 c0       	rjmp	.+168    	; 0x2ae0 <protocol_process+0xb0>
  unsigned char c;			// changed to unsigned char to handle -1 condition
  while((c = serialRead()) != (unsigned char)-1) // cast
  {
    if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2a38:	e0 91 74 05 	lds	r30, 0x0574
    2a3c:	ee 23       	and	r30, r30
    2a3e:	f1 f1       	breq	.+124    	; 0x2abc <protocol_process+0x8c>
    2a40:	9a 30       	cpi	r25, 0x0A	; 10
    2a42:	11 f0       	breq	.+4      	; 0x2a48 <protocol_process+0x18>
    2a44:	9d 30       	cpi	r25, 0x0D	; 13
    2a46:	d1 f5       	brne	.+116    	; 0x2abc <protocol_process+0x8c>
      line[char_counter] = 0; // treminate string
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	ee 5b       	subi	r30, 0xBE	; 190
    2a4c:	fa 4f       	sbci	r31, 0xFA	; 250
    2a4e:	10 82       	st	Z, r1
      status_message(protocol_execute_line(line));
    2a50:	82 e4       	ldi	r24, 0x42	; 66
    2a52:	95 e0       	ldi	r25, 0x05	; 5
    2a54:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <protocol_execute_line>
    2a58:	18 2f       	mov	r17, r24
    2a5a:	c8 2f       	mov	r28, r24
    2a5c:	d0 e0       	ldi	r29, 0x00	; 0

static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {
  if (status_code == 0) {
    2a5e:	20 97       	sbiw	r28, 0x00	; 0
    2a60:	19 f4       	brne	.+6      	; 0x2a68 <protocol_process+0x38>
    printPgmString(PSTR("ok\r\n"));
    2a62:	8b e1       	ldi	r24, 0x1B	; 27
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	25 c0       	rjmp	.+74     	; 0x2ab2 <protocol_process+0x82>
  } else {
    printPgmString(PSTR("error: "));
    2a68:	83 e1       	ldi	r24, 0x13	; 19
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    switch(status_code) {          
    2a70:	12 30       	cpi	r17, 0x02	; 2
    2a72:	69 f0       	breq	.+26     	; 0x2a8e <protocol_process+0x5e>
    2a74:	13 30       	cpi	r17, 0x03	; 3
    2a76:	18 f4       	brcc	.+6      	; 0x2a7e <protocol_process+0x4e>
    2a78:	11 30       	cpi	r17, 0x01	; 1
    2a7a:	91 f4       	brne	.+36     	; 0x2aa0 <protocol_process+0x70>
    2a7c:	05 c0       	rjmp	.+10     	; 0x2a88 <protocol_process+0x58>
    2a7e:	13 30       	cpi	r17, 0x03	; 3
    2a80:	49 f0       	breq	.+18     	; 0x2a94 <protocol_process+0x64>
    2a82:	14 30       	cpi	r17, 0x04	; 4
    2a84:	69 f4       	brne	.+26     	; 0x2aa0 <protocol_process+0x70>
    2a86:	09 c0       	rjmp	.+18     	; 0x2a9a <protocol_process+0x6a>
      case STATUS_BAD_NUMBER_FORMAT:
      printPgmString(PSTR("Bad number format\r\n")); break;
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	12 c0       	rjmp	.+36     	; 0x2ab2 <protocol_process+0x82>
      case STATUS_EXPECTED_COMMAND_LETTER:
      printPgmString(PSTR("Expected command letter\r\n")); break;
    2a8e:	85 ee       	ldi	r24, 0xE5	; 229
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <protocol_process+0x82>
      case STATUS_UNSUPPORTED_STATEMENT:
      printPgmString(PSTR("Unsupported statement\r\n")); break;
    2a94:	8d ec       	ldi	r24, 0xCD	; 205
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0c c0       	rjmp	.+24     	; 0x2ab2 <protocol_process+0x82>
      case STATUS_FLOATING_POINT_ERROR:
      printPgmString(PSTR("Floating point error\r\n")); break;
    2a9a:	86 eb       	ldi	r24, 0xB6	; 182
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	09 c0       	rjmp	.+18     	; 0x2ab2 <protocol_process+0x82>
      default:
      printInteger(status_code);
    2aa0:	be 01       	movw	r22, r28
    2aa2:	88 27       	eor	r24, r24
    2aa4:	77 fd       	sbrc	r23, 7
    2aa6:	80 95       	com	r24
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	0e 94 27 03 	call	0x64e	; 0x64e <printInteger>
      printPgmString(PSTR("\r\n"));
    2aae:	83 eb       	ldi	r24, 0xB3	; 179
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
  while((c = serialRead()) != (unsigned char)-1) // cast
  {
    if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // treminate string
      status_message(protocol_execute_line(line));
      char_counter = 0; // reset line buffer index
    2ab6:	10 92 74 05 	sts	0x0574, r1
    2aba:	12 c0       	rjmp	.+36     	; 0x2ae0 <protocol_process+0xb0>
    } else if (c <= ' ') { // Throw away whitepace and control characters
    2abc:	91 32       	cpi	r25, 0x21	; 33
    2abe:	80 f0       	brcs	.+32     	; 0x2ae0 <protocol_process+0xb0>
    } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
    2ac0:	89 2f       	mov	r24, r25
    2ac2:	81 56       	subi	r24, 0x61	; 97
    2ac4:	ae 2f       	mov	r26, r30
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	ef 5f       	subi	r30, 0xFF	; 255
    2aca:	8a 31       	cpi	r24, 0x1A	; 26
    2acc:	20 f4       	brcc	.+8      	; 0x2ad6 <protocol_process+0xa6>
      line[char_counter++] = c-'a'+'A';
    2ace:	ae 5b       	subi	r26, 0xBE	; 190
    2ad0:	ba 4f       	sbci	r27, 0xFA	; 250
    2ad2:	90 52       	subi	r25, 0x20	; 32
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <protocol_process+0xaa>
    } else {
      line[char_counter++] = c;
    2ad6:	ae 5b       	subi	r26, 0xBE	; 190
    2ad8:	ba 4f       	sbci	r27, 0xFA	; 250
    2ada:	9c 93       	st	X, r25
    2adc:	e0 93 74 05 	sts	0x0574, r30
}

void protocol_process()
{							// fix char read bug /@grblshield@/
  unsigned char c;			// changed to unsigned char to handle -1 condition
  while((c = serialRead()) != (unsigned char)-1) // cast
    2ae0:	0e 94 2f 02 	call	0x45e	; 0x45e <serialRead>
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <protocol_process+0xbc>
    2aea:	a6 cf       	rjmp	.-180    	; 0x2a38 <protocol_process+0x8>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	08 95       	ret

00002af4 <protocol_init>:
  }
}

void protocol_init() 
{
  beginSerial(BAUD_RATE);  
    2af4:	60 e8       	ldi	r22, 0x80	; 128
    2af6:	75 e2       	ldi	r23, 0x25	; 37
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 df 01 	call	0x3be	; 0x3be <beginSerial>
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION));
    2b00:	83 e2       	ldi	r24, 0x23	; 35
    2b02:	91 e0       	ldi	r25, 0x01	; 1
    2b04:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
  printPgmString(PSTR("\r\n"));  
    2b08:	80 e2       	ldi	r24, 0x20	; 32
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
}
    2b10:	08 95       	ret

00002b12 <settings_reset>:
#define DEFAULT_MAX_JERK 300.0
#define DEFAULT_STEPPING_INVERT_MASK 0x1C	//@grblshield/
//#define DEFAULT_STEPPING_INVERT_MASK 0

void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2b12:	84 ef       	ldi	r24, 0xF4	; 244
    2b14:	99 ef       	ldi	r25, 0xF9	; 249
    2b16:	ac e3       	ldi	r26, 0x3C	; 60
    2b18:	b4 e4       	ldi	r27, 0x44	; 68
    2b1a:	80 93 98 06 	sts	0x0698, r24
    2b1e:	90 93 99 06 	sts	0x0699, r25
    2b22:	a0 93 9a 06 	sts	0x069A, r26
    2b26:	b0 93 9b 06 	sts	0x069B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2b2a:	80 93 9c 06 	sts	0x069C, r24
    2b2e:	90 93 9d 06 	sts	0x069D, r25
    2b32:	a0 93 9e 06 	sts	0x069E, r26
    2b36:	b0 93 9f 06 	sts	0x069F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2b3a:	80 93 a0 06 	sts	0x06A0, r24
    2b3e:	90 93 a1 06 	sts	0x06A1, r25
    2b42:	a0 93 a2 06 	sts	0x06A2, r26
    2b46:	b0 93 a3 06 	sts	0x06A3, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2b4a:	8e e1       	ldi	r24, 0x1E	; 30
    2b4c:	80 93 a5 06 	sts	0x06A5, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	aa ef       	ldi	r26, 0xFA	; 250
    2b56:	b3 e4       	ldi	r27, 0x43	; 67
    2b58:	80 93 a6 06 	sts	0x06A6, r24
    2b5c:	90 93 a7 06 	sts	0x06A7, r25
    2b60:	a0 93 a8 06 	sts	0x06A8, r26
    2b64:	b0 93 a9 06 	sts	0x06A9, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2b68:	80 93 aa 06 	sts	0x06AA, r24
    2b6c:	90 93 ab 06 	sts	0x06AB, r25
    2b70:	a0 93 ac 06 	sts	0x06AC, r26
    2b74:	b0 93 ad 06 	sts	0x06AD, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a8 e4       	ldi	r26, 0x48	; 72
    2b7e:	b2 e4       	ldi	r27, 0x42	; 66
    2b80:	80 93 b3 06 	sts	0x06B3, r24
    2b84:	90 93 b4 06 	sts	0x06B4, r25
    2b88:	a0 93 b5 06 	sts	0x06B5, r26
    2b8c:	b0 93 b6 06 	sts	0x06B6, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2b90:	8d ec       	ldi	r24, 0xCD	; 205
    2b92:	9c ec       	ldi	r25, 0xCC	; 204
    2b94:	ac ec       	ldi	r26, 0xCC	; 204
    2b96:	bd e3       	ldi	r27, 0x3D	; 61
    2b98:	80 93 af 06 	sts	0x06AF, r24
    2b9c:	90 93 b0 06 	sts	0x06B0, r25
    2ba0:	a0 93 b1 06 	sts	0x06B1, r26
    2ba4:	b0 93 b2 06 	sts	0x06B2, r27
  settings.invert_mask = DEFAULT_STEPPING_INVERT_MASK;
    2ba8:	8c e1       	ldi	r24, 0x1C	; 28
    2baa:	80 93 ae 06 	sts	0x06AE, r24
  settings.max_jerk = DEFAULT_MAX_JERK;
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a6 e9       	ldi	r26, 0x96	; 150
    2bb4:	b3 e4       	ldi	r27, 0x43	; 67
    2bb6:	80 93 b7 06 	sts	0x06B7, r24
    2bba:	90 93 b8 06 	sts	0x06B8, r25
    2bbe:	a0 93 b9 06 	sts	0x06B9, r26
    2bc2:	b0 93 ba 06 	sts	0x06BA, r27
}
    2bc6:	08 95       	ret

00002bc8 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2bd0:	82 30       	cpi	r24, 0x02	; 2
    2bd2:	81 f4       	brne	.+32     	; 0x2bf4 <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2bd4:	88 e9       	ldi	r24, 0x98	; 152
    2bd6:	96 e0       	ldi	r25, 0x06	; 6
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	43 e2       	ldi	r20, 0x23	; 35
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <memcpy_from_eeprom_with_checksum>
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	89 2b       	or	r24, r25
    2be8:	09 f4       	brne	.+2      	; 0x2bec <read_settings+0x24>
    2bea:	21 e0       	ldi	r18, 0x01	; 1
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	28 27       	eor	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	29 c0       	rjmp	.+82     	; 0x2c46 <read_settings+0x7e>
      return(false);
    }
  } else if (version == 1) {
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	29 f5       	brne	.+74     	; 0x2c42 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2bf8:	88 e9       	ldi	r24, 0x98	; 152
    2bfa:	96 e0       	ldi	r25, 0x06	; 6
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	4b e1       	ldi	r20, 0x1B	; 27
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	0e 94 e7 03 	call	0x7ce	; 0x7ce <memcpy_from_eeprom_with_checksum>
    2c08:	89 2b       	or	r24, r25
    2c0a:	d9 f0       	breq	.+54     	; 0x2c42 <read_settings+0x7a>
      return(false);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a8 e4       	ldi	r26, 0x48	; 72
    2c12:	b2 e4       	ldi	r27, 0x42	; 66
    2c14:	80 93 b3 06 	sts	0x06B3, r24
    2c18:	90 93 b4 06 	sts	0x06B4, r25
    2c1c:	a0 93 b5 06 	sts	0x06B5, r26
    2c20:	b0 93 b6 06 	sts	0x06B6, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a6 e9       	ldi	r26, 0x96	; 150
    2c2a:	b3 e4       	ldi	r27, 0x43	; 67
    2c2c:	80 93 b7 06 	sts	0x06B7, r24
    2c30:	90 93 b8 06 	sts	0x06B8, r25
    2c34:	a0 93 b9 06 	sts	0x06B9, r26
    2c38:	b0 93 ba 06 	sts	0x06BA, r27
    2c3c:	21 e0       	ldi	r18, 0x01	; 1
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <read_settings+0x7e>
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
  } else {      
    return(false);
  }
  return(true);
}
    2c46:	c9 01       	movw	r24, r18
    2c48:	08 95       	ret

00002c4a <write_settings>:
  settings_store_setting(parameter, value);
  return(STATUS_OK);
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	0e 94 83 03 	call	0x706	; 0x706 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	68 e9       	ldi	r22, 0x98	; 152
    2c5a:	76 e0       	ldi	r23, 0x06	; 6
    2c5c:	43 e2       	ldi	r20, 0x23	; 35
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	0e 94 9e 03 	call	0x73c	; 0x73c <memcpy_to_eeprom_with_checksum>
}
    2c64:	08 95       	ret

00002c66 <settings_store_setting>:
  }
  return(true);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2c66:	ef 92       	push	r14
    2c68:	ff 92       	push	r15
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	ec 01       	movw	r28, r24
    2c74:	7a 01       	movw	r14, r20
    2c76:	8b 01       	movw	r16, r22
  switch(parameter) {
    2c78:	85 30       	cpi	r24, 0x05	; 5
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <settings_store_setting+0x1a>
    2c7e:	46 c0       	rjmp	.+140    	; 0x2d0c <settings_store_setting+0xa6>
    2c80:	86 30       	cpi	r24, 0x06	; 6
    2c82:	91 05       	cpc	r25, r1
    2c84:	4c f4       	brge	.+18     	; 0x2c98 <settings_store_setting+0x32>
    2c86:	83 30       	cpi	r24, 0x03	; 3
    2c88:	91 05       	cpc	r25, r1
    2c8a:	71 f1       	breq	.+92     	; 0x2ce8 <settings_store_setting+0x82>
    2c8c:	84 30       	cpi	r24, 0x04	; 4
    2c8e:	91 05       	cpc	r25, r1
    2c90:	a4 f5       	brge	.+104    	; 0x2cfa <settings_store_setting+0x94>
    2c92:	97 ff       	sbrs	r25, 7
    2c94:	11 c0       	rjmp	.+34     	; 0x2cb8 <settings_store_setting+0x52>
    2c96:	6a c0       	rjmp	.+212    	; 0x2d6c <settings_store_setting+0x106>
    2c98:	87 30       	cpi	r24, 0x07	; 7
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <settings_store_setting+0x3a>
    2c9e:	48 c0       	rjmp	.+144    	; 0x2d30 <settings_store_setting+0xca>
    2ca0:	87 30       	cpi	r24, 0x07	; 7
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	e4 f1       	brlt	.+120    	; 0x2d1e <settings_store_setting+0xb8>
    2ca6:	88 30       	cpi	r24, 0x08	; 8
    2ca8:	91 05       	cpc	r25, r1
    2caa:	09 f4       	brne	.+2      	; 0x2cae <settings_store_setting+0x48>
    2cac:	4a c0       	rjmp	.+148    	; 0x2d42 <settings_store_setting+0xdc>
    2cae:	89 30       	cpi	r24, 0x09	; 9
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <settings_store_setting+0x50>
    2cb4:	5b c0       	rjmp	.+182    	; 0x2d6c <settings_store_setting+0x106>
    2cb6:	4e c0       	rjmp	.+156    	; 0x2d54 <settings_store_setting+0xee>
    case 0: case 1: case 2:
    if (value <= 0.0) {
    2cb8:	cb 01       	movw	r24, r22
    2cba:	ba 01       	movw	r22, r20
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	1c f0       	brlt	.+6      	; 0x2cd2 <settings_store_setting+0x6c>
      printPgmString(PSTR("Steps/mm must be > 0.0\r\n"));
    2ccc:	82 eb       	ldi	r24, 0xB2	; 178
    2cce:	91 e0       	ldi	r25, 0x01	; 1
    2cd0:	54 c0       	rjmp	.+168    	; 0x2d7a <settings_store_setting+0x114>
      return;
    }
    settings.steps_per_mm[parameter] = value; break;
    2cd2:	cc 0f       	add	r28, r28
    2cd4:	dd 1f       	adc	r29, r29
    2cd6:	cc 0f       	add	r28, r28
    2cd8:	dd 1f       	adc	r29, r29
    2cda:	c8 56       	subi	r28, 0x68	; 104
    2cdc:	d9 4f       	sbci	r29, 0xF9	; 249
    2cde:	e8 82       	st	Y, r14
    2ce0:	f9 82       	std	Y+1, r15	; 0x01
    2ce2:	0a 83       	std	Y+2, r16	; 0x02
    2ce4:	1b 83       	std	Y+3, r17	; 0x03
    2ce6:	45 c0       	rjmp	.+138    	; 0x2d72 <settings_store_setting+0x10c>
    case 3: settings.pulse_microseconds = round(value); break;
    2ce8:	cb 01       	movw	r24, r22
    2cea:	ba 01       	movw	r22, r20
    2cec:	0e 94 b8 20 	call	0x4170	; 0x4170 <round>
    2cf0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    2cf4:	60 93 a5 06 	sts	0x06A5, r22
    2cf8:	3c c0       	rjmp	.+120    	; 0x2d72 <settings_store_setting+0x10c>
    case 4: settings.default_feed_rate = value; break;
    2cfa:	40 93 a6 06 	sts	0x06A6, r20
    2cfe:	50 93 a7 06 	sts	0x06A7, r21
    2d02:	60 93 a8 06 	sts	0x06A8, r22
    2d06:	70 93 a9 06 	sts	0x06A9, r23
    2d0a:	33 c0       	rjmp	.+102    	; 0x2d72 <settings_store_setting+0x10c>
    case 5: settings.default_seek_rate = value; break;
    2d0c:	40 93 aa 06 	sts	0x06AA, r20
    2d10:	50 93 ab 06 	sts	0x06AB, r21
    2d14:	60 93 ac 06 	sts	0x06AC, r22
    2d18:	70 93 ad 06 	sts	0x06AD, r23
    2d1c:	2a c0       	rjmp	.+84     	; 0x2d72 <settings_store_setting+0x10c>
    case 6: settings.mm_per_arc_segment = value; break;
    2d1e:	40 93 af 06 	sts	0x06AF, r20
    2d22:	50 93 b0 06 	sts	0x06B0, r21
    2d26:	60 93 b1 06 	sts	0x06B1, r22
    2d2a:	70 93 b2 06 	sts	0x06B2, r23
    2d2e:	21 c0       	rjmp	.+66     	; 0x2d72 <settings_store_setting+0x10c>
    case 7: settings.invert_mask = trunc(value); break;
    2d30:	cb 01       	movw	r24, r22
    2d32:	ba 01       	movw	r22, r20
    2d34:	0e 94 23 21 	call	0x4246	; 0x4246 <trunc>
    2d38:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__fixunssfsi>
    2d3c:	60 93 ae 06 	sts	0x06AE, r22
    2d40:	18 c0       	rjmp	.+48     	; 0x2d72 <settings_store_setting+0x10c>
    case 8: settings.acceleration = value; break;
    2d42:	40 93 b3 06 	sts	0x06B3, r20
    2d46:	50 93 b4 06 	sts	0x06B4, r21
    2d4a:	60 93 b5 06 	sts	0x06B5, r22
    2d4e:	70 93 b6 06 	sts	0x06B6, r23
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <settings_store_setting+0x10c>
    case 9: settings.max_jerk = fabs(value); break;
    2d54:	db 01       	movw	r26, r22
    2d56:	ca 01       	movw	r24, r20
    2d58:	bf 77       	andi	r27, 0x7F	; 127
    2d5a:	80 93 b7 06 	sts	0x06B7, r24
    2d5e:	90 93 b8 06 	sts	0x06B8, r25
    2d62:	a0 93 b9 06 	sts	0x06B9, r26
    2d66:	b0 93 ba 06 	sts	0x06BA, r27
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <settings_store_setting+0x10c>
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2d6c:	8e e9       	ldi	r24, 0x9E	; 158
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	04 c0       	rjmp	.+8      	; 0x2d7a <settings_store_setting+0x114>
      return;
  }
  write_settings();
    2d72:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d76:	89 e8       	ldi	r24, 0x89	; 137
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
}
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	08 95       	ret

00002d8c <settings_dump>:
  settings.invert_mask = DEFAULT_STEPPING_INVERT_MASK;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$0 = ")); printFloat(settings.steps_per_mm[X_AXIS]);
    2d8c:	85 e5       	ldi	r24, 0x55	; 85
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2d94:	60 91 98 06 	lds	r22, 0x0698
    2d98:	70 91 99 06 	lds	r23, 0x0699
    2d9c:	80 91 9a 06 	lds	r24, 0x069A
    2da0:	90 91 9b 06 	lds	r25, 0x069B
    2da4:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n$1 = ")); printFloat(settings.steps_per_mm[Y_AXIS]);
    2da8:	80 e4       	ldi	r24, 0x40	; 64
    2daa:	93 e0       	ldi	r25, 0x03	; 3
    2dac:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2db0:	60 91 9c 06 	lds	r22, 0x069C
    2db4:	70 91 9d 06 	lds	r23, 0x069D
    2db8:	80 91 9e 06 	lds	r24, 0x069E
    2dbc:	90 91 9f 06 	lds	r25, 0x069F
    2dc0:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n$2 = ")); printFloat(settings.steps_per_mm[Z_AXIS]);
    2dc4:	8b e2       	ldi	r24, 0x2B	; 43
    2dc6:	93 e0       	ldi	r25, 0x03	; 3
    2dc8:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2dcc:	60 91 a0 06 	lds	r22, 0x06A0
    2dd0:	70 91 a1 06 	lds	r23, 0x06A1
    2dd4:	80 91 a2 06 	lds	r24, 0x06A2
    2dd8:	90 91 a3 06 	lds	r25, 0x06A3
    2ddc:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n$3 = ")); printInteger(settings.pulse_microseconds);
    2de0:	86 e1       	ldi	r24, 0x16	; 22
    2de2:	93 e0       	ldi	r25, 0x03	; 3
    2de4:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2de8:	60 91 a5 06 	lds	r22, 0x06A5
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 27 03 	call	0x64e	; 0x64e <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n$4 = ")); printFloat(settings.default_feed_rate);
    2df6:	84 ef       	ldi	r24, 0xF4	; 244
    2df8:	92 e0       	ldi	r25, 0x02	; 2
    2dfa:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2dfe:	60 91 a6 06 	lds	r22, 0x06A6
    2e02:	70 91 a7 06 	lds	r23, 0x06A7
    2e06:	80 91 a8 06 	lds	r24, 0x06A8
    2e0a:	90 91 a9 06 	lds	r25, 0x06A9
    2e0e:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n$5 = ")); printFloat(settings.default_seek_rate);
    2e12:	81 ed       	ldi	r24, 0xD1	; 209
    2e14:	92 e0       	ldi	r25, 0x02	; 2
    2e16:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2e1a:	60 91 aa 06 	lds	r22, 0x06AA
    2e1e:	70 91 ab 06 	lds	r23, 0x06AB
    2e22:	80 91 ac 06 	lds	r24, 0x06AC
    2e26:	90 91 ad 06 	lds	r25, 0x06AD
    2e2a:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n$6 = ")); printFloat(settings.mm_per_arc_segment);
    2e2e:	8e ea       	ldi	r24, 0xAE	; 174
    2e30:	92 e0       	ldi	r25, 0x02	; 2
    2e32:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2e36:	60 91 af 06 	lds	r22, 0x06AF
    2e3a:	70 91 b0 06 	lds	r23, 0x06B0
    2e3e:	80 91 b1 06 	lds	r24, 0x06B1
    2e42:	90 91 b2 06 	lds	r25, 0x06B2
    2e46:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n$7 = ")); printInteger(settings.invert_mask); 
    2e4a:	85 e9       	ldi	r24, 0x95	; 149
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2e52:	60 91 ae 06 	lds	r22, 0x06AE
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 27 03 	call	0x64e	; 0x64e <printInteger>
  printPgmString(PSTR(" (step port invert mask. binary = ")); printIntegerInBase(settings.invert_mask, 2);  
    2e60:	82 e7       	ldi	r24, 0x72	; 114
    2e62:	92 e0       	ldi	r25, 0x02	; 2
    2e64:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2e68:	60 91 ae 06 	lds	r22, 0x06AE
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	22 e0       	ldi	r18, 0x02	; 2
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 9a 02 	call	0x534	; 0x534 <printIntegerInBase>
  printPgmString(PSTR(")\r\n$8 = ")); printFloat(settings.acceleration);
    2e7e:	89 e6       	ldi	r24, 0x69	; 105
    2e80:	92 e0       	ldi	r25, 0x02	; 2
    2e82:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2e86:	60 91 b3 06 	lds	r22, 0x06B3
    2e8a:	70 91 b4 06 	lds	r23, 0x06B4
    2e8e:	80 91 b5 06 	lds	r24, 0x06B5
    2e92:	90 91 b6 06 	lds	r25, 0x06B6
    2e96:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n$9 = ")); printFloat(settings.max_jerk);
    2e9a:	86 e4       	ldi	r24, 0x46	; 70
    2e9c:	92 e0       	ldi	r25, 0x02	; 2
    2e9e:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2ea2:	60 91 b7 06 	lds	r22, 0x06B7
    2ea6:	70 91 b8 06 	lds	r23, 0x06B8
    2eaa:	80 91 b9 06 	lds	r24, 0x06B9
    2eae:	90 91 ba 06 	lds	r25, 0x06BA
    2eb2:	0e 94 42 03 	call	0x684	; 0x684 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)"));
    2eb6:	80 e1       	ldi	r24, 0x10	; 16
    2eb8:	92 e0       	ldi	r25, 0x02	; 2
    2eba:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2ebe:	8b ec       	ldi	r24, 0xCB	; 203
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
}
    2ec6:	08 95       	ret

00002ec8 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2ec8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <read_settings>
    2ecc:	89 2b       	or	r24, r25
    2ece:	29 f0       	breq	.+10     	; 0x2eda <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    2ed0:	8a e6       	ldi	r24, 0x6A	; 106
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    2ed8:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    2eda:	8f e2       	ldi	r24, 0x2F	; 47
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	0e 94 8b 02 	call	0x516	; 0x516 <printPgmString>
    settings_reset();
    2ee2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <settings_reset>
    write_settings();
    2ee6:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <write_settings>
    settings_dump();
    2eea:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <settings_dump>
    2eee:	08 95       	ret

00002ef0 <settings_execute_line>:
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)"));
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

// Parameter lines are on the form '$4=374.3' or '$' to dump current settings
uint8_t settings_execute_line(char *line) {
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	0f 93       	push	r16
    2ef6:	1f 93       	push	r17
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	29 97       	sbiw	r28, 0x09	; 9
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	8c 01       	movw	r16, r24
  uint8_t char_counter = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	89 83       	std	Y+1, r24	; 0x01
  double parameter, value;
  if(line[0] != '$') { 
    2f12:	f8 01       	movw	r30, r16
    2f14:	80 81       	ld	r24, Z
    2f16:	84 32       	cpi	r24, 0x24	; 36
    2f18:	e1 f5       	brne	.+120    	; 0x2f92 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(line[char_counter] == 0) { 
    2f1a:	81 81       	ldd	r24, Z+1	; 0x01
    2f1c:	88 23       	and	r24, r24
    2f1e:	19 f4       	brne	.+6      	; 0x2f26 <settings_execute_line+0x36>
    settings_dump(); return(STATUS_OK); 
    2f20:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <settings_dump>
    2f24:	34 c0       	rjmp	.+104    	; 0x2f8e <settings_execute_line+0x9e>
  }
  if(!read_double(line, &char_counter, &parameter)) {
    2f26:	c8 01       	movw	r24, r16
    2f28:	7e 01       	movw	r14, r28
    2f2a:	08 94       	sec
    2f2c:	e1 1c       	adc	r14, r1
    2f2e:	f1 1c       	adc	r15, r1
    2f30:	b7 01       	movw	r22, r14
    2f32:	ae 01       	movw	r20, r28
    2f34:	4e 5f       	subi	r20, 0xFE	; 254
    2f36:	5f 4f       	sbci	r21, 0xFF	; 255
    2f38:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <read_double>
    2f3c:	89 2b       	or	r24, r25
    2f3e:	59 f1       	breq	.+86     	; 0x2f96 <settings_execute_line+0xa6>
    return(STATUS_BAD_NUMBER_FORMAT);
  };
  if(line[char_counter++] != '=') { 
    2f40:	99 81       	ldd	r25, Y+1	; 0x01
    2f42:	f8 01       	movw	r30, r16
    2f44:	e9 0f       	add	r30, r25
    2f46:	f1 1d       	adc	r31, r1
    2f48:	80 81       	ld	r24, Z
    2f4a:	8d 33       	cpi	r24, 0x3D	; 61
    2f4c:	11 f5       	brne	.+68     	; 0x2f92 <settings_execute_line+0xa2>
    2f4e:	9f 5f       	subi	r25, 0xFF	; 255
    2f50:	99 83       	std	Y+1, r25	; 0x01
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(!read_double(line, &char_counter, &value)) {
    2f52:	c8 01       	movw	r24, r16
    2f54:	b7 01       	movw	r22, r14
    2f56:	ae 01       	movw	r20, r28
    2f58:	4a 5f       	subi	r20, 0xFA	; 250
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <read_double>
    2f60:	89 2b       	or	r24, r25
    2f62:	c9 f0       	breq	.+50     	; 0x2f96 <settings_execute_line+0xa6>
    return(STATUS_BAD_NUMBER_FORMAT);
  }
  if(line[char_counter] != 0) { 
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	08 0f       	add	r16, r24
    2f68:	11 1d       	adc	r17, r1
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 81       	ld	r24, Z
    2f6e:	88 23       	and	r24, r24
    2f70:	81 f4       	brne	.+32     	; 0x2f92 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  settings_store_setting(parameter, value);
    2f72:	6a 81       	ldd	r22, Y+2	; 0x02
    2f74:	7b 81       	ldd	r23, Y+3	; 0x03
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7a:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fixsfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	4e 81       	ldd	r20, Y+6	; 0x06
    2f84:	5f 81       	ldd	r21, Y+7	; 0x07
    2f86:	68 85       	ldd	r22, Y+8	; 0x08
    2f88:	79 85       	ldd	r23, Y+9	; 0x09
    2f8a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <settings_store_setting>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <settings_execute_line+0xa8>
  return(STATUS_OK);
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <settings_execute_line+0xa8>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
}
    2f98:	29 96       	adiw	r28, 0x09	; 9
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	08 95       	ret

00002fb2 <spindle_run>:
{
  spindle_run(0, 0);
}

void spindle_run(int direction, uint32_t rpm) 
{
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	ec 01       	movw	r28, r24
  if (direction != current_direction) {
    2fb8:	80 91 75 05 	lds	r24, 0x0575
    2fbc:	90 91 76 05 	lds	r25, 0x0576
    2fc0:	c8 17       	cp	r28, r24
    2fc2:	d9 07       	cpc	r29, r25
    2fc4:	89 f0       	breq	.+34     	; 0x2fe8 <spindle_run+0x36>
    st_synchronize();
    2fc6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <st_synchronize>
    if(direction) {
    2fca:	20 97       	sbiw	r28, 0x00	; 0
    2fcc:	41 f0       	breq	.+16     	; 0x2fde <spindle_run+0x2c>
      if(direction > 0) {
    2fce:	1c 16       	cp	r1, r28
    2fd0:	1d 06       	cpc	r1, r29
    2fd2:	14 f4       	brge	.+4      	; 0x2fd8 <spindle_run+0x26>
        SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2fd4:	2d 98       	cbi	0x05, 5	; 5
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <spindle_run+0x28>
      } else {
        SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2fd8:	2d 9a       	sbi	0x05, 5	; 5
      }
      SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2fda:	2c 9a       	sbi	0x05, 4	; 5
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <spindle_run+0x2e>
    } else {
      SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);      
    2fde:	2c 98       	cbi	0x05, 4	; 5
    }
    current_direction = direction;
    2fe0:	d0 93 76 05 	sts	0x0576, r29
    2fe4:	c0 93 75 05 	sts	0x0575, r28
  }
}
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	08 95       	ret

00002fee <spindle_stop>:

void spindle_stop()
{
  spindle_run(0, 0);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <spindle_run>
}
    2ffe:	08 95       	ret

00003000 <spindle_init>:

static int current_direction;

void spindle_init()
{
  spindle_run(0, 0);
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <spindle_run>
}
    3010:	08 95       	ret

00003012 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

static void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
    3012:	28 98       	cbi	0x05, 0	; 5
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    3014:	ef e6       	ldi	r30, 0x6F	; 111
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	82 60       	ori	r24, 0x02	; 2
    301c:	80 83       	st	Z, r24
}
    301e:	08 95       	ret

00003020 <st_disable_steppers>:

void st_disable_steppers() {	//@grblshield/
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    3020:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3022:	ef e6       	ldi	r30, 0x6F	; 111
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8d 7f       	andi	r24, 0xFD	; 253
    302a:	80 83       	st	Z, r24
}
    302c:	08 95       	ret

0000302e <__vector_9>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    302e:	1f 92       	push	r1
    3030:	0f 92       	push	r0
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	0f 92       	push	r0
    3036:	11 24       	eor	r1, r1
    3038:	8f 93       	push	r24
    303a:	9f 93       	push	r25
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (settings.invert_mask & STEP_MASK); 
    303c:	9b b1       	in	r25, 0x0b	; 11
    303e:	80 91 ae 06 	lds	r24, 0x06AE
    3042:	8c 71       	andi	r24, 0x1C	; 28
    3044:	93 7e       	andi	r25, 0xE3	; 227
    3046:	89 2b       	or	r24, r25
    3048:	8b b9       	out	0x0b, r24	; 11
}
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	0f 90       	pop	r0
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	0f 90       	pop	r0
    3054:	1f 90       	pop	r1
    3056:	18 95       	reti

00003058 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

static void set_step_events_per_minute(uint32_t steps_per_minute) {
    3058:	9b 01       	movw	r18, r22
    305a:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    305c:	20 3b       	cpi	r18, 0xB0	; 176
    305e:	84 e0       	ldi	r24, 0x04	; 4
    3060:	38 07       	cpc	r19, r24
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	48 07       	cpc	r20, r24
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	58 07       	cpc	r21, r24
    306a:	20 f4       	brcc	.+8      	; 0x3074 <set_step_events_per_minute+0x1c>
    306c:	20 eb       	ldi	r18, 0xB0	; 176
    306e:	34 e0       	ldi	r19, 0x04	; 4
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	70 e7       	ldi	r23, 0x70	; 112
    3078:	88 e3       	ldi	r24, 0x38	; 56
    307a:	99 e3       	ldi	r25, 0x39	; 57
    307c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__udivmodsi4>
    3080:	c9 01       	movw	r24, r18
    3082:	da 01       	movw	r26, r20
static uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    3084:	80 30       	cpi	r24, 0x00	; 0
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	92 07       	cpc	r25, r18
    308a:	21 e0       	ldi	r18, 0x01	; 1
    308c:	a2 07       	cpc	r26, r18
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	b2 07       	cpc	r27, r18
    3092:	38 f4       	brcc	.+14     	; 0x30a2 <set_step_events_per_minute+0x4a>
		ceiling = cycles;
    3094:	fc 01       	movw	r30, r24
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3096:	9c 01       	movw	r18, r24
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	31 c0       	rjmp	.+98     	; 0x3104 <set_step_events_per_minute+0xac>
	} else if (cycles <= 0x7ffffL) {
    30a2:	80 30       	cpi	r24, 0x00	; 0
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	92 07       	cpc	r25, r18
    30a8:	28 e0       	ldi	r18, 0x08	; 8
    30aa:	a2 07       	cpc	r26, r18
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	b2 07       	cpc	r27, r18
    30b0:	a8 f4       	brcc	.+42     	; 0x30dc <set_step_events_per_minute+0x84>
    ceiling = cycles >> 3;
    30b2:	73 e0       	ldi	r23, 0x03	; 3
    30b4:	b6 95       	lsr	r27
    30b6:	a7 95       	ror	r26
    30b8:	97 95       	ror	r25
    30ba:	87 95       	ror	r24
    30bc:	7a 95       	dec	r23
    30be:	d1 f7       	brne	.-12     	; 0x30b4 <set_step_events_per_minute+0x5c>
    30c0:	fc 01       	movw	r30, r24
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    30c2:	9c 01       	movw	r18, r24
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	63 e0       	ldi	r22, 0x03	; 3
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	44 1f       	adc	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	6a 95       	dec	r22
    30d4:	d1 f7       	brne	.-12     	; 0x30ca <set_step_events_per_minute+0x72>
    30d6:	61 e0       	ldi	r22, 0x01	; 1
    30d8:	70 e0       	ldi	r23, 0x00	; 0
    30da:	14 c0       	rjmp	.+40     	; 0x3104 <set_step_events_per_minute+0xac>
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    30dc:	26 e0       	ldi	r18, 0x06	; 6
    30de:	b6 95       	lsr	r27
    30e0:	a7 95       	ror	r26
    30e2:	97 95       	ror	r25
    30e4:	87 95       	ror	r24
    30e6:	2a 95       	dec	r18
    30e8:	d1 f7       	brne	.-12     	; 0x30de <set_step_events_per_minute+0x86>
    30ea:	fc 01       	movw	r30, r24
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    30ec:	9c 01       	movw	r18, r24
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	86 e0       	ldi	r24, 0x06	; 6
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	44 1f       	adc	r20, r20
    30fa:	55 1f       	adc	r21, r21
    30fc:	8a 95       	dec	r24
    30fe:	d1 f7       	brne	.-12     	; 0x30f4 <set_step_events_per_minute+0x9c>
    3100:	62 e0       	ldi	r22, 0x02	; 2
    3102:	70 e0       	ldi	r23, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3104:	80 91 81 00 	lds	r24, 0x0081
    3108:	96 2f       	mov	r25, r22
    310a:	9f 5f       	subi	r25, 0xFF	; 255
    310c:	88 7f       	andi	r24, 0xF8	; 248
    310e:	98 2b       	or	r25, r24
    3110:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    3114:	f0 93 89 00 	sts	0x0089, r31
    3118:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}

static void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    311c:	20 93 8c 05 	sts	0x058C, r18
    3120:	30 93 8d 05 	sts	0x058D, r19
    3124:	40 93 8e 05 	sts	0x058E, r20
    3128:	50 93 8f 05 	sts	0x058F, r21
}
    312c:	08 95       	ret

0000312e <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR   |= STEPPING_MASK;
    312e:	8a b1       	in	r24, 0x0a	; 10
    3130:	8c 6f       	ori	r24, 0xFC	; 252
    3132:	8a b9       	out	0x0a, r24	; 10
  STEPPING_PORT = (STEPPING_PORT & ~STEPPING_MASK) | settings.invert_mask;
    3134:	8b b1       	in	r24, 0x0b	; 11
    3136:	83 70       	andi	r24, 0x03	; 3
    3138:	90 91 ae 06 	lds	r25, 0x06AE
    313c:	89 2b       	or	r24, r25
    313e:	8b b9       	out	0x0b, r24	; 11
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    3140:	20 9a       	sbi	0x04, 0	; 4
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3142:	e1 e8       	ldi	r30, 0x81	; 129
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	8f 7e       	andi	r24, 0xEF	; 239
    314a:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    314c:	80 81       	ld	r24, Z
    314e:	88 60       	ori	r24, 0x08	; 8
    3150:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    3152:	e0 e8       	ldi	r30, 0x80	; 128
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	8d 7f       	andi	r24, 0xFD	; 253
    315a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    315c:	80 81       	ld	r24, Z
    315e:	8e 7f       	andi	r24, 0xFE	; 254
    3160:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3162:	80 81       	ld	r24, Z
    3164:	8f 73       	andi	r24, 0x3F	; 63
    3166:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    3168:	80 81       	ld	r24, Z
    316a:	8f 7c       	andi	r24, 0xCF	; 207
    316c:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    316e:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    3178:	e0 e7       	ldi	r30, 0x70	; 112
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	81 60       	ori	r24, 0x01	; 1
    3180:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3182:	60 e7       	ldi	r22, 0x70	; 112
    3184:	77 e1       	ldi	r23, 0x17	; 23
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 2c 18 	call	0x3058	; 0x3058 <set_step_events_per_minute>
  trapezoid_tick_cycle_counter = 0;
    318e:	10 92 90 05 	sts	0x0590, r1
    3192:	10 92 91 05 	sts	0x0591, r1
    3196:	10 92 92 05 	sts	0x0592, r1
    319a:	10 92 93 05 	sts	0x0593, r1
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
}

void st_disable_steppers() {	//@grblshield/
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    319e:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    31a0:	ef e6       	ldi	r30, 0x6F	; 111
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	8d 7f       	andi	r24, 0xFD	; 253
    31a8:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
  st_disable_steppers();	//@grblshield@/	
//  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
//  DISABLE_STEPPER_DRIVER_INTERRUPT();  
       
  sei();
    31aa:	78 94       	sei
}
    31ac:	08 95       	ret

000031ae <st_go_home>:
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
}

void st_go_home()
{
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
  limits_go_home();  
    31b6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <limits_go_home>
  plan_set_current_position(0,0,0);
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9b 01       	movw	r18, r22
    31c4:	ac 01       	movw	r20, r24
    31c6:	7b 01       	movw	r14, r22
    31c8:	8c 01       	movw	r16, r24
    31ca:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <plan_set_current_position>
}
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	ff 90       	pop	r15
    31d4:	ef 90       	pop	r14
    31d6:	08 95       	ret

000031d8 <st_synchronize>:
  sei();
}

// Block until all buffered steps are executed
void st_synchronize()
{
    31d8:	07 c0       	rjmp	.+14     	; 0x31e8 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    31da:	83 b7       	in	r24, 0x33	; 51
    31dc:	81 60       	ori	r24, 0x01	; 1
    31de:	83 bf       	out	0x33, r24	; 51
    31e0:	88 95       	sleep
    31e2:	83 b7       	in	r24, 0x33	; 51
    31e4:	8e 7f       	andi	r24, 0xFE	; 254
    31e6:	83 bf       	out	0x33, r24	; 51
    31e8:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <plan_get_current_block>
    31ec:	89 2b       	or	r24, r25
    31ee:	a9 f7       	brne	.-22     	; 0x31da <st_synchronize+0x2>
}
    31f0:	08 95       	ret

000031f2 <__vector_11>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	2f 93       	push	r18
    3206:	3f 93       	push	r19
    3208:	4f 93       	push	r20
    320a:	5f 93       	push	r21
    320c:	6f 93       	push	r22
    320e:	7f 93       	push	r23
    3210:	8f 93       	push	r24
    3212:	9f 93       	push	r25
    3214:	af 93       	push	r26
    3216:	bf 93       	push	r27
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	ef 93       	push	r30
    321e:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabeling this interrupt while we are in it
  
  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    3220:	80 91 8a 05 	lds	r24, 0x058A
    3224:	90 91 8b 05 	lds	r25, 0x058B
    3228:	89 2b       	or	r24, r25
    322a:	09 f0       	breq	.+2      	; 0x322e <__vector_11+0x3c>
    322c:	fc c1       	rjmp	.+1016   	; 0x3626 <__vector_11+0x434>
  // Set the direction pins a cuple of nanoseconds before we step the steppers
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    322e:	9b b1       	in	r25, 0x0b	; 11
    3230:	20 91 79 05 	lds	r18, 0x0579
    3234:	82 2f       	mov	r24, r18
    3236:	80 7e       	andi	r24, 0xE0	; 224
    3238:	9f 71       	andi	r25, 0x1F	; 31
    323a:	89 2b       	or	r24, r25
    323c:	8b b9       	out	0x0b, r24	; 11
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    323e:	8b b1       	in	r24, 0x0b	; 11
    3240:	83 7e       	andi	r24, 0xE3	; 227
    3242:	82 2b       	or	r24, r18
    3244:	8b b9       	out	0x0b, r24	; 11
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    3246:	80 91 a5 06 	lds	r24, 0x06A5
    324a:	88 0f       	add	r24, r24
    324c:	84 50       	subi	r24, 0x04	; 4
    324e:	81 95       	neg	r24
    3250:	80 93 b2 00 	sts	0x00B2, r24

  busy = true;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	90 93 8b 05 	sts	0x058B, r25
    325c:	80 93 8a 05 	sts	0x058A, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3260:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    3262:	80 91 77 05 	lds	r24, 0x0577
    3266:	90 91 78 05 	lds	r25, 0x0578
    326a:	89 2b       	or	r24, r25
    326c:	09 f0       	breq	.+2      	; 0x3270 <__vector_11+0x7e>
    326e:	56 c0       	rjmp	.+172    	; 0x331c <__vector_11+0x12a>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3270:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <plan_get_current_block>
    3274:	ec 01       	movw	r28, r24
    3276:	90 93 78 05 	sts	0x0578, r25
    327a:	80 93 77 05 	sts	0x0577, r24
    if (current_block != NULL) {
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	09 f4       	brne	.+2      	; 0x3284 <__vector_11+0x92>
    3282:	46 c0       	rjmp	.+140    	; 0x3310 <__vector_11+0x11e>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3284:	6d a5       	ldd	r22, Y+45	; 0x2d
    3286:	7e a5       	ldd	r23, Y+46	; 0x2e
    3288:	8f a5       	ldd	r24, Y+47	; 0x2f
    328a:	98 a9       	ldd	r25, Y+48	; 0x30
    328c:	60 93 94 05 	sts	0x0594, r22
    3290:	70 93 95 05 	sts	0x0595, r23
    3294:	80 93 96 05 	sts	0x0596, r24
    3298:	90 93 97 05 	sts	0x0597, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    329c:	10 92 90 05 	sts	0x0590, r1
    32a0:	10 92 91 05 	sts	0x0591, r1
    32a4:	10 92 92 05 	sts	0x0592, r1
    32a8:	10 92 93 05 	sts	0x0593, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    32ac:	0e 94 2c 18 	call	0x3058	; 0x3058 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	af 85       	ldd	r26, Y+15	; 0x0f
    32b6:	b8 89       	ldd	r27, Y+16	; 0x10
    32b8:	b5 95       	asr	r27
    32ba:	a7 95       	ror	r26
    32bc:	97 95       	ror	r25
    32be:	87 95       	ror	r24
    32c0:	b0 95       	com	r27
    32c2:	a0 95       	com	r26
    32c4:	90 95       	com	r25
    32c6:	81 95       	neg	r24
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	af 4f       	sbci	r26, 0xFF	; 255
    32cc:	bf 4f       	sbci	r27, 0xFF	; 255
    32ce:	80 93 7a 05 	sts	0x057A, r24
    32d2:	90 93 7b 05 	sts	0x057B, r25
    32d6:	a0 93 7c 05 	sts	0x057C, r26
    32da:	b0 93 7d 05 	sts	0x057D, r27
      counter_y = counter_x;
    32de:	80 93 7e 05 	sts	0x057E, r24
    32e2:	90 93 7f 05 	sts	0x057F, r25
    32e6:	a0 93 80 05 	sts	0x0580, r26
    32ea:	b0 93 81 05 	sts	0x0581, r27
      counter_z = counter_x;
    32ee:	80 93 82 05 	sts	0x0582, r24
    32f2:	90 93 83 05 	sts	0x0583, r25
    32f6:	a0 93 84 05 	sts	0x0584, r26
    32fa:	b0 93 85 05 	sts	0x0585, r27
      step_events_completed = 0;
    32fe:	10 92 86 05 	sts	0x0586, r1
    3302:	10 92 87 05 	sts	0x0587, r1
    3306:	10 92 88 05 	sts	0x0588, r1
    330a:	10 92 89 05 	sts	0x0589, r1
    330e:	06 c0       	rjmp	.+12     	; 0x331c <__vector_11+0x12a>
  STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
}

void st_disable_steppers() {	//@grblshield/
  STEPPERS_ENABLE_PORT |= (1<<STEPPERS_ENABLE_BIT);
    3310:	28 9a       	sbi	0x05, 0	; 5
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3312:	80 91 6f 00 	lds	r24, 0x006F
    3316:	8d 7f       	andi	r24, 0xFD	; 253
    3318:	80 93 6f 00 	sts	0x006F, r24
//      STEPPERS_ENABLE_PORT &= ~(1<<STEPPERS_ENABLE_BIT);
//      DISABLE_STEPPER_DRIVER_INTERRUPT();
    }    
  } 

  if (current_block != NULL) {
    331c:	e0 91 77 05 	lds	r30, 0x0577
    3320:	f0 91 78 05 	lds	r31, 0x0578
    3324:	30 97       	sbiw	r30, 0x00	; 0
    3326:	09 f4       	brne	.+2      	; 0x332a <__vector_11+0x138>
    3328:	ba c0       	rjmp	.+372    	; 0x349e <__vector_11+0x2ac>
    out_bits = current_block->direction_bits;
    332a:	64 85       	ldd	r22, Z+12	; 0x0c
    332c:	60 93 79 05 	sts	0x0579, r22
    counter_x += current_block->steps_x;
    3330:	20 91 7a 05 	lds	r18, 0x057A
    3334:	30 91 7b 05 	lds	r19, 0x057B
    3338:	40 91 7c 05 	lds	r20, 0x057C
    333c:	50 91 7d 05 	lds	r21, 0x057D
    3340:	80 81       	ld	r24, Z
    3342:	91 81       	ldd	r25, Z+1	; 0x01
    3344:	a2 81       	ldd	r26, Z+2	; 0x02
    3346:	b3 81       	ldd	r27, Z+3	; 0x03
    3348:	28 0f       	add	r18, r24
    334a:	39 1f       	adc	r19, r25
    334c:	4a 1f       	adc	r20, r26
    334e:	5b 1f       	adc	r21, r27
    3350:	20 93 7a 05 	sts	0x057A, r18
    3354:	30 93 7b 05 	sts	0x057B, r19
    3358:	40 93 7c 05 	sts	0x057C, r20
    335c:	50 93 7d 05 	sts	0x057D, r21
    if (counter_x > 0) {
    3360:	12 16       	cp	r1, r18
    3362:	13 06       	cpc	r1, r19
    3364:	14 06       	cpc	r1, r20
    3366:	15 06       	cpc	r1, r21
    3368:	9c f4       	brge	.+38     	; 0x3390 <__vector_11+0x19e>
      out_bits |= (1<<X_STEP_BIT);
    336a:	64 60       	ori	r22, 0x04	; 4
    336c:	60 93 79 05 	sts	0x0579, r22
      counter_x -= current_block->step_event_count;
    3370:	85 85       	ldd	r24, Z+13	; 0x0d
    3372:	96 85       	ldd	r25, Z+14	; 0x0e
    3374:	a7 85       	ldd	r26, Z+15	; 0x0f
    3376:	b0 89       	ldd	r27, Z+16	; 0x10
    3378:	28 1b       	sub	r18, r24
    337a:	39 0b       	sbc	r19, r25
    337c:	4a 0b       	sbc	r20, r26
    337e:	5b 0b       	sbc	r21, r27
    3380:	20 93 7a 05 	sts	0x057A, r18
    3384:	30 93 7b 05 	sts	0x057B, r19
    3388:	40 93 7c 05 	sts	0x057C, r20
    338c:	50 93 7d 05 	sts	0x057D, r21
    }
    counter_y += current_block->steps_y;
    3390:	20 91 7e 05 	lds	r18, 0x057E
    3394:	30 91 7f 05 	lds	r19, 0x057F
    3398:	40 91 80 05 	lds	r20, 0x0580
    339c:	50 91 81 05 	lds	r21, 0x0581
    33a0:	84 81       	ldd	r24, Z+4	; 0x04
    33a2:	95 81       	ldd	r25, Z+5	; 0x05
    33a4:	a6 81       	ldd	r26, Z+6	; 0x06
    33a6:	b7 81       	ldd	r27, Z+7	; 0x07
    33a8:	28 0f       	add	r18, r24
    33aa:	39 1f       	adc	r19, r25
    33ac:	4a 1f       	adc	r20, r26
    33ae:	5b 1f       	adc	r21, r27
    33b0:	20 93 7e 05 	sts	0x057E, r18
    33b4:	30 93 7f 05 	sts	0x057F, r19
    33b8:	40 93 80 05 	sts	0x0580, r20
    33bc:	50 93 81 05 	sts	0x0581, r21
    if (counter_y > 0) {
    33c0:	12 16       	cp	r1, r18
    33c2:	13 06       	cpc	r1, r19
    33c4:	14 06       	cpc	r1, r20
    33c6:	15 06       	cpc	r1, r21
    33c8:	ac f4       	brge	.+42     	; 0x33f4 <__vector_11+0x202>
      out_bits |= (1<<Y_STEP_BIT);
    33ca:	80 91 79 05 	lds	r24, 0x0579
    33ce:	88 60       	ori	r24, 0x08	; 8
    33d0:	80 93 79 05 	sts	0x0579, r24
      counter_y -= current_block->step_event_count;
    33d4:	85 85       	ldd	r24, Z+13	; 0x0d
    33d6:	96 85       	ldd	r25, Z+14	; 0x0e
    33d8:	a7 85       	ldd	r26, Z+15	; 0x0f
    33da:	b0 89       	ldd	r27, Z+16	; 0x10
    33dc:	28 1b       	sub	r18, r24
    33de:	39 0b       	sbc	r19, r25
    33e0:	4a 0b       	sbc	r20, r26
    33e2:	5b 0b       	sbc	r21, r27
    33e4:	20 93 7e 05 	sts	0x057E, r18
    33e8:	30 93 7f 05 	sts	0x057F, r19
    33ec:	40 93 80 05 	sts	0x0580, r20
    33f0:	50 93 81 05 	sts	0x0581, r21
    }
    counter_z += current_block->steps_z;
    33f4:	20 91 82 05 	lds	r18, 0x0582
    33f8:	30 91 83 05 	lds	r19, 0x0583
    33fc:	40 91 84 05 	lds	r20, 0x0584
    3400:	50 91 85 05 	lds	r21, 0x0585
    3404:	80 85       	ldd	r24, Z+8	; 0x08
    3406:	91 85       	ldd	r25, Z+9	; 0x09
    3408:	a2 85       	ldd	r26, Z+10	; 0x0a
    340a:	b3 85       	ldd	r27, Z+11	; 0x0b
    340c:	28 0f       	add	r18, r24
    340e:	39 1f       	adc	r19, r25
    3410:	4a 1f       	adc	r20, r26
    3412:	5b 1f       	adc	r21, r27
    3414:	20 93 82 05 	sts	0x0582, r18
    3418:	30 93 83 05 	sts	0x0583, r19
    341c:	40 93 84 05 	sts	0x0584, r20
    3420:	50 93 85 05 	sts	0x0585, r21
    if (counter_z > 0) {
    3424:	12 16       	cp	r1, r18
    3426:	13 06       	cpc	r1, r19
    3428:	14 06       	cpc	r1, r20
    342a:	15 06       	cpc	r1, r21
    342c:	ac f4       	brge	.+42     	; 0x3458 <__vector_11+0x266>
      out_bits |= (1<<Z_STEP_BIT);
    342e:	80 91 79 05 	lds	r24, 0x0579
    3432:	80 61       	ori	r24, 0x10	; 16
    3434:	80 93 79 05 	sts	0x0579, r24
      counter_z -= current_block->step_event_count;
    3438:	85 85       	ldd	r24, Z+13	; 0x0d
    343a:	96 85       	ldd	r25, Z+14	; 0x0e
    343c:	a7 85       	ldd	r26, Z+15	; 0x0f
    343e:	b0 89       	ldd	r27, Z+16	; 0x10
    3440:	28 1b       	sub	r18, r24
    3442:	39 0b       	sbc	r19, r25
    3444:	4a 0b       	sbc	r20, r26
    3446:	5b 0b       	sbc	r21, r27
    3448:	20 93 82 05 	sts	0x0582, r18
    344c:	30 93 83 05 	sts	0x0583, r19
    3450:	40 93 84 05 	sts	0x0584, r20
    3454:	50 93 85 05 	sts	0x0585, r21
    }
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3458:	80 91 86 05 	lds	r24, 0x0586
    345c:	90 91 87 05 	lds	r25, 0x0587
    3460:	a0 91 88 05 	lds	r26, 0x0588
    3464:	b0 91 89 05 	lds	r27, 0x0589
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	a1 1d       	adc	r26, r1
    346c:	b1 1d       	adc	r27, r1
    346e:	80 93 86 05 	sts	0x0586, r24
    3472:	90 93 87 05 	sts	0x0587, r25
    3476:	a0 93 88 05 	sts	0x0588, r26
    347a:	b0 93 89 05 	sts	0x0589, r27
    if (step_events_completed >= current_block->step_event_count) {
    347e:	25 85       	ldd	r18, Z+13	; 0x0d
    3480:	36 85       	ldd	r19, Z+14	; 0x0e
    3482:	47 85       	ldd	r20, Z+15	; 0x0f
    3484:	50 89       	ldd	r21, Z+16	; 0x10
    3486:	82 17       	cp	r24, r18
    3488:	93 07       	cpc	r25, r19
    348a:	a4 07       	cpc	r26, r20
    348c:	b5 07       	cpc	r27, r21
    348e:	48 f0       	brcs	.+18     	; 0x34a2 <__vector_11+0x2b0>
      current_block = NULL;
    3490:	10 92 78 05 	sts	0x0578, r1
    3494:	10 92 77 05 	sts	0x0577, r1
      plan_discard_current_block();
    3498:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <plan_discard_current_block>
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <__vector_11+0x2b0>
    }
  } else {
    out_bits = 0;
    349e:	10 92 79 05 	sts	0x0579, r1
  }          
  out_bits ^= settings.invert_mask;
    34a2:	80 91 79 05 	lds	r24, 0x0579
    34a6:	90 91 ae 06 	lds	r25, 0x06AE
    34aa:	89 27       	eor	r24, r25
    34ac:	80 93 79 05 	sts	0x0579, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    34b0:	20 91 8c 05 	lds	r18, 0x058C
    34b4:	30 91 8d 05 	lds	r19, 0x058D
    34b8:	40 91 8e 05 	lds	r20, 0x058E
    34bc:	50 91 8f 05 	lds	r21, 0x058F
    34c0:	80 91 90 05 	lds	r24, 0x0590
    34c4:	90 91 91 05 	lds	r25, 0x0591
    34c8:	a0 91 92 05 	lds	r26, 0x0592
    34cc:	b0 91 93 05 	lds	r27, 0x0593
    34d0:	28 0f       	add	r18, r24
    34d2:	39 1f       	adc	r19, r25
    34d4:	4a 1f       	adc	r20, r26
    34d6:	5b 1f       	adc	r21, r27
    34d8:	20 93 90 05 	sts	0x0590, r18
    34dc:	30 93 91 05 	sts	0x0591, r19
    34e0:	40 93 92 05 	sts	0x0592, r20
    34e4:	50 93 93 05 	sts	0x0593, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    34e8:	21 38       	cpi	r18, 0x81	; 129
    34ea:	8a e1       	ldi	r24, 0x1A	; 26
    34ec:	38 07       	cpc	r19, r24
    34ee:	86 e0       	ldi	r24, 0x06	; 6
    34f0:	48 07       	cpc	r20, r24
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	58 07       	cpc	r21, r24
    34f6:	08 f4       	brcc	.+2      	; 0x34fa <__vector_11+0x308>
    34f8:	92 c0       	rjmp	.+292    	; 0x361e <__vector_11+0x42c>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    34fa:	20 58       	subi	r18, 0x80	; 128
    34fc:	3a 41       	sbci	r19, 0x1A	; 26
    34fe:	46 40       	sbci	r20, 0x06	; 6
    3500:	50 40       	sbci	r21, 0x00	; 0
    3502:	20 93 90 05 	sts	0x0590, r18
    3506:	30 93 91 05 	sts	0x0591, r19
    350a:	40 93 92 05 	sts	0x0592, r20
    350e:	50 93 93 05 	sts	0x0593, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static void trapezoid_generator_tick() {     
  if (current_block) {
    3512:	e0 91 77 05 	lds	r30, 0x0577
    3516:	f0 91 78 05 	lds	r31, 0x0578
    351a:	30 97       	sbiw	r30, 0x00	; 0
    351c:	09 f4       	brne	.+2      	; 0x3520 <__vector_11+0x32e>
    351e:	7f c0       	rjmp	.+254    	; 0x361e <__vector_11+0x42c>
    if (step_events_completed < current_block->accelerate_until) {
    3520:	e0 90 86 05 	lds	r14, 0x0586
    3524:	f0 90 87 05 	lds	r15, 0x0587
    3528:	00 91 88 05 	lds	r16, 0x0588
    352c:	10 91 89 05 	lds	r17, 0x0589
    3530:	81 ad       	ldd	r24, Z+57	; 0x39
    3532:	92 ad       	ldd	r25, Z+58	; 0x3a
    3534:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3536:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3538:	e8 16       	cp	r14, r24
    353a:	f9 06       	cpc	r15, r25
    353c:	0a 07       	cpc	r16, r26
    353e:	1b 07       	cpc	r17, r27
    3540:	88 f4       	brcc	.+34     	; 0x3564 <__vector_11+0x372>
      trapezoid_adjusted_rate += current_block->rate_delta;
    3542:	65 a9       	ldd	r22, Z+53	; 0x35
    3544:	76 a9       	ldd	r23, Z+54	; 0x36
    3546:	87 a9       	ldd	r24, Z+55	; 0x37
    3548:	90 ad       	ldd	r25, Z+56	; 0x38
    354a:	20 91 94 05 	lds	r18, 0x0594
    354e:	30 91 95 05 	lds	r19, 0x0595
    3552:	40 91 96 05 	lds	r20, 0x0596
    3556:	50 91 97 05 	lds	r21, 0x0597
    355a:	62 0f       	add	r22, r18
    355c:	73 1f       	adc	r23, r19
    355e:	84 1f       	adc	r24, r20
    3560:	95 1f       	adc	r25, r21
    3562:	53 c0       	rjmp	.+166    	; 0x360a <__vector_11+0x418>
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3564:	fd 96       	adiw	r30, 0x3d	; 61
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	a2 81       	ldd	r26, Z+2	; 0x02
    356c:	b3 81       	ldd	r27, Z+3	; 0x03
    356e:	fd 97       	sbiw	r30, 0x3d	; 61
    3570:	20 91 94 05 	lds	r18, 0x0594
    3574:	30 91 95 05 	lds	r19, 0x0595
    3578:	40 91 96 05 	lds	r20, 0x0596
    357c:	50 91 97 05 	lds	r21, 0x0597
    3580:	8e 15       	cp	r24, r14
    3582:	9f 05       	cpc	r25, r15
    3584:	a0 07       	cpc	r26, r16
    3586:	b1 07       	cpc	r27, r17
    3588:	b8 f5       	brcc	.+110    	; 0x35f8 <__vector_11+0x406>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    358a:	85 a9       	ldd	r24, Z+53	; 0x35
    358c:	96 a9       	ldd	r25, Z+54	; 0x36
    358e:	a7 a9       	ldd	r26, Z+55	; 0x37
    3590:	b0 ad       	ldd	r27, Z+56	; 0x38
    3592:	82 17       	cp	r24, r18
    3594:	93 07       	cpc	r25, r19
    3596:	a4 07       	cpc	r26, r20
    3598:	b5 07       	cpc	r27, r21
    359a:	60 f4       	brcc	.+24     	; 0x35b4 <__vector_11+0x3c2>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    359c:	28 1b       	sub	r18, r24
    359e:	39 0b       	sbc	r19, r25
    35a0:	4a 0b       	sbc	r20, r26
    35a2:	5b 0b       	sbc	r21, r27
    35a4:	20 93 94 05 	sts	0x0594, r18
    35a8:	30 93 95 05 	sts	0x0595, r19
    35ac:	40 93 96 05 	sts	0x0596, r20
    35b0:	50 93 97 05 	sts	0x0597, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    35b4:	21 a9       	ldd	r18, Z+49	; 0x31
    35b6:	32 a9       	ldd	r19, Z+50	; 0x32
    35b8:	43 a9       	ldd	r20, Z+51	; 0x33
    35ba:	54 a9       	ldd	r21, Z+52	; 0x34
    35bc:	80 91 94 05 	lds	r24, 0x0594
    35c0:	90 91 95 05 	lds	r25, 0x0595
    35c4:	a0 91 96 05 	lds	r26, 0x0596
    35c8:	b0 91 97 05 	lds	r27, 0x0597
    35cc:	82 17       	cp	r24, r18
    35ce:	93 07       	cpc	r25, r19
    35d0:	a4 07       	cpc	r26, r20
    35d2:	b5 07       	cpc	r27, r21
    35d4:	40 f4       	brcc	.+16     	; 0x35e6 <__vector_11+0x3f4>
        trapezoid_adjusted_rate = current_block->final_rate;
    35d6:	20 93 94 05 	sts	0x0594, r18
    35da:	30 93 95 05 	sts	0x0595, r19
    35de:	40 93 96 05 	sts	0x0596, r20
    35e2:	50 93 97 05 	sts	0x0597, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    35e6:	60 91 94 05 	lds	r22, 0x0594
    35ea:	70 91 95 05 	lds	r23, 0x0595
    35ee:	80 91 96 05 	lds	r24, 0x0596
    35f2:	90 91 97 05 	lds	r25, 0x0597
    35f6:	11 c0       	rjmp	.+34     	; 0x361a <__vector_11+0x428>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    35f8:	61 89       	ldd	r22, Z+17	; 0x11
    35fa:	72 89       	ldd	r23, Z+18	; 0x12
    35fc:	83 89       	ldd	r24, Z+19	; 0x13
    35fe:	94 89       	ldd	r25, Z+20	; 0x14
    3600:	26 17       	cp	r18, r22
    3602:	37 07       	cpc	r19, r23
    3604:	48 07       	cpc	r20, r24
    3606:	59 07       	cpc	r21, r25
    3608:	51 f0       	breq	.+20     	; 0x361e <__vector_11+0x42c>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    360a:	60 93 94 05 	sts	0x0594, r22
    360e:	70 93 95 05 	sts	0x0595, r23
    3612:	80 93 96 05 	sts	0x0596, r24
    3616:	90 93 97 05 	sts	0x0597, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    361a:	0e 94 2c 18 	call	0x3058	; 0x3058 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=false;
    361e:	10 92 8b 05 	sts	0x058B, r1
    3622:	10 92 8a 05 	sts	0x058A, r1
}
    3626:	ff 91       	pop	r31
    3628:	ef 91       	pop	r30
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	bf 91       	pop	r27
    3630:	af 91       	pop	r26
    3632:	9f 91       	pop	r25
    3634:	8f 91       	pop	r24
    3636:	7f 91       	pop	r23
    3638:	6f 91       	pop	r22
    363a:	5f 91       	pop	r21
    363c:	4f 91       	pop	r20
    363e:	3f 91       	pop	r19
    3640:	2f 91       	pop	r18
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	ff 90       	pop	r15
    3648:	ef 90       	pop	r14
    364a:	0f 90       	pop	r0
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	0f 90       	pop	r0
    3650:	1f 90       	pop	r1
    3652:	18 95       	reti

00003654 <strtod>:
    3654:	a0 e0       	ldi	r26, 0x00	; 0
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e0 e3       	ldi	r30, 0x30	; 48
    365a:	fb e1       	ldi	r31, 0x1B	; 27
    365c:	0c 94 be 21 	jmp	0x437c	; 0x437c <__prologue_saves__+0xc>
    3660:	ec 01       	movw	r28, r24
    3662:	5b 01       	movw	r10, r22
    3664:	61 15       	cp	r22, r1
    3666:	71 05       	cpc	r23, r1
    3668:	19 f0       	breq	.+6      	; 0x3670 <strtod+0x1c>
    366a:	fb 01       	movw	r30, r22
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	f9 90       	ld	r15, Y+
    3672:	8f 2d       	mov	r24, r15
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 8d 1c 	call	0x391a	; 0x391a <isspace>
    367a:	89 2b       	or	r24, r25
    367c:	c9 f7       	brne	.-14     	; 0x3670 <strtod+0x1c>
    367e:	fd e2       	ldi	r31, 0x2D	; 45
    3680:	ff 16       	cp	r15, r31
    3682:	21 f4       	brne	.+8      	; 0x368c <strtod+0x38>
    3684:	f9 90       	ld	r15, Y+
    3686:	ee 24       	eor	r14, r14
    3688:	e3 94       	inc	r14
    368a:	05 c0       	rjmp	.+10     	; 0x3696 <strtod+0x42>
    368c:	2b e2       	ldi	r18, 0x2B	; 43
    368e:	f2 16       	cp	r15, r18
    3690:	09 f4       	brne	.+2      	; 0x3694 <strtod+0x40>
    3692:	f9 90       	ld	r15, Y+
    3694:	ee 24       	eor	r14, r14
    3696:	8e 01       	movw	r16, r28
    3698:	01 50       	subi	r16, 0x01	; 1
    369a:	10 40       	sbci	r17, 0x00	; 0
    369c:	c8 01       	movw	r24, r16
    369e:	6b e5       	ldi	r22, 0x5B	; 91
    36a0:	73 e0       	ldi	r23, 0x03	; 3
    36a2:	43 e0       	ldi	r20, 0x03	; 3
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	0e 94 95 1c 	call	0x392a	; 0x392a <strncasecmp_P>
    36aa:	89 2b       	or	r24, r25
    36ac:	01 f5       	brne	.+64     	; 0x36ee <strtod+0x9a>
    36ae:	8e 01       	movw	r16, r28
    36b0:	0e 5f       	subi	r16, 0xFE	; 254
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	c8 01       	movw	r24, r16
    36b6:	6e e5       	ldi	r22, 0x5E	; 94
    36b8:	73 e0       	ldi	r23, 0x03	; 3
    36ba:	45 e0       	ldi	r20, 0x05	; 5
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	0e 94 95 1c 	call	0x392a	; 0x392a <strncasecmp_P>
    36c2:	89 2b       	or	r24, r25
    36c4:	19 f4       	brne	.+6      	; 0x36cc <strtod+0x78>
    36c6:	8e 01       	movw	r16, r28
    36c8:	09 5f       	subi	r16, 0xF9	; 249
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
    36cc:	a1 14       	cp	r10, r1
    36ce:	b1 04       	cpc	r11, r1
    36d0:	19 f0       	breq	.+6      	; 0x36d8 <strtod+0x84>
    36d2:	f5 01       	movw	r30, r10
    36d4:	11 83       	std	Z+1, r17	; 0x01
    36d6:	00 83       	st	Z, r16
    36d8:	e0 fc       	sbrc	r14, 0
    36da:	04 c0       	rjmp	.+8      	; 0x36e4 <strtod+0x90>
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	80 e8       	ldi	r24, 0x80	; 128
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <strtod+0xb8>
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	80 e8       	ldi	r24, 0x80	; 128
    36ea:	6f ef       	ldi	r22, 0xFF	; 255
    36ec:	08 c1       	rjmp	.+528    	; 0x38fe <strtod+0x2aa>
    36ee:	c8 01       	movw	r24, r16
    36f0:	63 e6       	ldi	r22, 0x63	; 99
    36f2:	73 e0       	ldi	r23, 0x03	; 3
    36f4:	43 e0       	ldi	r20, 0x03	; 3
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	0e 94 95 1c 	call	0x392a	; 0x392a <strncasecmp_P>
    36fc:	89 2b       	or	r24, r25
    36fe:	69 f4       	brne	.+26     	; 0x371a <strtod+0xc6>
    3700:	a1 14       	cp	r10, r1
    3702:	b1 04       	cpc	r11, r1
    3704:	29 f4       	brne	.+10     	; 0x3710 <strtod+0xbc>
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	80 ec       	ldi	r24, 0xC0	; 192
    370c:	6f e7       	ldi	r22, 0x7F	; 127
    370e:	f7 c0       	rjmp	.+494    	; 0x38fe <strtod+0x2aa>
    3710:	22 96       	adiw	r28, 0x02	; 2
    3712:	f5 01       	movw	r30, r10
    3714:	d1 83       	std	Z+1, r29	; 0x01
    3716:	c0 83       	st	Z, r28
    3718:	f6 cf       	rjmp	.-20     	; 0x3706 <strtod+0xb2>
    371a:	88 24       	eor	r8, r8
    371c:	99 24       	eor	r9, r9
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	ef 2d       	mov	r30, r15
    3728:	e0 53       	subi	r30, 0x30	; 48
    372a:	ea 30       	cpi	r30, 0x0A	; 10
    372c:	a0 f5       	brcc	.+104    	; 0x3796 <strtod+0x142>
    372e:	f2 e0       	ldi	r31, 0x02	; 2
    3730:	ef 2a       	or	r14, r31
    3732:	8e 2d       	mov	r24, r14
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9c 01       	movw	r18, r24
    3738:	28 70       	andi	r18, 0x08	; 8
    373a:	30 70       	andi	r19, 0x00	; 0
    373c:	e2 fe       	sbrs	r14, 2
    373e:	06 c0       	rjmp	.+12     	; 0x374c <strtod+0xf8>
    3740:	23 2b       	or	r18, r19
    3742:	79 f5       	brne	.+94     	; 0x37a2 <strtod+0x14e>
    3744:	08 94       	sec
    3746:	81 1c       	adc	r8, r1
    3748:	91 1c       	adc	r9, r1
    374a:	2b c0       	rjmp	.+86     	; 0x37a2 <strtod+0x14e>
    374c:	23 2b       	or	r18, r19
    374e:	19 f0       	breq	.+6      	; 0x3756 <strtod+0x102>
    3750:	08 94       	sec
    3752:	81 08       	sbc	r8, r1
    3754:	91 08       	sbc	r9, r1
    3756:	db 01       	movw	r26, r22
    3758:	ca 01       	movw	r24, r20
    375a:	12 e0       	ldi	r17, 0x02	; 2
    375c:	88 0f       	add	r24, r24
    375e:	99 1f       	adc	r25, r25
    3760:	aa 1f       	adc	r26, r26
    3762:	bb 1f       	adc	r27, r27
    3764:	1a 95       	dec	r17
    3766:	d1 f7       	brne	.-12     	; 0x375c <strtod+0x108>
    3768:	48 0f       	add	r20, r24
    376a:	59 1f       	adc	r21, r25
    376c:	6a 1f       	adc	r22, r26
    376e:	7b 1f       	adc	r23, r27
    3770:	44 0f       	add	r20, r20
    3772:	55 1f       	adc	r21, r21
    3774:	66 1f       	adc	r22, r22
    3776:	77 1f       	adc	r23, r23
    3778:	4e 0f       	add	r20, r30
    377a:	51 1d       	adc	r21, r1
    377c:	61 1d       	adc	r22, r1
    377e:	71 1d       	adc	r23, r1
    3780:	48 39       	cpi	r20, 0x98	; 152
    3782:	29 e9       	ldi	r18, 0x99	; 153
    3784:	52 07       	cpc	r21, r18
    3786:	29 e9       	ldi	r18, 0x99	; 153
    3788:	62 07       	cpc	r22, r18
    378a:	29 e1       	ldi	r18, 0x19	; 25
    378c:	72 07       	cpc	r23, r18
    378e:	48 f0       	brcs	.+18     	; 0x37a2 <strtod+0x14e>
    3790:	84 e0       	ldi	r24, 0x04	; 4
    3792:	e8 2a       	or	r14, r24
    3794:	06 c0       	rjmp	.+12     	; 0x37a2 <strtod+0x14e>
    3796:	ee 3f       	cpi	r30, 0xFE	; 254
    3798:	31 f4       	brne	.+12     	; 0x37a6 <strtod+0x152>
    379a:	e3 fc       	sbrc	r14, 3
    379c:	39 c0       	rjmp	.+114    	; 0x3810 <strtod+0x1bc>
    379e:	98 e0       	ldi	r25, 0x08	; 8
    37a0:	e9 2a       	or	r14, r25
    37a2:	f9 90       	ld	r15, Y+
    37a4:	c0 cf       	rjmp	.-128    	; 0x3726 <strtod+0xd2>
    37a6:	e5 33       	cpi	r30, 0x35	; 53
    37a8:	11 f0       	breq	.+4      	; 0x37ae <strtod+0x15a>
    37aa:	e5 31       	cpi	r30, 0x15	; 21
    37ac:	89 f5       	brne	.+98     	; 0x3810 <strtod+0x1bc>
    37ae:	29 91       	ld	r18, Y+
    37b0:	2d 32       	cpi	r18, 0x2D	; 45
    37b2:	19 f4       	brne	.+6      	; 0x37ba <strtod+0x166>
    37b4:	e0 e1       	ldi	r30, 0x10	; 16
    37b6:	ee 2a       	or	r14, r30
    37b8:	05 c0       	rjmp	.+10     	; 0x37c4 <strtod+0x170>
    37ba:	2b 32       	cpi	r18, 0x2B	; 43
    37bc:	19 f0       	breq	.+6      	; 0x37c4 <strtod+0x170>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	03 c0       	rjmp	.+6      	; 0x37ca <strtod+0x176>
    37c4:	29 91       	ld	r18, Y+
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	e2 2f       	mov	r30, r18
    37cc:	e0 53       	subi	r30, 0x30	; 48
    37ce:	ea 30       	cpi	r30, 0x0A	; 10
    37d0:	18 f0       	brcs	.+6      	; 0x37d8 <strtod+0x184>
    37d2:	c8 1b       	sub	r28, r24
    37d4:	d9 0b       	sbc	r29, r25
    37d6:	1c c0       	rjmp	.+56     	; 0x3810 <strtod+0x1bc>
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	fc e0       	ldi	r31, 0x0C	; 12
    37de:	20 38       	cpi	r18, 0x80	; 128
    37e0:	3f 07       	cpc	r19, r31
    37e2:	5c f4       	brge	.+22     	; 0x37fa <strtod+0x1a6>
    37e4:	c9 01       	movw	r24, r18
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	28 0f       	add	r18, r24
    37f0:	39 1f       	adc	r19, r25
    37f2:	22 0f       	add	r18, r18
    37f4:	33 1f       	adc	r19, r19
    37f6:	2e 0f       	add	r18, r30
    37f8:	31 1d       	adc	r19, r1
    37fa:	e9 91       	ld	r30, Y+
    37fc:	e0 53       	subi	r30, 0x30	; 48
    37fe:	ea 30       	cpi	r30, 0x0A	; 10
    3800:	68 f3       	brcs	.-38     	; 0x37dc <strtod+0x188>
    3802:	e4 fe       	sbrs	r14, 4
    3804:	03 c0       	rjmp	.+6      	; 0x380c <strtod+0x1b8>
    3806:	30 95       	com	r19
    3808:	21 95       	neg	r18
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	82 0e       	add	r8, r18
    380e:	93 1e       	adc	r9, r19
    3810:	ce 2c       	mov	r12, r14
    3812:	dd 24       	eor	r13, r13
    3814:	e1 fe       	sbrs	r14, 1
    3816:	07 c0       	rjmp	.+14     	; 0x3826 <strtod+0x1d2>
    3818:	a1 14       	cp	r10, r1
    381a:	b1 04       	cpc	r11, r1
    381c:	21 f0       	breq	.+8      	; 0x3826 <strtod+0x1d2>
    381e:	21 97       	sbiw	r28, 0x01	; 1
    3820:	f5 01       	movw	r30, r10
    3822:	d1 83       	std	Z+1, r29	; 0x01
    3824:	c0 83       	st	Z, r28
    3826:	cb 01       	movw	r24, r22
    3828:	ba 01       	movw	r22, r20
    382a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__floatunsisf>
    382e:	7b 01       	movw	r14, r22
    3830:	8c 01       	movw	r16, r24
    3832:	f3 e0       	ldi	r31, 0x03	; 3
    3834:	cf 22       	and	r12, r31
    3836:	dd 24       	eor	r13, r13
    3838:	23 e0       	ldi	r18, 0x03	; 3
    383a:	c2 16       	cp	r12, r18
    383c:	d1 04       	cpc	r13, r1
    383e:	21 f4       	brne	.+8      	; 0x3848 <strtod+0x1f4>
    3840:	17 fb       	bst	r17, 7
    3842:	10 95       	com	r17
    3844:	17 f9       	bld	r17, 7
    3846:	10 95       	com	r17
    3848:	57 01       	movw	r10, r14
    384a:	68 01       	movw	r12, r16
    384c:	c8 01       	movw	r24, r16
    384e:	b7 01       	movw	r22, r14
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e0       	ldi	r20, 0x00	; 0
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    385c:	88 23       	and	r24, r24
    385e:	09 f4       	brne	.+2      	; 0x3862 <strtod+0x20e>
    3860:	4a c0       	rjmp	.+148    	; 0x38f6 <strtod+0x2a2>
    3862:	97 fe       	sbrs	r9, 7
    3864:	0d c0       	rjmp	.+26     	; 0x3880 <strtod+0x22c>
    3866:	2a e7       	ldi	r18, 0x7A	; 122
    3868:	e2 2e       	mov	r14, r18
    386a:	23 e0       	ldi	r18, 0x03	; 3
    386c:	f2 2e       	mov	r15, r18
    386e:	90 94       	com	r9
    3870:	81 94       	neg	r8
    3872:	91 08       	sbc	r9, r1
    3874:	93 94       	inc	r9
    3876:	c0 e2       	ldi	r28, 0x20	; 32
    3878:	d0 e0       	ldi	r29, 0x00	; 0
    387a:	00 e0       	ldi	r16, 0x00	; 0
    387c:	10 e0       	ldi	r17, 0x00	; 0
    387e:	12 c0       	rjmp	.+36     	; 0x38a4 <strtod+0x250>
    3880:	92 e9       	ldi	r25, 0x92	; 146
    3882:	e9 2e       	mov	r14, r25
    3884:	93 e0       	ldi	r25, 0x03	; 3
    3886:	f9 2e       	mov	r15, r25
    3888:	f6 cf       	rjmp	.-20     	; 0x3876 <strtod+0x222>
    388a:	f7 01       	movw	r30, r14
    388c:	25 91       	lpm	r18, Z+
    388e:	35 91       	lpm	r19, Z+
    3890:	45 91       	lpm	r20, Z+
    3892:	54 91       	lpm	r21, Z+
    3894:	c6 01       	movw	r24, r12
    3896:	b5 01       	movw	r22, r10
    3898:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3>
    389c:	5b 01       	movw	r10, r22
    389e:	6c 01       	movw	r12, r24
    38a0:	8c 1a       	sub	r8, r28
    38a2:	9d 0a       	sbc	r9, r29
    38a4:	8c 16       	cp	r8, r28
    38a6:	9d 06       	cpc	r9, r29
    38a8:	84 f7       	brge	.-32     	; 0x388a <strtod+0x236>
    38aa:	d5 95       	asr	r29
    38ac:	c7 95       	ror	r28
    38ae:	0f 5f       	subi	r16, 0xFF	; 255
    38b0:	1f 4f       	sbci	r17, 0xFF	; 255
    38b2:	06 30       	cpi	r16, 0x06	; 6
    38b4:	11 05       	cpc	r17, r1
    38b6:	29 f0       	breq	.+10     	; 0x38c2 <strtod+0x26e>
    38b8:	8c ef       	ldi	r24, 0xFC	; 252
    38ba:	9f ef       	ldi	r25, 0xFF	; 255
    38bc:	e8 0e       	add	r14, r24
    38be:	f9 1e       	adc	r15, r25
    38c0:	f1 cf       	rjmp	.-30     	; 0x38a4 <strtod+0x250>
    38c2:	c5 01       	movw	r24, r10
    38c4:	d6 01       	movw	r26, r12
    38c6:	7c 01       	movw	r14, r24
    38c8:	8d 01       	movw	r16, r26
    38ca:	8c 2d       	mov	r24, r12
    38cc:	88 0f       	add	r24, r24
    38ce:	8d 2d       	mov	r24, r13
    38d0:	88 1f       	adc	r24, r24
    38d2:	8f 3f       	cpi	r24, 0xFF	; 255
    38d4:	51 f0       	breq	.+20     	; 0x38ea <strtod+0x296>
    38d6:	c6 01       	movw	r24, r12
    38d8:	b5 01       	movw	r22, r10
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	31 f4       	brne	.+12     	; 0x38f6 <strtod+0x2a2>
    38ea:	82 e2       	ldi	r24, 0x22	; 34
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	90 93 bc 06 	sts	0x06BC, r25
    38f2:	80 93 bb 06 	sts	0x06BB, r24
    38f6:	7e 2d       	mov	r23, r14
    38f8:	9f 2d       	mov	r25, r15
    38fa:	80 2f       	mov	r24, r16
    38fc:	61 2f       	mov	r22, r17
    38fe:	27 2f       	mov	r18, r23
    3900:	39 2f       	mov	r19, r25
    3902:	48 2f       	mov	r20, r24
    3904:	56 2f       	mov	r21, r22
    3906:	b9 01       	movw	r22, r18
    3908:	ca 01       	movw	r24, r20
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
    390e:	ec e0       	ldi	r30, 0x0C	; 12
    3910:	0c 94 da 21 	jmp	0x43b4	; 0x43b4 <__epilogue_restores__+0xc>

00003914 <exit>:
    3914:	f8 94       	cli
    3916:	0c 94 03 22 	jmp	0x4406	; 0x4406 <_exit>

0000391a <isspace>:
    391a:	91 11       	cpse	r25, r1
    391c:	9f c4       	rjmp	.+2366   	; 0x425c <__ctype_isfalse>
    391e:	80 32       	cpi	r24, 0x20	; 32
    3920:	19 f0       	breq	.+6      	; 0x3928 <isspace+0xe>
    3922:	89 50       	subi	r24, 0x09	; 9
    3924:	85 50       	subi	r24, 0x05	; 5
    3926:	d0 f7       	brcc	.-12     	; 0x391c <isspace+0x2>
    3928:	08 95       	ret

0000392a <strncasecmp_P>:
    392a:	fb 01       	movw	r30, r22
    392c:	dc 01       	movw	r26, r24
    392e:	41 50       	subi	r20, 0x01	; 1
    3930:	50 40       	sbci	r21, 0x00	; 0
    3932:	88 f0       	brcs	.+34     	; 0x3956 <strncasecmp_P+0x2c>
    3934:	8d 91       	ld	r24, X+
    3936:	81 34       	cpi	r24, 0x41	; 65
    3938:	1c f0       	brlt	.+6      	; 0x3940 <strncasecmp_P+0x16>
    393a:	8b 35       	cpi	r24, 0x5B	; 91
    393c:	0c f4       	brge	.+2      	; 0x3940 <strncasecmp_P+0x16>
    393e:	80 5e       	subi	r24, 0xE0	; 224
    3940:	65 91       	lpm	r22, Z+
    3942:	61 34       	cpi	r22, 0x41	; 65
    3944:	1c f0       	brlt	.+6      	; 0x394c <strncasecmp_P+0x22>
    3946:	6b 35       	cpi	r22, 0x5B	; 91
    3948:	0c f4       	brge	.+2      	; 0x394c <strncasecmp_P+0x22>
    394a:	60 5e       	subi	r22, 0xE0	; 224
    394c:	86 1b       	sub	r24, r22
    394e:	61 11       	cpse	r22, r1
    3950:	71 f3       	breq	.-36     	; 0x392e <strncasecmp_P+0x4>
    3952:	99 0b       	sbc	r25, r25
    3954:	08 95       	ret
    3956:	88 1b       	sub	r24, r24
    3958:	fc cf       	rjmp	.-8      	; 0x3952 <strncasecmp_P+0x28>

0000395a <__subsf3>:
    395a:	50 58       	subi	r21, 0x80	; 128

0000395c <__addsf3>:
    395c:	bb 27       	eor	r27, r27
    395e:	aa 27       	eor	r26, r26
    3960:	0e d0       	rcall	.+28     	; 0x397e <__addsf3x>
    3962:	3c c2       	rjmp	.+1144   	; 0x3ddc <__fp_round>
    3964:	05 d2       	rcall	.+1034   	; 0x3d70 <__fp_pscA>
    3966:	30 f0       	brcs	.+12     	; 0x3974 <__addsf3+0x18>
    3968:	0a d2       	rcall	.+1044   	; 0x3d7e <__fp_pscB>
    396a:	20 f0       	brcs	.+8      	; 0x3974 <__addsf3+0x18>
    396c:	31 f4       	brne	.+12     	; 0x397a <__addsf3+0x1e>
    396e:	9f 3f       	cpi	r25, 0xFF	; 255
    3970:	11 f4       	brne	.+4      	; 0x3976 <__addsf3+0x1a>
    3972:	1e f4       	brtc	.+6      	; 0x397a <__addsf3+0x1e>
    3974:	d5 c1       	rjmp	.+938    	; 0x3d20 <__fp_nan>
    3976:	0e f4       	brtc	.+2      	; 0x397a <__addsf3+0x1e>
    3978:	e0 95       	com	r30
    397a:	e7 fb       	bst	r30, 7
    397c:	a2 c1       	rjmp	.+836    	; 0x3cc2 <__fp_inf>

0000397e <__addsf3x>:
    397e:	e9 2f       	mov	r30, r25
    3980:	4f d2       	rcall	.+1182   	; 0x3e20 <__fp_split3>
    3982:	80 f3       	brcs	.-32     	; 0x3964 <__addsf3+0x8>
    3984:	ba 17       	cp	r27, r26
    3986:	62 07       	cpc	r22, r18
    3988:	73 07       	cpc	r23, r19
    398a:	84 07       	cpc	r24, r20
    398c:	95 07       	cpc	r25, r21
    398e:	18 f0       	brcs	.+6      	; 0x3996 <__addsf3x+0x18>
    3990:	71 f4       	brne	.+28     	; 0x39ae <__addsf3x+0x30>
    3992:	9e f5       	brtc	.+102    	; 0x39fa <__addsf3x+0x7c>
    3994:	7e c2       	rjmp	.+1276   	; 0x3e92 <__fp_zero>
    3996:	0e f4       	brtc	.+2      	; 0x399a <__addsf3x+0x1c>
    3998:	e0 95       	com	r30
    399a:	0b 2e       	mov	r0, r27
    399c:	ba 2f       	mov	r27, r26
    399e:	a0 2d       	mov	r26, r0
    39a0:	0b 01       	movw	r0, r22
    39a2:	b9 01       	movw	r22, r18
    39a4:	90 01       	movw	r18, r0
    39a6:	0c 01       	movw	r0, r24
    39a8:	ca 01       	movw	r24, r20
    39aa:	a0 01       	movw	r20, r0
    39ac:	11 24       	eor	r1, r1
    39ae:	ff 27       	eor	r31, r31
    39b0:	59 1b       	sub	r21, r25
    39b2:	99 f0       	breq	.+38     	; 0x39da <__addsf3x+0x5c>
    39b4:	59 3f       	cpi	r21, 0xF9	; 249
    39b6:	50 f4       	brcc	.+20     	; 0x39cc <__addsf3x+0x4e>
    39b8:	50 3e       	cpi	r21, 0xE0	; 224
    39ba:	68 f1       	brcs	.+90     	; 0x3a16 <__addsf3x+0x98>
    39bc:	1a 16       	cp	r1, r26
    39be:	f0 40       	sbci	r31, 0x00	; 0
    39c0:	a2 2f       	mov	r26, r18
    39c2:	23 2f       	mov	r18, r19
    39c4:	34 2f       	mov	r19, r20
    39c6:	44 27       	eor	r20, r20
    39c8:	58 5f       	subi	r21, 0xF8	; 248
    39ca:	f3 cf       	rjmp	.-26     	; 0x39b2 <__addsf3x+0x34>
    39cc:	46 95       	lsr	r20
    39ce:	37 95       	ror	r19
    39d0:	27 95       	ror	r18
    39d2:	a7 95       	ror	r26
    39d4:	f0 40       	sbci	r31, 0x00	; 0
    39d6:	53 95       	inc	r21
    39d8:	c9 f7       	brne	.-14     	; 0x39cc <__addsf3x+0x4e>
    39da:	7e f4       	brtc	.+30     	; 0x39fa <__addsf3x+0x7c>
    39dc:	1f 16       	cp	r1, r31
    39de:	ba 0b       	sbc	r27, r26
    39e0:	62 0b       	sbc	r22, r18
    39e2:	73 0b       	sbc	r23, r19
    39e4:	84 0b       	sbc	r24, r20
    39e6:	ba f0       	brmi	.+46     	; 0x3a16 <__addsf3x+0x98>
    39e8:	91 50       	subi	r25, 0x01	; 1
    39ea:	a1 f0       	breq	.+40     	; 0x3a14 <__addsf3x+0x96>
    39ec:	ff 0f       	add	r31, r31
    39ee:	bb 1f       	adc	r27, r27
    39f0:	66 1f       	adc	r22, r22
    39f2:	77 1f       	adc	r23, r23
    39f4:	88 1f       	adc	r24, r24
    39f6:	c2 f7       	brpl	.-16     	; 0x39e8 <__addsf3x+0x6a>
    39f8:	0e c0       	rjmp	.+28     	; 0x3a16 <__addsf3x+0x98>
    39fa:	ba 0f       	add	r27, r26
    39fc:	62 1f       	adc	r22, r18
    39fe:	73 1f       	adc	r23, r19
    3a00:	84 1f       	adc	r24, r20
    3a02:	48 f4       	brcc	.+18     	; 0x3a16 <__addsf3x+0x98>
    3a04:	87 95       	ror	r24
    3a06:	77 95       	ror	r23
    3a08:	67 95       	ror	r22
    3a0a:	b7 95       	ror	r27
    3a0c:	f7 95       	ror	r31
    3a0e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a10:	08 f0       	brcs	.+2      	; 0x3a14 <__addsf3x+0x96>
    3a12:	b3 cf       	rjmp	.-154    	; 0x397a <__addsf3+0x1e>
    3a14:	93 95       	inc	r25
    3a16:	88 0f       	add	r24, r24
    3a18:	08 f0       	brcs	.+2      	; 0x3a1c <__addsf3x+0x9e>
    3a1a:	99 27       	eor	r25, r25
    3a1c:	ee 0f       	add	r30, r30
    3a1e:	97 95       	ror	r25
    3a20:	87 95       	ror	r24
    3a22:	08 95       	ret

00003a24 <atan>:
    3a24:	df 93       	push	r29
    3a26:	dd 27       	eor	r29, r29
    3a28:	b9 2f       	mov	r27, r25
    3a2a:	bf 77       	andi	r27, 0x7F	; 127
    3a2c:	40 e8       	ldi	r20, 0x80	; 128
    3a2e:	5f e3       	ldi	r21, 0x3F	; 63
    3a30:	16 16       	cp	r1, r22
    3a32:	17 06       	cpc	r1, r23
    3a34:	48 07       	cpc	r20, r24
    3a36:	5b 07       	cpc	r21, r27
    3a38:	10 f4       	brcc	.+4      	; 0x3a3e <atan+0x1a>
    3a3a:	d9 2f       	mov	r29, r25
    3a3c:	96 d2       	rcall	.+1324   	; 0x3f6a <inverse>
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	7f 93       	push	r23
    3a44:	6f 93       	push	r22
    3a46:	fc d3       	rcall	.+2040   	; 0x4240 <square>
    3a48:	e8 e6       	ldi	r30, 0x68	; 104
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	6c d1       	rcall	.+728    	; 0x3d26 <__fp_powser>
    3a4e:	c6 d1       	rcall	.+908    	; 0x3ddc <__fp_round>
    3a50:	2f 91       	pop	r18
    3a52:	3f 91       	pop	r19
    3a54:	4f 91       	pop	r20
    3a56:	5f 91       	pop	r21
    3a58:	34 d3       	rcall	.+1640   	; 0x40c2 <__mulsf3x>
    3a5a:	dd 23       	and	r29, r29
    3a5c:	49 f0       	breq	.+18     	; 0x3a70 <atan+0x4c>
    3a5e:	90 58       	subi	r25, 0x80	; 128
    3a60:	a2 ea       	ldi	r26, 0xA2	; 162
    3a62:	2a ed       	ldi	r18, 0xDA	; 218
    3a64:	3f e0       	ldi	r19, 0x0F	; 15
    3a66:	49 ec       	ldi	r20, 0xC9	; 201
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	d0 78       	andi	r29, 0x80	; 128
    3a6c:	5d 27       	eor	r21, r29
    3a6e:	87 df       	rcall	.-242    	; 0x397e <__addsf3x>
    3a70:	df 91       	pop	r29
    3a72:	b4 c1       	rjmp	.+872    	; 0x3ddc <__fp_round>

00003a74 <ceil>:
    3a74:	f7 d1       	rcall	.+1006   	; 0x3e64 <__fp_trunc>
    3a76:	80 f0       	brcs	.+32     	; 0x3a98 <ceil+0x24>
    3a78:	9f 37       	cpi	r25, 0x7F	; 127
    3a7a:	40 f4       	brcc	.+16     	; 0x3a8c <ceil+0x18>
    3a7c:	91 11       	cpse	r25, r1
    3a7e:	0e f4       	brtc	.+2      	; 0x3a82 <ceil+0xe>
    3a80:	09 c2       	rjmp	.+1042   	; 0x3e94 <__fp_szero>
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	80 e8       	ldi	r24, 0x80	; 128
    3a88:	9f e3       	ldi	r25, 0x3F	; 63
    3a8a:	08 95       	ret
    3a8c:	26 f0       	brts	.+8      	; 0x3a96 <ceil+0x22>
    3a8e:	1b 16       	cp	r1, r27
    3a90:	61 1d       	adc	r22, r1
    3a92:	71 1d       	adc	r23, r1
    3a94:	81 1d       	adc	r24, r1
    3a96:	1b c1       	rjmp	.+566    	; 0x3cce <__fp_mintl>
    3a98:	35 c1       	rjmp	.+618    	; 0x3d04 <__fp_mpack>

00003a9a <__cmpsf2>:
    3a9a:	ef d0       	rcall	.+478    	; 0x3c7a <__fp_cmp>
    3a9c:	08 f4       	brcc	.+2      	; 0x3aa0 <__cmpsf2+0x6>
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	08 95       	ret

00003aa2 <cos>:
    3aa2:	75 d1       	rcall	.+746    	; 0x3d8e <__fp_rempio2>
    3aa4:	e3 95       	inc	r30
    3aa6:	ab c1       	rjmp	.+854    	; 0x3dfe <__fp_sinus>

00003aa8 <__divsf3>:
    3aa8:	0c d0       	rcall	.+24     	; 0x3ac2 <__divsf3x>
    3aaa:	98 c1       	rjmp	.+816    	; 0x3ddc <__fp_round>
    3aac:	68 d1       	rcall	.+720    	; 0x3d7e <__fp_pscB>
    3aae:	40 f0       	brcs	.+16     	; 0x3ac0 <__divsf3+0x18>
    3ab0:	5f d1       	rcall	.+702    	; 0x3d70 <__fp_pscA>
    3ab2:	30 f0       	brcs	.+12     	; 0x3ac0 <__divsf3+0x18>
    3ab4:	21 f4       	brne	.+8      	; 0x3abe <__divsf3+0x16>
    3ab6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ab8:	19 f0       	breq	.+6      	; 0x3ac0 <__divsf3+0x18>
    3aba:	03 c1       	rjmp	.+518    	; 0x3cc2 <__fp_inf>
    3abc:	51 11       	cpse	r21, r1
    3abe:	ea c1       	rjmp	.+980    	; 0x3e94 <__fp_szero>
    3ac0:	2f c1       	rjmp	.+606    	; 0x3d20 <__fp_nan>

00003ac2 <__divsf3x>:
    3ac2:	ae d1       	rcall	.+860    	; 0x3e20 <__fp_split3>
    3ac4:	98 f3       	brcs	.-26     	; 0x3aac <__divsf3+0x4>

00003ac6 <__divsf3_pse>:
    3ac6:	99 23       	and	r25, r25
    3ac8:	c9 f3       	breq	.-14     	; 0x3abc <__divsf3+0x14>
    3aca:	55 23       	and	r21, r21
    3acc:	b1 f3       	breq	.-20     	; 0x3aba <__divsf3+0x12>
    3ace:	95 1b       	sub	r25, r21
    3ad0:	55 0b       	sbc	r21, r21
    3ad2:	bb 27       	eor	r27, r27
    3ad4:	aa 27       	eor	r26, r26
    3ad6:	62 17       	cp	r22, r18
    3ad8:	73 07       	cpc	r23, r19
    3ada:	84 07       	cpc	r24, r20
    3adc:	38 f0       	brcs	.+14     	; 0x3aec <__divsf3_pse+0x26>
    3ade:	9f 5f       	subi	r25, 0xFF	; 255
    3ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae2:	22 0f       	add	r18, r18
    3ae4:	33 1f       	adc	r19, r19
    3ae6:	44 1f       	adc	r20, r20
    3ae8:	aa 1f       	adc	r26, r26
    3aea:	a9 f3       	breq	.-22     	; 0x3ad6 <__divsf3_pse+0x10>
    3aec:	33 d0       	rcall	.+102    	; 0x3b54 <__divsf3_pse+0x8e>
    3aee:	0e 2e       	mov	r0, r30
    3af0:	3a f0       	brmi	.+14     	; 0x3b00 <__divsf3_pse+0x3a>
    3af2:	e0 e8       	ldi	r30, 0x80	; 128
    3af4:	30 d0       	rcall	.+96     	; 0x3b56 <__divsf3_pse+0x90>
    3af6:	91 50       	subi	r25, 0x01	; 1
    3af8:	50 40       	sbci	r21, 0x00	; 0
    3afa:	e6 95       	lsr	r30
    3afc:	00 1c       	adc	r0, r0
    3afe:	ca f7       	brpl	.-14     	; 0x3af2 <__divsf3_pse+0x2c>
    3b00:	29 d0       	rcall	.+82     	; 0x3b54 <__divsf3_pse+0x8e>
    3b02:	fe 2f       	mov	r31, r30
    3b04:	27 d0       	rcall	.+78     	; 0x3b54 <__divsf3_pse+0x8e>
    3b06:	66 0f       	add	r22, r22
    3b08:	77 1f       	adc	r23, r23
    3b0a:	88 1f       	adc	r24, r24
    3b0c:	bb 1f       	adc	r27, r27
    3b0e:	26 17       	cp	r18, r22
    3b10:	37 07       	cpc	r19, r23
    3b12:	48 07       	cpc	r20, r24
    3b14:	ab 07       	cpc	r26, r27
    3b16:	b0 e8       	ldi	r27, 0x80	; 128
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <__divsf3_pse+0x56>
    3b1a:	bb 0b       	sbc	r27, r27
    3b1c:	80 2d       	mov	r24, r0
    3b1e:	bf 01       	movw	r22, r30
    3b20:	ff 27       	eor	r31, r31
    3b22:	93 58       	subi	r25, 0x83	; 131
    3b24:	5f 4f       	sbci	r21, 0xFF	; 255
    3b26:	2a f0       	brmi	.+10     	; 0x3b32 <__divsf3_pse+0x6c>
    3b28:	9e 3f       	cpi	r25, 0xFE	; 254
    3b2a:	51 05       	cpc	r21, r1
    3b2c:	68 f0       	brcs	.+26     	; 0x3b48 <__divsf3_pse+0x82>
    3b2e:	c9 c0       	rjmp	.+402    	; 0x3cc2 <__fp_inf>
    3b30:	b1 c1       	rjmp	.+866    	; 0x3e94 <__fp_szero>
    3b32:	5f 3f       	cpi	r21, 0xFF	; 255
    3b34:	ec f3       	brlt	.-6      	; 0x3b30 <__divsf3_pse+0x6a>
    3b36:	98 3e       	cpi	r25, 0xE8	; 232
    3b38:	dc f3       	brlt	.-10     	; 0x3b30 <__divsf3_pse+0x6a>
    3b3a:	86 95       	lsr	r24
    3b3c:	77 95       	ror	r23
    3b3e:	67 95       	ror	r22
    3b40:	b7 95       	ror	r27
    3b42:	f7 95       	ror	r31
    3b44:	9f 5f       	subi	r25, 0xFF	; 255
    3b46:	c9 f7       	brne	.-14     	; 0x3b3a <__divsf3_pse+0x74>
    3b48:	88 0f       	add	r24, r24
    3b4a:	91 1d       	adc	r25, r1
    3b4c:	96 95       	lsr	r25
    3b4e:	87 95       	ror	r24
    3b50:	97 f9       	bld	r25, 7
    3b52:	08 95       	ret
    3b54:	e1 e0       	ldi	r30, 0x01	; 1
    3b56:	66 0f       	add	r22, r22
    3b58:	77 1f       	adc	r23, r23
    3b5a:	88 1f       	adc	r24, r24
    3b5c:	bb 1f       	adc	r27, r27
    3b5e:	62 17       	cp	r22, r18
    3b60:	73 07       	cpc	r23, r19
    3b62:	84 07       	cpc	r24, r20
    3b64:	ba 07       	cpc	r27, r26
    3b66:	20 f0       	brcs	.+8      	; 0x3b70 <__divsf3_pse+0xaa>
    3b68:	62 1b       	sub	r22, r18
    3b6a:	73 0b       	sbc	r23, r19
    3b6c:	84 0b       	sbc	r24, r20
    3b6e:	ba 0b       	sbc	r27, r26
    3b70:	ee 1f       	adc	r30, r30
    3b72:	88 f7       	brcc	.-30     	; 0x3b56 <__divsf3_pse+0x90>
    3b74:	e0 95       	com	r30
    3b76:	08 95       	ret

00003b78 <__fixsfsi>:
    3b78:	04 d0       	rcall	.+8      	; 0x3b82 <__fixunssfsi>
    3b7a:	68 94       	set
    3b7c:	b1 11       	cpse	r27, r1
    3b7e:	8a c1       	rjmp	.+788    	; 0x3e94 <__fp_szero>
    3b80:	08 95       	ret

00003b82 <__fixunssfsi>:
    3b82:	56 d1       	rcall	.+684    	; 0x3e30 <__fp_splitA>
    3b84:	88 f0       	brcs	.+34     	; 0x3ba8 <__fixunssfsi+0x26>
    3b86:	9f 57       	subi	r25, 0x7F	; 127
    3b88:	90 f0       	brcs	.+36     	; 0x3bae <__fixunssfsi+0x2c>
    3b8a:	b9 2f       	mov	r27, r25
    3b8c:	99 27       	eor	r25, r25
    3b8e:	b7 51       	subi	r27, 0x17	; 23
    3b90:	a0 f0       	brcs	.+40     	; 0x3bba <__fixunssfsi+0x38>
    3b92:	d1 f0       	breq	.+52     	; 0x3bc8 <__fixunssfsi+0x46>
    3b94:	66 0f       	add	r22, r22
    3b96:	77 1f       	adc	r23, r23
    3b98:	88 1f       	adc	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	1a f0       	brmi	.+6      	; 0x3ba4 <__fixunssfsi+0x22>
    3b9e:	ba 95       	dec	r27
    3ba0:	c9 f7       	brne	.-14     	; 0x3b94 <__fixunssfsi+0x12>
    3ba2:	12 c0       	rjmp	.+36     	; 0x3bc8 <__fixunssfsi+0x46>
    3ba4:	b1 30       	cpi	r27, 0x01	; 1
    3ba6:	81 f0       	breq	.+32     	; 0x3bc8 <__fixunssfsi+0x46>
    3ba8:	74 d1       	rcall	.+744    	; 0x3e92 <__fp_zero>
    3baa:	b1 e0       	ldi	r27, 0x01	; 1
    3bac:	08 95       	ret
    3bae:	71 c1       	rjmp	.+738    	; 0x3e92 <__fp_zero>
    3bb0:	67 2f       	mov	r22, r23
    3bb2:	78 2f       	mov	r23, r24
    3bb4:	88 27       	eor	r24, r24
    3bb6:	b8 5f       	subi	r27, 0xF8	; 248
    3bb8:	39 f0       	breq	.+14     	; 0x3bc8 <__fixunssfsi+0x46>
    3bba:	b9 3f       	cpi	r27, 0xF9	; 249
    3bbc:	cc f3       	brlt	.-14     	; 0x3bb0 <__fixunssfsi+0x2e>
    3bbe:	86 95       	lsr	r24
    3bc0:	77 95       	ror	r23
    3bc2:	67 95       	ror	r22
    3bc4:	b3 95       	inc	r27
    3bc6:	d9 f7       	brne	.-10     	; 0x3bbe <__fixunssfsi+0x3c>
    3bc8:	3e f4       	brtc	.+14     	; 0x3bd8 <__fixunssfsi+0x56>
    3bca:	90 95       	com	r25
    3bcc:	80 95       	com	r24
    3bce:	70 95       	com	r23
    3bd0:	61 95       	neg	r22
    3bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	08 95       	ret

00003bda <__floatunsisf>:
    3bda:	e8 94       	clt
    3bdc:	09 c0       	rjmp	.+18     	; 0x3bf0 <__floatsisf+0x12>

00003bde <__floatsisf>:
    3bde:	97 fb       	bst	r25, 7
    3be0:	3e f4       	brtc	.+14     	; 0x3bf0 <__floatsisf+0x12>
    3be2:	90 95       	com	r25
    3be4:	80 95       	com	r24
    3be6:	70 95       	com	r23
    3be8:	61 95       	neg	r22
    3bea:	7f 4f       	sbci	r23, 0xFF	; 255
    3bec:	8f 4f       	sbci	r24, 0xFF	; 255
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	99 23       	and	r25, r25
    3bf2:	a9 f0       	breq	.+42     	; 0x3c1e <__floatsisf+0x40>
    3bf4:	f9 2f       	mov	r31, r25
    3bf6:	96 e9       	ldi	r25, 0x96	; 150
    3bf8:	bb 27       	eor	r27, r27
    3bfa:	93 95       	inc	r25
    3bfc:	f6 95       	lsr	r31
    3bfe:	87 95       	ror	r24
    3c00:	77 95       	ror	r23
    3c02:	67 95       	ror	r22
    3c04:	b7 95       	ror	r27
    3c06:	f1 11       	cpse	r31, r1
    3c08:	f8 cf       	rjmp	.-16     	; 0x3bfa <__floatsisf+0x1c>
    3c0a:	fa f4       	brpl	.+62     	; 0x3c4a <__floatsisf+0x6c>
    3c0c:	bb 0f       	add	r27, r27
    3c0e:	11 f4       	brne	.+4      	; 0x3c14 <__floatsisf+0x36>
    3c10:	60 ff       	sbrs	r22, 0
    3c12:	1b c0       	rjmp	.+54     	; 0x3c4a <__floatsisf+0x6c>
    3c14:	6f 5f       	subi	r22, 0xFF	; 255
    3c16:	7f 4f       	sbci	r23, 0xFF	; 255
    3c18:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	16 c0       	rjmp	.+44     	; 0x3c4a <__floatsisf+0x6c>
    3c1e:	88 23       	and	r24, r24
    3c20:	11 f0       	breq	.+4      	; 0x3c26 <__floatsisf+0x48>
    3c22:	96 e9       	ldi	r25, 0x96	; 150
    3c24:	11 c0       	rjmp	.+34     	; 0x3c48 <__floatsisf+0x6a>
    3c26:	77 23       	and	r23, r23
    3c28:	21 f0       	breq	.+8      	; 0x3c32 <__floatsisf+0x54>
    3c2a:	9e e8       	ldi	r25, 0x8E	; 142
    3c2c:	87 2f       	mov	r24, r23
    3c2e:	76 2f       	mov	r23, r22
    3c30:	05 c0       	rjmp	.+10     	; 0x3c3c <__floatsisf+0x5e>
    3c32:	66 23       	and	r22, r22
    3c34:	71 f0       	breq	.+28     	; 0x3c52 <__floatsisf+0x74>
    3c36:	96 e8       	ldi	r25, 0x86	; 134
    3c38:	86 2f       	mov	r24, r22
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	2a f0       	brmi	.+10     	; 0x3c4a <__floatsisf+0x6c>
    3c40:	9a 95       	dec	r25
    3c42:	66 0f       	add	r22, r22
    3c44:	77 1f       	adc	r23, r23
    3c46:	88 1f       	adc	r24, r24
    3c48:	da f7       	brpl	.-10     	; 0x3c40 <__floatsisf+0x62>
    3c4a:	88 0f       	add	r24, r24
    3c4c:	96 95       	lsr	r25
    3c4e:	87 95       	ror	r24
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <floor>:
    3c54:	07 d1       	rcall	.+526    	; 0x3e64 <__fp_trunc>
    3c56:	80 f0       	brcs	.+32     	; 0x3c78 <floor+0x24>
    3c58:	9f 37       	cpi	r25, 0x7F	; 127
    3c5a:	40 f4       	brcc	.+16     	; 0x3c6c <floor+0x18>
    3c5c:	91 11       	cpse	r25, r1
    3c5e:	0e f0       	brts	.+2      	; 0x3c62 <floor+0xe>
    3c60:	19 c1       	rjmp	.+562    	; 0x3e94 <__fp_szero>
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	70 e0       	ldi	r23, 0x00	; 0
    3c66:	80 e8       	ldi	r24, 0x80	; 128
    3c68:	9f eb       	ldi	r25, 0xBF	; 191
    3c6a:	08 95       	ret
    3c6c:	26 f4       	brtc	.+8      	; 0x3c76 <floor+0x22>
    3c6e:	1b 16       	cp	r1, r27
    3c70:	61 1d       	adc	r22, r1
    3c72:	71 1d       	adc	r23, r1
    3c74:	81 1d       	adc	r24, r1
    3c76:	2b c0       	rjmp	.+86     	; 0x3cce <__fp_mintl>
    3c78:	45 c0       	rjmp	.+138    	; 0x3d04 <__fp_mpack>

00003c7a <__fp_cmp>:
    3c7a:	99 0f       	add	r25, r25
    3c7c:	00 08       	sbc	r0, r0
    3c7e:	55 0f       	add	r21, r21
    3c80:	aa 0b       	sbc	r26, r26
    3c82:	e0 e8       	ldi	r30, 0x80	; 128
    3c84:	fe ef       	ldi	r31, 0xFE	; 254
    3c86:	16 16       	cp	r1, r22
    3c88:	17 06       	cpc	r1, r23
    3c8a:	e8 07       	cpc	r30, r24
    3c8c:	f9 07       	cpc	r31, r25
    3c8e:	c0 f0       	brcs	.+48     	; 0x3cc0 <__fp_cmp+0x46>
    3c90:	12 16       	cp	r1, r18
    3c92:	13 06       	cpc	r1, r19
    3c94:	e4 07       	cpc	r30, r20
    3c96:	f5 07       	cpc	r31, r21
    3c98:	98 f0       	brcs	.+38     	; 0x3cc0 <__fp_cmp+0x46>
    3c9a:	62 1b       	sub	r22, r18
    3c9c:	73 0b       	sbc	r23, r19
    3c9e:	84 0b       	sbc	r24, r20
    3ca0:	95 0b       	sbc	r25, r21
    3ca2:	39 f4       	brne	.+14     	; 0x3cb2 <__fp_cmp+0x38>
    3ca4:	0a 26       	eor	r0, r26
    3ca6:	61 f0       	breq	.+24     	; 0x3cc0 <__fp_cmp+0x46>
    3ca8:	23 2b       	or	r18, r19
    3caa:	24 2b       	or	r18, r20
    3cac:	25 2b       	or	r18, r21
    3cae:	21 f4       	brne	.+8      	; 0x3cb8 <__fp_cmp+0x3e>
    3cb0:	08 95       	ret
    3cb2:	0a 26       	eor	r0, r26
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <__fp_cmp+0x3e>
    3cb6:	a1 40       	sbci	r26, 0x01	; 1
    3cb8:	a6 95       	lsr	r26
    3cba:	8f ef       	ldi	r24, 0xFF	; 255
    3cbc:	81 1d       	adc	r24, r1
    3cbe:	81 1d       	adc	r24, r1
    3cc0:	08 95       	ret

00003cc2 <__fp_inf>:
    3cc2:	97 f9       	bld	r25, 7
    3cc4:	9f 67       	ori	r25, 0x7F	; 127
    3cc6:	80 e8       	ldi	r24, 0x80	; 128
    3cc8:	70 e0       	ldi	r23, 0x00	; 0
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	08 95       	ret

00003cce <__fp_mintl>:
    3cce:	88 23       	and	r24, r24
    3cd0:	71 f4       	brne	.+28     	; 0x3cee <__fp_mintl+0x20>
    3cd2:	77 23       	and	r23, r23
    3cd4:	21 f0       	breq	.+8      	; 0x3cde <__fp_mintl+0x10>
    3cd6:	98 50       	subi	r25, 0x08	; 8
    3cd8:	87 2b       	or	r24, r23
    3cda:	76 2f       	mov	r23, r22
    3cdc:	07 c0       	rjmp	.+14     	; 0x3cec <__fp_mintl+0x1e>
    3cde:	66 23       	and	r22, r22
    3ce0:	11 f4       	brne	.+4      	; 0x3ce6 <__fp_mintl+0x18>
    3ce2:	99 27       	eor	r25, r25
    3ce4:	0d c0       	rjmp	.+26     	; 0x3d00 <__fp_mintl+0x32>
    3ce6:	90 51       	subi	r25, 0x10	; 16
    3ce8:	86 2b       	or	r24, r22
    3cea:	70 e0       	ldi	r23, 0x00	; 0
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	2a f0       	brmi	.+10     	; 0x3cfa <__fp_mintl+0x2c>
    3cf0:	9a 95       	dec	r25
    3cf2:	66 0f       	add	r22, r22
    3cf4:	77 1f       	adc	r23, r23
    3cf6:	88 1f       	adc	r24, r24
    3cf8:	da f7       	brpl	.-10     	; 0x3cf0 <__fp_mintl+0x22>
    3cfa:	88 0f       	add	r24, r24
    3cfc:	96 95       	lsr	r25
    3cfe:	87 95       	ror	r24
    3d00:	97 f9       	bld	r25, 7
    3d02:	08 95       	ret

00003d04 <__fp_mpack>:
    3d04:	9f 3f       	cpi	r25, 0xFF	; 255
    3d06:	31 f0       	breq	.+12     	; 0x3d14 <__fp_mpack_finite+0xc>

00003d08 <__fp_mpack_finite>:
    3d08:	91 50       	subi	r25, 0x01	; 1
    3d0a:	20 f4       	brcc	.+8      	; 0x3d14 <__fp_mpack_finite+0xc>
    3d0c:	87 95       	ror	r24
    3d0e:	77 95       	ror	r23
    3d10:	67 95       	ror	r22
    3d12:	b7 95       	ror	r27
    3d14:	88 0f       	add	r24, r24
    3d16:	91 1d       	adc	r25, r1
    3d18:	96 95       	lsr	r25
    3d1a:	87 95       	ror	r24
    3d1c:	97 f9       	bld	r25, 7
    3d1e:	08 95       	ret

00003d20 <__fp_nan>:
    3d20:	9f ef       	ldi	r25, 0xFF	; 255
    3d22:	80 ec       	ldi	r24, 0xC0	; 192
    3d24:	08 95       	ret

00003d26 <__fp_powser>:
    3d26:	df 93       	push	r29
    3d28:	cf 93       	push	r28
    3d2a:	1f 93       	push	r17
    3d2c:	0f 93       	push	r16
    3d2e:	ff 92       	push	r15
    3d30:	ef 92       	push	r14
    3d32:	df 92       	push	r13
    3d34:	7b 01       	movw	r14, r22
    3d36:	8c 01       	movw	r16, r24
    3d38:	68 94       	set
    3d3a:	05 c0       	rjmp	.+10     	; 0x3d46 <__fp_powser+0x20>
    3d3c:	da 2e       	mov	r13, r26
    3d3e:	ef 01       	movw	r28, r30
    3d40:	c0 d1       	rcall	.+896    	; 0x40c2 <__mulsf3x>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e8 94       	clt
    3d46:	a5 91       	lpm	r26, Z+
    3d48:	25 91       	lpm	r18, Z+
    3d4a:	35 91       	lpm	r19, Z+
    3d4c:	45 91       	lpm	r20, Z+
    3d4e:	55 91       	lpm	r21, Z+
    3d50:	ae f3       	brts	.-22     	; 0x3d3c <__fp_powser+0x16>
    3d52:	ef 01       	movw	r28, r30
    3d54:	14 de       	rcall	.-984    	; 0x397e <__addsf3x>
    3d56:	fe 01       	movw	r30, r28
    3d58:	97 01       	movw	r18, r14
    3d5a:	a8 01       	movw	r20, r16
    3d5c:	da 94       	dec	r13
    3d5e:	79 f7       	brne	.-34     	; 0x3d3e <__fp_powser+0x18>
    3d60:	df 90       	pop	r13
    3d62:	ef 90       	pop	r14
    3d64:	ff 90       	pop	r15
    3d66:	0f 91       	pop	r16
    3d68:	1f 91       	pop	r17
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	08 95       	ret

00003d70 <__fp_pscA>:
    3d70:	00 24       	eor	r0, r0
    3d72:	0a 94       	dec	r0
    3d74:	16 16       	cp	r1, r22
    3d76:	17 06       	cpc	r1, r23
    3d78:	18 06       	cpc	r1, r24
    3d7a:	09 06       	cpc	r0, r25
    3d7c:	08 95       	ret

00003d7e <__fp_pscB>:
    3d7e:	00 24       	eor	r0, r0
    3d80:	0a 94       	dec	r0
    3d82:	12 16       	cp	r1, r18
    3d84:	13 06       	cpc	r1, r19
    3d86:	14 06       	cpc	r1, r20
    3d88:	05 06       	cpc	r0, r21
    3d8a:	08 95       	ret
    3d8c:	c9 cf       	rjmp	.-110    	; 0x3d20 <__fp_nan>

00003d8e <__fp_rempio2>:
    3d8e:	50 d0       	rcall	.+160    	; 0x3e30 <__fp_splitA>
    3d90:	e8 f3       	brcs	.-6      	; 0x3d8c <__fp_pscB+0xe>
    3d92:	e8 94       	clt
    3d94:	e0 e0       	ldi	r30, 0x00	; 0
    3d96:	bb 27       	eor	r27, r27
    3d98:	9f 57       	subi	r25, 0x7F	; 127
    3d9a:	f0 f0       	brcs	.+60     	; 0x3dd8 <__fp_rempio2+0x4a>
    3d9c:	2a ed       	ldi	r18, 0xDA	; 218
    3d9e:	3f e0       	ldi	r19, 0x0F	; 15
    3da0:	49 ec       	ldi	r20, 0xC9	; 201
    3da2:	06 c0       	rjmp	.+12     	; 0x3db0 <__fp_rempio2+0x22>
    3da4:	ee 0f       	add	r30, r30
    3da6:	bb 0f       	add	r27, r27
    3da8:	66 1f       	adc	r22, r22
    3daa:	77 1f       	adc	r23, r23
    3dac:	88 1f       	adc	r24, r24
    3dae:	28 f0       	brcs	.+10     	; 0x3dba <__fp_rempio2+0x2c>
    3db0:	b2 3a       	cpi	r27, 0xA2	; 162
    3db2:	62 07       	cpc	r22, r18
    3db4:	73 07       	cpc	r23, r19
    3db6:	84 07       	cpc	r24, r20
    3db8:	28 f0       	brcs	.+10     	; 0x3dc4 <__fp_rempio2+0x36>
    3dba:	b2 5a       	subi	r27, 0xA2	; 162
    3dbc:	62 0b       	sbc	r22, r18
    3dbe:	73 0b       	sbc	r23, r19
    3dc0:	84 0b       	sbc	r24, r20
    3dc2:	e3 95       	inc	r30
    3dc4:	9a 95       	dec	r25
    3dc6:	72 f7       	brpl	.-36     	; 0x3da4 <__fp_rempio2+0x16>
    3dc8:	80 38       	cpi	r24, 0x80	; 128
    3dca:	30 f4       	brcc	.+12     	; 0x3dd8 <__fp_rempio2+0x4a>
    3dcc:	9a 95       	dec	r25
    3dce:	bb 0f       	add	r27, r27
    3dd0:	66 1f       	adc	r22, r22
    3dd2:	77 1f       	adc	r23, r23
    3dd4:	88 1f       	adc	r24, r24
    3dd6:	d2 f7       	brpl	.-12     	; 0x3dcc <__fp_rempio2+0x3e>
    3dd8:	90 48       	sbci	r25, 0x80	; 128
    3dda:	96 cf       	rjmp	.-212    	; 0x3d08 <__fp_mpack_finite>

00003ddc <__fp_round>:
    3ddc:	09 2e       	mov	r0, r25
    3dde:	03 94       	inc	r0
    3de0:	00 0c       	add	r0, r0
    3de2:	11 f4       	brne	.+4      	; 0x3de8 <__fp_round+0xc>
    3de4:	88 23       	and	r24, r24
    3de6:	52 f0       	brmi	.+20     	; 0x3dfc <__fp_round+0x20>
    3de8:	bb 0f       	add	r27, r27
    3dea:	40 f4       	brcc	.+16     	; 0x3dfc <__fp_round+0x20>
    3dec:	bf 2b       	or	r27, r31
    3dee:	11 f4       	brne	.+4      	; 0x3df4 <__fp_round+0x18>
    3df0:	60 ff       	sbrs	r22, 0
    3df2:	04 c0       	rjmp	.+8      	; 0x3dfc <__fp_round+0x20>
    3df4:	6f 5f       	subi	r22, 0xFF	; 255
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	08 95       	ret

00003dfe <__fp_sinus>:
    3dfe:	ef 93       	push	r30
    3e00:	e0 ff       	sbrs	r30, 0
    3e02:	06 c0       	rjmp	.+12     	; 0x3e10 <__fp_sinus+0x12>
    3e04:	a2 ea       	ldi	r26, 0xA2	; 162
    3e06:	2a ed       	ldi	r18, 0xDA	; 218
    3e08:	3f e0       	ldi	r19, 0x0F	; 15
    3e0a:	49 ec       	ldi	r20, 0xC9	; 201
    3e0c:	5f eb       	ldi	r21, 0xBF	; 191
    3e0e:	b7 dd       	rcall	.-1170   	; 0x397e <__addsf3x>
    3e10:	e5 df       	rcall	.-54     	; 0x3ddc <__fp_round>
    3e12:	0f 90       	pop	r0
    3e14:	03 94       	inc	r0
    3e16:	01 fc       	sbrc	r0, 1
    3e18:	90 58       	subi	r25, 0x80	; 128
    3e1a:	e5 e9       	ldi	r30, 0x95	; 149
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	28 c2       	rjmp	.+1104   	; 0x4270 <__fp_powsodd>

00003e20 <__fp_split3>:
    3e20:	57 fd       	sbrc	r21, 7
    3e22:	90 58       	subi	r25, 0x80	; 128
    3e24:	44 0f       	add	r20, r20
    3e26:	55 1f       	adc	r21, r21
    3e28:	59 f0       	breq	.+22     	; 0x3e40 <__fp_splitA+0x10>
    3e2a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e2c:	71 f0       	breq	.+28     	; 0x3e4a <__fp_splitA+0x1a>
    3e2e:	47 95       	ror	r20

00003e30 <__fp_splitA>:
    3e30:	88 0f       	add	r24, r24
    3e32:	97 fb       	bst	r25, 7
    3e34:	99 1f       	adc	r25, r25
    3e36:	61 f0       	breq	.+24     	; 0x3e50 <__fp_splitA+0x20>
    3e38:	9f 3f       	cpi	r25, 0xFF	; 255
    3e3a:	79 f0       	breq	.+30     	; 0x3e5a <__fp_splitA+0x2a>
    3e3c:	87 95       	ror	r24
    3e3e:	08 95       	ret
    3e40:	12 16       	cp	r1, r18
    3e42:	13 06       	cpc	r1, r19
    3e44:	14 06       	cpc	r1, r20
    3e46:	55 1f       	adc	r21, r21
    3e48:	f2 cf       	rjmp	.-28     	; 0x3e2e <__fp_split3+0xe>
    3e4a:	46 95       	lsr	r20
    3e4c:	f1 df       	rcall	.-30     	; 0x3e30 <__fp_splitA>
    3e4e:	08 c0       	rjmp	.+16     	; 0x3e60 <__fp_splitA+0x30>
    3e50:	16 16       	cp	r1, r22
    3e52:	17 06       	cpc	r1, r23
    3e54:	18 06       	cpc	r1, r24
    3e56:	99 1f       	adc	r25, r25
    3e58:	f1 cf       	rjmp	.-30     	; 0x3e3c <__fp_splitA+0xc>
    3e5a:	86 95       	lsr	r24
    3e5c:	71 05       	cpc	r23, r1
    3e5e:	61 05       	cpc	r22, r1
    3e60:	08 94       	sec
    3e62:	08 95       	ret

00003e64 <__fp_trunc>:
    3e64:	e5 df       	rcall	.-54     	; 0x3e30 <__fp_splitA>
    3e66:	a0 f0       	brcs	.+40     	; 0x3e90 <__fp_trunc+0x2c>
    3e68:	be e7       	ldi	r27, 0x7E	; 126
    3e6a:	b9 17       	cp	r27, r25
    3e6c:	88 f4       	brcc	.+34     	; 0x3e90 <__fp_trunc+0x2c>
    3e6e:	bb 27       	eor	r27, r27
    3e70:	9f 38       	cpi	r25, 0x8F	; 143
    3e72:	60 f4       	brcc	.+24     	; 0x3e8c <__fp_trunc+0x28>
    3e74:	16 16       	cp	r1, r22
    3e76:	b1 1d       	adc	r27, r1
    3e78:	67 2f       	mov	r22, r23
    3e7a:	78 2f       	mov	r23, r24
    3e7c:	88 27       	eor	r24, r24
    3e7e:	98 5f       	subi	r25, 0xF8	; 248
    3e80:	f7 cf       	rjmp	.-18     	; 0x3e70 <__fp_trunc+0xc>
    3e82:	86 95       	lsr	r24
    3e84:	77 95       	ror	r23
    3e86:	67 95       	ror	r22
    3e88:	b1 1d       	adc	r27, r1
    3e8a:	93 95       	inc	r25
    3e8c:	96 39       	cpi	r25, 0x96	; 150
    3e8e:	c8 f3       	brcs	.-14     	; 0x3e82 <__fp_trunc+0x1e>
    3e90:	08 95       	ret

00003e92 <__fp_zero>:
    3e92:	e8 94       	clt

00003e94 <__fp_szero>:
    3e94:	bb 27       	eor	r27, r27
    3e96:	66 27       	eor	r22, r22
    3e98:	77 27       	eor	r23, r23
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	97 f9       	bld	r25, 7
    3e9e:	08 95       	ret

00003ea0 <__gesf2>:
    3ea0:	ec de       	rcall	.-552    	; 0x3c7a <__fp_cmp>
    3ea2:	08 f4       	brcc	.+2      	; 0x3ea6 <__gesf2+0x6>
    3ea4:	8f ef       	ldi	r24, 0xFF	; 255
    3ea6:	08 95       	ret
    3ea8:	63 df       	rcall	.-314    	; 0x3d70 <__fp_pscA>
    3eaa:	19 f0       	breq	.+6      	; 0x3eb2 <__gesf2+0x12>
    3eac:	68 df       	rcall	.-304    	; 0x3d7e <__fp_pscB>
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <__gesf2+0x12>
    3eb0:	37 cf       	rjmp	.-402    	; 0x3d20 <__fp_nan>
    3eb2:	07 cf       	rjmp	.-498    	; 0x3cc2 <__fp_inf>
    3eb4:	b9 01       	movw	r22, r18
    3eb6:	ca 01       	movw	r24, r20
    3eb8:	25 cf       	rjmp	.-438    	; 0x3d04 <__fp_mpack>

00003eba <hypot>:
    3eba:	9f 77       	andi	r25, 0x7F	; 127
    3ebc:	5f 77       	andi	r21, 0x7F	; 127
    3ebe:	b0 df       	rcall	.-160    	; 0x3e20 <__fp_split3>
    3ec0:	98 f3       	brcs	.-26     	; 0x3ea8 <__gesf2+0x8>
    3ec2:	99 23       	and	r25, r25
    3ec4:	b9 f3       	breq	.-18     	; 0x3eb4 <__gesf2+0x14>
    3ec6:	55 23       	and	r21, r21
    3ec8:	b9 f3       	breq	.-18     	; 0x3eb8 <__gesf2+0x18>
    3eca:	ff 27       	eor	r31, r31
    3ecc:	95 17       	cp	r25, r21
    3ece:	58 f4       	brcc	.+22     	; 0x3ee6 <hypot+0x2c>
    3ed0:	e5 2f       	mov	r30, r21
    3ed2:	e9 1b       	sub	r30, r25
    3ed4:	ed 30       	cpi	r30, 0x0D	; 13
    3ed6:	70 f7       	brcc	.-36     	; 0x3eb4 <__gesf2+0x14>
    3ed8:	5e 3b       	cpi	r21, 0xBE	; 190
    3eda:	10 f0       	brcs	.+4      	; 0x3ee0 <hypot+0x26>
    3edc:	f1 e4       	ldi	r31, 0x41	; 65
    3ede:	1c c0       	rjmp	.+56     	; 0x3f18 <hypot+0x5e>
    3ee0:	90 34       	cpi	r25, 0x40	; 64
    3ee2:	e0 f4       	brcc	.+56     	; 0x3f1c <hypot+0x62>
    3ee4:	0a c0       	rjmp	.+20     	; 0x3efa <hypot+0x40>
    3ee6:	e9 2f       	mov	r30, r25
    3ee8:	e5 1b       	sub	r30, r21
    3eea:	ed 30       	cpi	r30, 0x0D	; 13
    3eec:	28 f7       	brcc	.-54     	; 0x3eb8 <__gesf2+0x18>
    3eee:	9e 3b       	cpi	r25, 0xBE	; 190
    3ef0:	10 f0       	brcs	.+4      	; 0x3ef6 <hypot+0x3c>
    3ef2:	f1 e4       	ldi	r31, 0x41	; 65
    3ef4:	11 c0       	rjmp	.+34     	; 0x3f18 <hypot+0x5e>
    3ef6:	50 34       	cpi	r21, 0x40	; 64
    3ef8:	88 f4       	brcc	.+34     	; 0x3f1c <hypot+0x62>
    3efa:	f9 ea       	ldi	r31, 0xA9	; 169
    3efc:	88 23       	and	r24, r24
    3efe:	2a f0       	brmi	.+10     	; 0x3f0a <hypot+0x50>
    3f00:	9a 95       	dec	r25
    3f02:	66 0f       	add	r22, r22
    3f04:	77 1f       	adc	r23, r23
    3f06:	88 1f       	adc	r24, r24
    3f08:	da f7       	brpl	.-10     	; 0x3f00 <hypot+0x46>
    3f0a:	44 23       	and	r20, r20
    3f0c:	2a f0       	brmi	.+10     	; 0x3f18 <hypot+0x5e>
    3f0e:	5a 95       	dec	r21
    3f10:	22 0f       	add	r18, r18
    3f12:	33 1f       	adc	r19, r19
    3f14:	44 1f       	adc	r20, r20
    3f16:	da f7       	brpl	.-10     	; 0x3f0e <hypot+0x54>
    3f18:	9f 1b       	sub	r25, r31
    3f1a:	5f 1b       	sub	r21, r31
    3f1c:	ff 93       	push	r31
    3f1e:	1f 93       	push	r17
    3f20:	0f 93       	push	r16
    3f22:	ff 92       	push	r15
    3f24:	ef 92       	push	r14
    3f26:	79 01       	movw	r14, r18
    3f28:	8a 01       	movw	r16, r20
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	ab 2f       	mov	r26, r27
    3f2e:	9b 01       	movw	r18, r22
    3f30:	ac 01       	movw	r20, r24
    3f32:	c9 d0       	rcall	.+402    	; 0x40c6 <__mulsf3_pse>
    3f34:	97 01       	movw	r18, r14
    3f36:	a8 01       	movw	r20, r16
    3f38:	bf 93       	push	r27
    3f3a:	7b 01       	movw	r14, r22
    3f3c:	8c 01       	movw	r16, r24
    3f3e:	aa 27       	eor	r26, r26
    3f40:	ba 2f       	mov	r27, r26
    3f42:	b9 01       	movw	r22, r18
    3f44:	ca 01       	movw	r24, r20
    3f46:	bf d0       	rcall	.+382    	; 0x40c6 <__mulsf3_pse>
    3f48:	af 91       	pop	r26
    3f4a:	97 01       	movw	r18, r14
    3f4c:	a8 01       	movw	r20, r16
    3f4e:	ef 90       	pop	r14
    3f50:	ff 90       	pop	r15
    3f52:	0f 91       	pop	r16
    3f54:	1f 91       	pop	r17
    3f56:	13 dd       	rcall	.-1498   	; 0x397e <__addsf3x>
    3f58:	41 df       	rcall	.-382    	; 0x3ddc <__fp_round>
    3f5a:	34 d1       	rcall	.+616    	; 0x41c4 <sqrt>
    3f5c:	4f 91       	pop	r20
    3f5e:	40 ff       	sbrs	r20, 0
    3f60:	08 95       	ret
    3f62:	55 27       	eor	r21, r21
    3f64:	47 fd       	sbrc	r20, 7
    3f66:	50 95       	com	r21
    3f68:	09 c0       	rjmp	.+18     	; 0x3f7c <ldexp>

00003f6a <inverse>:
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	ac 01       	movw	r20, r24
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	80 e8       	ldi	r24, 0x80	; 128
    3f74:	9f e3       	ldi	r25, 0x3F	; 63
    3f76:	98 cd       	rjmp	.-1232   	; 0x3aa8 <__divsf3>
    3f78:	a4 ce       	rjmp	.-696    	; 0x3cc2 <__fp_inf>
    3f7a:	c4 ce       	rjmp	.-632    	; 0x3d04 <__fp_mpack>

00003f7c <ldexp>:
    3f7c:	59 df       	rcall	.-334    	; 0x3e30 <__fp_splitA>
    3f7e:	e8 f3       	brcs	.-6      	; 0x3f7a <inverse+0x10>
    3f80:	99 23       	and	r25, r25
    3f82:	d9 f3       	breq	.-10     	; 0x3f7a <inverse+0x10>
    3f84:	94 0f       	add	r25, r20
    3f86:	51 1d       	adc	r21, r1
    3f88:	bb f3       	brvs	.-18     	; 0x3f78 <inverse+0xe>
    3f8a:	91 50       	subi	r25, 0x01	; 1
    3f8c:	50 40       	sbci	r21, 0x00	; 0
    3f8e:	94 f0       	brlt	.+36     	; 0x3fb4 <ldexp+0x38>
    3f90:	59 f0       	breq	.+22     	; 0x3fa8 <ldexp+0x2c>
    3f92:	88 23       	and	r24, r24
    3f94:	32 f0       	brmi	.+12     	; 0x3fa2 <ldexp+0x26>
    3f96:	66 0f       	add	r22, r22
    3f98:	77 1f       	adc	r23, r23
    3f9a:	88 1f       	adc	r24, r24
    3f9c:	91 50       	subi	r25, 0x01	; 1
    3f9e:	50 40       	sbci	r21, 0x00	; 0
    3fa0:	c1 f7       	brne	.-16     	; 0x3f92 <ldexp+0x16>
    3fa2:	9e 3f       	cpi	r25, 0xFE	; 254
    3fa4:	51 05       	cpc	r21, r1
    3fa6:	44 f7       	brge	.-48     	; 0x3f78 <inverse+0xe>
    3fa8:	88 0f       	add	r24, r24
    3faa:	91 1d       	adc	r25, r1
    3fac:	96 95       	lsr	r25
    3fae:	87 95       	ror	r24
    3fb0:	97 f9       	bld	r25, 7
    3fb2:	08 95       	ret
    3fb4:	5f 3f       	cpi	r21, 0xFF	; 255
    3fb6:	ac f0       	brlt	.+42     	; 0x3fe2 <ldexp+0x66>
    3fb8:	98 3e       	cpi	r25, 0xE8	; 232
    3fba:	9c f0       	brlt	.+38     	; 0x3fe2 <ldexp+0x66>
    3fbc:	bb 27       	eor	r27, r27
    3fbe:	86 95       	lsr	r24
    3fc0:	77 95       	ror	r23
    3fc2:	67 95       	ror	r22
    3fc4:	b7 95       	ror	r27
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <ldexp+0x4e>
    3fc8:	b1 60       	ori	r27, 0x01	; 1
    3fca:	93 95       	inc	r25
    3fcc:	c1 f7       	brne	.-16     	; 0x3fbe <ldexp+0x42>
    3fce:	bb 0f       	add	r27, r27
    3fd0:	58 f7       	brcc	.-42     	; 0x3fa8 <ldexp+0x2c>
    3fd2:	11 f4       	brne	.+4      	; 0x3fd8 <ldexp+0x5c>
    3fd4:	60 ff       	sbrs	r22, 0
    3fd6:	e8 cf       	rjmp	.-48     	; 0x3fa8 <ldexp+0x2c>
    3fd8:	6f 5f       	subi	r22, 0xFF	; 255
    3fda:	7f 4f       	sbci	r23, 0xFF	; 255
    3fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3fde:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe0:	e3 cf       	rjmp	.-58     	; 0x3fa8 <ldexp+0x2c>
    3fe2:	58 cf       	rjmp	.-336    	; 0x3e94 <__fp_szero>

00003fe4 <lround>:
    3fe4:	25 df       	rcall	.-438    	; 0x3e30 <__fp_splitA>
    3fe6:	58 f1       	brcs	.+86     	; 0x403e <lround+0x5a>
    3fe8:	9e 57       	subi	r25, 0x7E	; 126
    3fea:	58 f1       	brcs	.+86     	; 0x4042 <lround+0x5e>
    3fec:	98 51       	subi	r25, 0x18	; 24
    3fee:	a0 f0       	brcs	.+40     	; 0x4018 <lround+0x34>
    3ff0:	e9 f0       	breq	.+58     	; 0x402c <lround+0x48>
    3ff2:	98 30       	cpi	r25, 0x08	; 8
    3ff4:	20 f5       	brcc	.+72     	; 0x403e <lround+0x5a>
    3ff6:	09 2e       	mov	r0, r25
    3ff8:	99 27       	eor	r25, r25
    3ffa:	66 0f       	add	r22, r22
    3ffc:	77 1f       	adc	r23, r23
    3ffe:	88 1f       	adc	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	0a 94       	dec	r0
    4004:	d1 f7       	brne	.-12     	; 0x3ffa <lround+0x16>
    4006:	12 c0       	rjmp	.+36     	; 0x402c <lround+0x48>
    4008:	06 2e       	mov	r0, r22
    400a:	67 2f       	mov	r22, r23
    400c:	78 2f       	mov	r23, r24
    400e:	88 27       	eor	r24, r24
    4010:	98 5f       	subi	r25, 0xF8	; 248
    4012:	11 f4       	brne	.+4      	; 0x4018 <lround+0x34>
    4014:	00 0c       	add	r0, r0
    4016:	07 c0       	rjmp	.+14     	; 0x4026 <lround+0x42>
    4018:	99 3f       	cpi	r25, 0xF9	; 249
    401a:	b4 f3       	brlt	.-20     	; 0x4008 <lround+0x24>
    401c:	86 95       	lsr	r24
    401e:	77 95       	ror	r23
    4020:	67 95       	ror	r22
    4022:	93 95       	inc	r25
    4024:	d9 f7       	brne	.-10     	; 0x401c <lround+0x38>
    4026:	61 1d       	adc	r22, r1
    4028:	71 1d       	adc	r23, r1
    402a:	81 1d       	adc	r24, r1
    402c:	3e f4       	brtc	.+14     	; 0x403c <lround+0x58>
    402e:	90 95       	com	r25
    4030:	80 95       	com	r24
    4032:	70 95       	com	r23
    4034:	61 95       	neg	r22
    4036:	7f 4f       	sbci	r23, 0xFF	; 255
    4038:	8f 4f       	sbci	r24, 0xFF	; 255
    403a:	9f 4f       	sbci	r25, 0xFF	; 255
    403c:	08 95       	ret
    403e:	68 94       	set
    4040:	29 cf       	rjmp	.-430    	; 0x3e94 <__fp_szero>
    4042:	27 cf       	rjmp	.-434    	; 0x3e92 <__fp_zero>

00004044 <modf>:
    4044:	fa 01       	movw	r30, r20
    4046:	dc 01       	movw	r26, r24
    4048:	aa 0f       	add	r26, r26
    404a:	bb 1f       	adc	r27, r27
    404c:	9b 01       	movw	r18, r22
    404e:	ac 01       	movw	r20, r24
    4050:	bf 57       	subi	r27, 0x7F	; 127
    4052:	28 f4       	brcc	.+10     	; 0x405e <modf+0x1a>
    4054:	22 27       	eor	r18, r18
    4056:	33 27       	eor	r19, r19
    4058:	44 27       	eor	r20, r20
    405a:	50 78       	andi	r21, 0x80	; 128
    405c:	1f c0       	rjmp	.+62     	; 0x409c <modf+0x58>
    405e:	b7 51       	subi	r27, 0x17	; 23
    4060:	88 f4       	brcc	.+34     	; 0x4084 <modf+0x40>
    4062:	ab 2f       	mov	r26, r27
    4064:	00 24       	eor	r0, r0
    4066:	46 95       	lsr	r20
    4068:	37 95       	ror	r19
    406a:	27 95       	ror	r18
    406c:	01 1c       	adc	r0, r1
    406e:	a3 95       	inc	r26
    4070:	d2 f3       	brmi	.-12     	; 0x4066 <modf+0x22>
    4072:	00 20       	and	r0, r0
    4074:	69 f0       	breq	.+26     	; 0x4090 <modf+0x4c>
    4076:	22 0f       	add	r18, r18
    4078:	33 1f       	adc	r19, r19
    407a:	44 1f       	adc	r20, r20
    407c:	b3 95       	inc	r27
    407e:	da f3       	brmi	.-10     	; 0x4076 <modf+0x32>
    4080:	0d d0       	rcall	.+26     	; 0x409c <modf+0x58>
    4082:	6b cc       	rjmp	.-1834   	; 0x395a <__subsf3>
    4084:	61 30       	cpi	r22, 0x01	; 1
    4086:	71 05       	cpc	r23, r1
    4088:	a0 e8       	ldi	r26, 0x80	; 128
    408a:	8a 07       	cpc	r24, r26
    408c:	b9 46       	sbci	r27, 0x69	; 105
    408e:	30 f4       	brcc	.+12     	; 0x409c <modf+0x58>
    4090:	9b 01       	movw	r18, r22
    4092:	ac 01       	movw	r20, r24
    4094:	66 27       	eor	r22, r22
    4096:	77 27       	eor	r23, r23
    4098:	88 27       	eor	r24, r24
    409a:	90 78       	andi	r25, 0x80	; 128
    409c:	30 96       	adiw	r30, 0x00	; 0
    409e:	21 f0       	breq	.+8      	; 0x40a8 <modf+0x64>
    40a0:	20 83       	st	Z, r18
    40a2:	31 83       	std	Z+1, r19	; 0x01
    40a4:	42 83       	std	Z+2, r20	; 0x02
    40a6:	53 83       	std	Z+3, r21	; 0x03
    40a8:	08 95       	ret

000040aa <__mulsf3>:
    40aa:	0b d0       	rcall	.+22     	; 0x40c2 <__mulsf3x>
    40ac:	97 ce       	rjmp	.-722    	; 0x3ddc <__fp_round>
    40ae:	60 de       	rcall	.-832    	; 0x3d70 <__fp_pscA>
    40b0:	28 f0       	brcs	.+10     	; 0x40bc <__mulsf3+0x12>
    40b2:	65 de       	rcall	.-822    	; 0x3d7e <__fp_pscB>
    40b4:	18 f0       	brcs	.+6      	; 0x40bc <__mulsf3+0x12>
    40b6:	95 23       	and	r25, r21
    40b8:	09 f0       	breq	.+2      	; 0x40bc <__mulsf3+0x12>
    40ba:	03 ce       	rjmp	.-1018   	; 0x3cc2 <__fp_inf>
    40bc:	31 ce       	rjmp	.-926    	; 0x3d20 <__fp_nan>
    40be:	11 24       	eor	r1, r1
    40c0:	e9 ce       	rjmp	.-558    	; 0x3e94 <__fp_szero>

000040c2 <__mulsf3x>:
    40c2:	ae de       	rcall	.-676    	; 0x3e20 <__fp_split3>
    40c4:	a0 f3       	brcs	.-24     	; 0x40ae <__mulsf3+0x4>

000040c6 <__mulsf3_pse>:
    40c6:	95 9f       	mul	r25, r21
    40c8:	d1 f3       	breq	.-12     	; 0x40be <__mulsf3+0x14>
    40ca:	95 0f       	add	r25, r21
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	55 1f       	adc	r21, r21
    40d0:	62 9f       	mul	r22, r18
    40d2:	f0 01       	movw	r30, r0
    40d4:	72 9f       	mul	r23, r18
    40d6:	bb 27       	eor	r27, r27
    40d8:	f0 0d       	add	r31, r0
    40da:	b1 1d       	adc	r27, r1
    40dc:	63 9f       	mul	r22, r19
    40de:	aa 27       	eor	r26, r26
    40e0:	f0 0d       	add	r31, r0
    40e2:	b1 1d       	adc	r27, r1
    40e4:	aa 1f       	adc	r26, r26
    40e6:	64 9f       	mul	r22, r20
    40e8:	66 27       	eor	r22, r22
    40ea:	b0 0d       	add	r27, r0
    40ec:	a1 1d       	adc	r26, r1
    40ee:	66 1f       	adc	r22, r22
    40f0:	82 9f       	mul	r24, r18
    40f2:	22 27       	eor	r18, r18
    40f4:	b0 0d       	add	r27, r0
    40f6:	a1 1d       	adc	r26, r1
    40f8:	62 1f       	adc	r22, r18
    40fa:	73 9f       	mul	r23, r19
    40fc:	b0 0d       	add	r27, r0
    40fe:	a1 1d       	adc	r26, r1
    4100:	62 1f       	adc	r22, r18
    4102:	83 9f       	mul	r24, r19
    4104:	a0 0d       	add	r26, r0
    4106:	61 1d       	adc	r22, r1
    4108:	22 1f       	adc	r18, r18
    410a:	74 9f       	mul	r23, r20
    410c:	33 27       	eor	r19, r19
    410e:	a0 0d       	add	r26, r0
    4110:	61 1d       	adc	r22, r1
    4112:	23 1f       	adc	r18, r19
    4114:	84 9f       	mul	r24, r20
    4116:	60 0d       	add	r22, r0
    4118:	21 1d       	adc	r18, r1
    411a:	82 2f       	mov	r24, r18
    411c:	76 2f       	mov	r23, r22
    411e:	6a 2f       	mov	r22, r26
    4120:	11 24       	eor	r1, r1
    4122:	9f 57       	subi	r25, 0x7F	; 127
    4124:	50 40       	sbci	r21, 0x00	; 0
    4126:	8a f0       	brmi	.+34     	; 0x414a <__mulsf3_pse+0x84>
    4128:	e1 f0       	breq	.+56     	; 0x4162 <__mulsf3_pse+0x9c>
    412a:	88 23       	and	r24, r24
    412c:	4a f0       	brmi	.+18     	; 0x4140 <__mulsf3_pse+0x7a>
    412e:	ee 0f       	add	r30, r30
    4130:	ff 1f       	adc	r31, r31
    4132:	bb 1f       	adc	r27, r27
    4134:	66 1f       	adc	r22, r22
    4136:	77 1f       	adc	r23, r23
    4138:	88 1f       	adc	r24, r24
    413a:	91 50       	subi	r25, 0x01	; 1
    413c:	50 40       	sbci	r21, 0x00	; 0
    413e:	a9 f7       	brne	.-22     	; 0x412a <__mulsf3_pse+0x64>
    4140:	9e 3f       	cpi	r25, 0xFE	; 254
    4142:	51 05       	cpc	r21, r1
    4144:	70 f0       	brcs	.+28     	; 0x4162 <__mulsf3_pse+0x9c>
    4146:	bd cd       	rjmp	.-1158   	; 0x3cc2 <__fp_inf>
    4148:	a5 ce       	rjmp	.-694    	; 0x3e94 <__fp_szero>
    414a:	5f 3f       	cpi	r21, 0xFF	; 255
    414c:	ec f3       	brlt	.-6      	; 0x4148 <__mulsf3_pse+0x82>
    414e:	98 3e       	cpi	r25, 0xE8	; 232
    4150:	dc f3       	brlt	.-10     	; 0x4148 <__mulsf3_pse+0x82>
    4152:	86 95       	lsr	r24
    4154:	77 95       	ror	r23
    4156:	67 95       	ror	r22
    4158:	b7 95       	ror	r27
    415a:	f7 95       	ror	r31
    415c:	e7 95       	ror	r30
    415e:	9f 5f       	subi	r25, 0xFF	; 255
    4160:	c1 f7       	brne	.-16     	; 0x4152 <__mulsf3_pse+0x8c>
    4162:	fe 2b       	or	r31, r30
    4164:	88 0f       	add	r24, r24
    4166:	91 1d       	adc	r25, r1
    4168:	96 95       	lsr	r25
    416a:	87 95       	ror	r24
    416c:	97 f9       	bld	r25, 7
    416e:	08 95       	ret

00004170 <round>:
    4170:	5f de       	rcall	.-834    	; 0x3e30 <__fp_splitA>
    4172:	e0 f0       	brcs	.+56     	; 0x41ac <round+0x3c>
    4174:	9e 37       	cpi	r25, 0x7E	; 126
    4176:	d8 f0       	brcs	.+54     	; 0x41ae <round+0x3e>
    4178:	96 39       	cpi	r25, 0x96	; 150
    417a:	b8 f4       	brcc	.+46     	; 0x41aa <round+0x3a>
    417c:	9e 38       	cpi	r25, 0x8E	; 142
    417e:	48 f4       	brcc	.+18     	; 0x4192 <round+0x22>
    4180:	67 2f       	mov	r22, r23
    4182:	78 2f       	mov	r23, r24
    4184:	88 27       	eor	r24, r24
    4186:	98 5f       	subi	r25, 0xF8	; 248
    4188:	f9 cf       	rjmp	.-14     	; 0x417c <round+0xc>
    418a:	86 95       	lsr	r24
    418c:	77 95       	ror	r23
    418e:	67 95       	ror	r22
    4190:	93 95       	inc	r25
    4192:	95 39       	cpi	r25, 0x95	; 149
    4194:	d0 f3       	brcs	.-12     	; 0x418a <round+0x1a>
    4196:	b6 2f       	mov	r27, r22
    4198:	b1 70       	andi	r27, 0x01	; 1
    419a:	6b 0f       	add	r22, r27
    419c:	71 1d       	adc	r23, r1
    419e:	81 1d       	adc	r24, r1
    41a0:	20 f4       	brcc	.+8      	; 0x41aa <round+0x3a>
    41a2:	87 95       	ror	r24
    41a4:	77 95       	ror	r23
    41a6:	67 95       	ror	r22
    41a8:	93 95       	inc	r25
    41aa:	91 cd       	rjmp	.-1246   	; 0x3cce <__fp_mintl>
    41ac:	ab cd       	rjmp	.-1194   	; 0x3d04 <__fp_mpack>
    41ae:	72 ce       	rjmp	.-796    	; 0x3e94 <__fp_szero>

000041b0 <sin>:
    41b0:	9f 93       	push	r25
    41b2:	ed dd       	rcall	.-1062   	; 0x3d8e <__fp_rempio2>
    41b4:	0f 90       	pop	r0
    41b6:	07 fc       	sbrc	r0, 7
    41b8:	ee 5f       	subi	r30, 0xFE	; 254
    41ba:	21 ce       	rjmp	.-958    	; 0x3dfe <__fp_sinus>
    41bc:	11 f4       	brne	.+4      	; 0x41c2 <sin+0x12>
    41be:	0e f4       	brtc	.+2      	; 0x41c2 <sin+0x12>
    41c0:	af cd       	rjmp	.-1186   	; 0x3d20 <__fp_nan>
    41c2:	a0 cd       	rjmp	.-1216   	; 0x3d04 <__fp_mpack>

000041c4 <sqrt>:
    41c4:	35 de       	rcall	.-918    	; 0x3e30 <__fp_splitA>
    41c6:	d0 f3       	brcs	.-12     	; 0x41bc <sin+0xc>
    41c8:	99 23       	and	r25, r25
    41ca:	d9 f3       	breq	.-10     	; 0x41c2 <sin+0x12>
    41cc:	ce f3       	brts	.-14     	; 0x41c0 <sin+0x10>
    41ce:	9f 57       	subi	r25, 0x7F	; 127
    41d0:	55 0b       	sbc	r21, r21
    41d2:	87 ff       	sbrs	r24, 7
    41d4:	46 d0       	rcall	.+140    	; 0x4262 <__fp_norm2>
    41d6:	00 24       	eor	r0, r0
    41d8:	a0 e6       	ldi	r26, 0x60	; 96
    41da:	40 ea       	ldi	r20, 0xA0	; 160
    41dc:	90 01       	movw	r18, r0
    41de:	80 58       	subi	r24, 0x80	; 128
    41e0:	56 95       	lsr	r21
    41e2:	97 95       	ror	r25
    41e4:	28 f4       	brcc	.+10     	; 0x41f0 <sqrt+0x2c>
    41e6:	80 5c       	subi	r24, 0xC0	; 192
    41e8:	66 0f       	add	r22, r22
    41ea:	77 1f       	adc	r23, r23
    41ec:	88 1f       	adc	r24, r24
    41ee:	20 f0       	brcs	.+8      	; 0x41f8 <sqrt+0x34>
    41f0:	26 17       	cp	r18, r22
    41f2:	37 07       	cpc	r19, r23
    41f4:	48 07       	cpc	r20, r24
    41f6:	30 f4       	brcc	.+12     	; 0x4204 <sqrt+0x40>
    41f8:	62 1b       	sub	r22, r18
    41fa:	73 0b       	sbc	r23, r19
    41fc:	84 0b       	sbc	r24, r20
    41fe:	20 29       	or	r18, r0
    4200:	31 29       	or	r19, r1
    4202:	4a 2b       	or	r20, r26
    4204:	a6 95       	lsr	r26
    4206:	17 94       	ror	r1
    4208:	07 94       	ror	r0
    420a:	20 25       	eor	r18, r0
    420c:	31 25       	eor	r19, r1
    420e:	4a 27       	eor	r20, r26
    4210:	58 f7       	brcc	.-42     	; 0x41e8 <sqrt+0x24>
    4212:	66 0f       	add	r22, r22
    4214:	77 1f       	adc	r23, r23
    4216:	88 1f       	adc	r24, r24
    4218:	20 f0       	brcs	.+8      	; 0x4222 <sqrt+0x5e>
    421a:	26 17       	cp	r18, r22
    421c:	37 07       	cpc	r19, r23
    421e:	48 07       	cpc	r20, r24
    4220:	30 f4       	brcc	.+12     	; 0x422e <sqrt+0x6a>
    4222:	62 0b       	sbc	r22, r18
    4224:	73 0b       	sbc	r23, r19
    4226:	84 0b       	sbc	r24, r20
    4228:	20 0d       	add	r18, r0
    422a:	31 1d       	adc	r19, r1
    422c:	41 1d       	adc	r20, r1
    422e:	a0 95       	com	r26
    4230:	81 f7       	brne	.-32     	; 0x4212 <sqrt+0x4e>
    4232:	b9 01       	movw	r22, r18
    4234:	84 2f       	mov	r24, r20
    4236:	91 58       	subi	r25, 0x81	; 129
    4238:	88 0f       	add	r24, r24
    423a:	96 95       	lsr	r25
    423c:	87 95       	ror	r24
    423e:	08 95       	ret

00004240 <square>:
    4240:	9b 01       	movw	r18, r22
    4242:	ac 01       	movw	r20, r24
    4244:	32 cf       	rjmp	.-412    	; 0x40aa <__mulsf3>

00004246 <trunc>:
    4246:	0e de       	rcall	.-996    	; 0x3e64 <__fp_trunc>
    4248:	20 f0       	brcs	.+8      	; 0x4252 <trunc+0xc>
    424a:	9f 37       	cpi	r25, 0x7F	; 127
    424c:	08 f4       	brcc	.+2      	; 0x4250 <trunc+0xa>
    424e:	22 ce       	rjmp	.-956    	; 0x3e94 <__fp_szero>
    4250:	3e cd       	rjmp	.-1412   	; 0x3cce <__fp_mintl>
    4252:	58 cd       	rjmp	.-1360   	; 0x3d04 <__fp_mpack>

00004254 <__unordsf2>:
    4254:	12 dd       	rcall	.-1500   	; 0x3c7a <__fp_cmp>
    4256:	88 0b       	sbc	r24, r24
    4258:	99 0b       	sbc	r25, r25
    425a:	08 95       	ret

0000425c <__ctype_isfalse>:
    425c:	99 27       	eor	r25, r25
    425e:	88 27       	eor	r24, r24

00004260 <__ctype_istrue>:
    4260:	08 95       	ret

00004262 <__fp_norm2>:
    4262:	91 50       	subi	r25, 0x01	; 1
    4264:	50 40       	sbci	r21, 0x00	; 0
    4266:	66 0f       	add	r22, r22
    4268:	77 1f       	adc	r23, r23
    426a:	88 1f       	adc	r24, r24
    426c:	d2 f7       	brpl	.-12     	; 0x4262 <__fp_norm2>
    426e:	08 95       	ret

00004270 <__fp_powsodd>:
    4270:	9f 93       	push	r25
    4272:	8f 93       	push	r24
    4274:	7f 93       	push	r23
    4276:	6f 93       	push	r22
    4278:	ff 93       	push	r31
    427a:	ef 93       	push	r30
    427c:	9b 01       	movw	r18, r22
    427e:	ac 01       	movw	r20, r24
    4280:	14 df       	rcall	.-472    	; 0x40aa <__mulsf3>
    4282:	ef 91       	pop	r30
    4284:	ff 91       	pop	r31
    4286:	4f dd       	rcall	.-1378   	; 0x3d26 <__fp_powser>
    4288:	2f 91       	pop	r18
    428a:	3f 91       	pop	r19
    428c:	4f 91       	pop	r20
    428e:	5f 91       	pop	r21
    4290:	0c cf       	rjmp	.-488    	; 0x40aa <__mulsf3>

00004292 <__mulsi3>:
    4292:	62 9f       	mul	r22, r18
    4294:	d0 01       	movw	r26, r0
    4296:	73 9f       	mul	r23, r19
    4298:	f0 01       	movw	r30, r0
    429a:	82 9f       	mul	r24, r18
    429c:	e0 0d       	add	r30, r0
    429e:	f1 1d       	adc	r31, r1
    42a0:	64 9f       	mul	r22, r20
    42a2:	e0 0d       	add	r30, r0
    42a4:	f1 1d       	adc	r31, r1
    42a6:	92 9f       	mul	r25, r18
    42a8:	f0 0d       	add	r31, r0
    42aa:	83 9f       	mul	r24, r19
    42ac:	f0 0d       	add	r31, r0
    42ae:	74 9f       	mul	r23, r20
    42b0:	f0 0d       	add	r31, r0
    42b2:	65 9f       	mul	r22, r21
    42b4:	f0 0d       	add	r31, r0
    42b6:	99 27       	eor	r25, r25
    42b8:	72 9f       	mul	r23, r18
    42ba:	b0 0d       	add	r27, r0
    42bc:	e1 1d       	adc	r30, r1
    42be:	f9 1f       	adc	r31, r25
    42c0:	63 9f       	mul	r22, r19
    42c2:	b0 0d       	add	r27, r0
    42c4:	e1 1d       	adc	r30, r1
    42c6:	f9 1f       	adc	r31, r25
    42c8:	bd 01       	movw	r22, r26
    42ca:	cf 01       	movw	r24, r30
    42cc:	11 24       	eor	r1, r1
    42ce:	08 95       	ret

000042d0 <__divmodhi4>:
    42d0:	97 fb       	bst	r25, 7
    42d2:	09 2e       	mov	r0, r25
    42d4:	07 26       	eor	r0, r23
    42d6:	0a d0       	rcall	.+20     	; 0x42ec <__divmodhi4_neg1>
    42d8:	77 fd       	sbrc	r23, 7
    42da:	04 d0       	rcall	.+8      	; 0x42e4 <__divmodhi4_neg2>
    42dc:	80 d0       	rcall	.+256    	; 0x43de <__udivmodhi4>
    42de:	06 d0       	rcall	.+12     	; 0x42ec <__divmodhi4_neg1>
    42e0:	00 20       	and	r0, r0
    42e2:	1a f4       	brpl	.+6      	; 0x42ea <__divmodhi4_exit>

000042e4 <__divmodhi4_neg2>:
    42e4:	70 95       	com	r23
    42e6:	61 95       	neg	r22
    42e8:	7f 4f       	sbci	r23, 0xFF	; 255

000042ea <__divmodhi4_exit>:
    42ea:	08 95       	ret

000042ec <__divmodhi4_neg1>:
    42ec:	f6 f7       	brtc	.-4      	; 0x42ea <__divmodhi4_exit>
    42ee:	90 95       	com	r25
    42f0:	81 95       	neg	r24
    42f2:	9f 4f       	sbci	r25, 0xFF	; 255
    42f4:	08 95       	ret

000042f6 <__udivmodsi4>:
    42f6:	a1 e2       	ldi	r26, 0x21	; 33
    42f8:	1a 2e       	mov	r1, r26
    42fa:	aa 1b       	sub	r26, r26
    42fc:	bb 1b       	sub	r27, r27
    42fe:	fd 01       	movw	r30, r26
    4300:	0d c0       	rjmp	.+26     	; 0x431c <__udivmodsi4_ep>

00004302 <__udivmodsi4_loop>:
    4302:	aa 1f       	adc	r26, r26
    4304:	bb 1f       	adc	r27, r27
    4306:	ee 1f       	adc	r30, r30
    4308:	ff 1f       	adc	r31, r31
    430a:	a2 17       	cp	r26, r18
    430c:	b3 07       	cpc	r27, r19
    430e:	e4 07       	cpc	r30, r20
    4310:	f5 07       	cpc	r31, r21
    4312:	20 f0       	brcs	.+8      	; 0x431c <__udivmodsi4_ep>
    4314:	a2 1b       	sub	r26, r18
    4316:	b3 0b       	sbc	r27, r19
    4318:	e4 0b       	sbc	r30, r20
    431a:	f5 0b       	sbc	r31, r21

0000431c <__udivmodsi4_ep>:
    431c:	66 1f       	adc	r22, r22
    431e:	77 1f       	adc	r23, r23
    4320:	88 1f       	adc	r24, r24
    4322:	99 1f       	adc	r25, r25
    4324:	1a 94       	dec	r1
    4326:	69 f7       	brne	.-38     	; 0x4302 <__udivmodsi4_loop>
    4328:	60 95       	com	r22
    432a:	70 95       	com	r23
    432c:	80 95       	com	r24
    432e:	90 95       	com	r25
    4330:	9b 01       	movw	r18, r22
    4332:	ac 01       	movw	r20, r24
    4334:	bd 01       	movw	r22, r26
    4336:	cf 01       	movw	r24, r30
    4338:	08 95       	ret

0000433a <__divmodsi4>:
    433a:	97 fb       	bst	r25, 7
    433c:	09 2e       	mov	r0, r25
    433e:	05 26       	eor	r0, r21
    4340:	0e d0       	rcall	.+28     	; 0x435e <__divmodsi4_neg1>
    4342:	57 fd       	sbrc	r21, 7
    4344:	04 d0       	rcall	.+8      	; 0x434e <__divmodsi4_neg2>
    4346:	d7 df       	rcall	.-82     	; 0x42f6 <__udivmodsi4>
    4348:	0a d0       	rcall	.+20     	; 0x435e <__divmodsi4_neg1>
    434a:	00 1c       	adc	r0, r0
    434c:	38 f4       	brcc	.+14     	; 0x435c <__divmodsi4_exit>

0000434e <__divmodsi4_neg2>:
    434e:	50 95       	com	r21
    4350:	40 95       	com	r20
    4352:	30 95       	com	r19
    4354:	21 95       	neg	r18
    4356:	3f 4f       	sbci	r19, 0xFF	; 255
    4358:	4f 4f       	sbci	r20, 0xFF	; 255
    435a:	5f 4f       	sbci	r21, 0xFF	; 255

0000435c <__divmodsi4_exit>:
    435c:	08 95       	ret

0000435e <__divmodsi4_neg1>:
    435e:	f6 f7       	brtc	.-4      	; 0x435c <__divmodsi4_exit>
    4360:	90 95       	com	r25
    4362:	80 95       	com	r24
    4364:	70 95       	com	r23
    4366:	61 95       	neg	r22
    4368:	7f 4f       	sbci	r23, 0xFF	; 255
    436a:	8f 4f       	sbci	r24, 0xFF	; 255
    436c:	9f 4f       	sbci	r25, 0xFF	; 255
    436e:	08 95       	ret

00004370 <__prologue_saves__>:
    4370:	2f 92       	push	r2
    4372:	3f 92       	push	r3
    4374:	4f 92       	push	r4
    4376:	5f 92       	push	r5
    4378:	6f 92       	push	r6
    437a:	7f 92       	push	r7
    437c:	8f 92       	push	r8
    437e:	9f 92       	push	r9
    4380:	af 92       	push	r10
    4382:	bf 92       	push	r11
    4384:	cf 92       	push	r12
    4386:	df 92       	push	r13
    4388:	ef 92       	push	r14
    438a:	ff 92       	push	r15
    438c:	0f 93       	push	r16
    438e:	1f 93       	push	r17
    4390:	cf 93       	push	r28
    4392:	df 93       	push	r29
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	ca 1b       	sub	r28, r26
    439a:	db 0b       	sbc	r29, r27
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	09 94       	ijmp

000043a8 <__epilogue_restores__>:
    43a8:	2a 88       	ldd	r2, Y+18	; 0x12
    43aa:	39 88       	ldd	r3, Y+17	; 0x11
    43ac:	48 88       	ldd	r4, Y+16	; 0x10
    43ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    43b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    43b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    43b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    43b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    43b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    43ba:	b9 84       	ldd	r11, Y+9	; 0x09
    43bc:	c8 84       	ldd	r12, Y+8	; 0x08
    43be:	df 80       	ldd	r13, Y+7	; 0x07
    43c0:	ee 80       	ldd	r14, Y+6	; 0x06
    43c2:	fd 80       	ldd	r15, Y+5	; 0x05
    43c4:	0c 81       	ldd	r16, Y+4	; 0x04
    43c6:	1b 81       	ldd	r17, Y+3	; 0x03
    43c8:	aa 81       	ldd	r26, Y+2	; 0x02
    43ca:	b9 81       	ldd	r27, Y+1	; 0x01
    43cc:	ce 0f       	add	r28, r30
    43ce:	d1 1d       	adc	r29, r1
    43d0:	0f b6       	in	r0, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	de bf       	out	0x3e, r29	; 62
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	cd bf       	out	0x3d, r28	; 61
    43da:	ed 01       	movw	r28, r26
    43dc:	08 95       	ret

000043de <__udivmodhi4>:
    43de:	aa 1b       	sub	r26, r26
    43e0:	bb 1b       	sub	r27, r27
    43e2:	51 e1       	ldi	r21, 0x11	; 17
    43e4:	07 c0       	rjmp	.+14     	; 0x43f4 <__udivmodhi4_ep>

000043e6 <__udivmodhi4_loop>:
    43e6:	aa 1f       	adc	r26, r26
    43e8:	bb 1f       	adc	r27, r27
    43ea:	a6 17       	cp	r26, r22
    43ec:	b7 07       	cpc	r27, r23
    43ee:	10 f0       	brcs	.+4      	; 0x43f4 <__udivmodhi4_ep>
    43f0:	a6 1b       	sub	r26, r22
    43f2:	b7 0b       	sbc	r27, r23

000043f4 <__udivmodhi4_ep>:
    43f4:	88 1f       	adc	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	5a 95       	dec	r21
    43fa:	a9 f7       	brne	.-22     	; 0x43e6 <__udivmodhi4_loop>
    43fc:	80 95       	com	r24
    43fe:	90 95       	com	r25
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	08 95       	ret

00004406 <_exit>:
    4406:	f8 94       	cli

00004408 <__stop_program>:
    4408:	ff cf       	rjmp	.-2      	; 0x4408 <__stop_program>
